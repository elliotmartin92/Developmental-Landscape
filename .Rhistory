select(gene, avg_log2FC, cluster) %>%
pivot_wider(id_cols = gene, names_from = cluster, values_from = avg_log2FC) %>%
filter(gene %in% all_de_genes_GC) %>%
column_to_rownames(var = "gene") %>%
as.data.frame()
all_de_GC = FindAllMarkers(GC_clusters, logfc.threshold = 0.75) #DE with 0.75 logFC cutoff
all_de_genes_GC = all_de %>% pull(gene) #extract genes that are DE as list
all_de_genes_GC = all_de_GC %>% pull(gene) #extract genes that are DE as list
# subset all_fold_changes_GC to onlt geens that are DE
heat_data_GC = all_fold_changes_GC %>%
ungroup() %>%
select(gene, avg_log2FC, cluster) %>%
pivot_wider(id_cols = gene, names_from = cluster, values_from = avg_log2FC) %>%
filter(gene %in% all_de_genes_GC) %>%
column_to_rownames(var = "gene") %>%
as.data.frame()
# write out generated data to deliver to heatmap generation preprocessing script
write_rds(all_fold_changes_GC, "ShinyExpresionMap/Preprocessed_data/single_cell_seq_fold_changes_GC.RDS")
write_rds(all_de_genes_GC, "ShinyExpresionMap/Preprocessed_data/single_cell_seq_regulated_gene_list_GC.RDS")
write_rds(heat_data_GC, "ShinyExpresionMap/Preprocessed_data/single_cell_seq_regulated_gene_fold_change_list_GC.RDS")
write.xlsx(all_de_GC, "DE_Analysis/single_cell/GC_single_cell_DE.xlsx")
modls = function(x){log2(x+1)}
DE_heatmap = function(data_set_to_plot="Input_seq"){
if(data_set_to_plot == "Input_seq"){
data.seq = readRDS("ShinyExpresionMap/Preprocessed_data/preprocessed_RNA_seq_data.RDS")
changing_genes = readRDS("ShinyExpresionMap/Preprocessed_data/developmentally_regulated_gene_list.RDS")
heat_data = data.seq %>%
ungroup() %>%
filter(FBGN %in% changing_genes) %>%
dplyr::select(MeanTPM_TKV_input,
MeanTPM_BamRNAi_input,
MeanTPM_BamHSbam_input,
MeanTPM_youngWT_input) %>%
modls() %>%
data.frame()
column_labels =
c("UAS-tkv",
"bam RNAi",
"bam RNAi; HS-bam",
"Young WT")
rownames(heat_data) = data.seq %>% filter(FBGN %in% changing_genes) %>% pull(FBGN)
}else if (data_set_to_plot == "Polysome_seq"){
data.seq = readRDS("ShinyExpresionMap/Preprocessed_data/preprocessed_polysome_seq_data.RDS")
changing_genes = readRDS("ShinyExpresionMap/Preprocessed_data/developmentally_regulated_gene_list_polysome.RDS")
heat_data = data.seq %>%
ungroup() %>%
filter(FBGN %in% changing_genes) %>%
dplyr::select(Mean_log2_polysome_over_input_TKV,
Mean_log2_polysome_over_input_BamRNAi,
Mean_log2_polysome_over_input_BamHSbam,
Mean_log2_polysome_over_input_youngWT) %>%
data.frame()
column_labels =
c("UAS-tkv",
"bam RNAi",
"bam RNAi; HS-bam",
"Young WT")
rownames(heat_data) = data.seq %>% filter(FBGN %in% changing_genes) %>% pull(FBGN)
}else if (data_set_to_plot == "Single_cell_seq_germline"){
heat_data = readRDS("ShinyExpresionMap/Preprocessed_data/single_cell_seq_regulated_gene_fold_change_list_GC.RDS")
column_labels =
c("GSC CB 2CC",
"4CC",
"8CC",
"16CC",
"16CC 2a 1",
"16CC 2a 2",
"16CC 2b",
"16CC 3",
"St2")
}
else if (data_set_to_plot == "Single_cell_seq_soma"){
heat_data = readRDS("ShinyExpresionMap/Preprocessed_data/single_cell_seq_regulated_gene_fold_change_list_germarium_soma.RDS")
column_labels =
c("TF/CC",
"aEc",
"cEc",
"pEc",
"FSC/pre-FC",
"pre-stalk",
"stalk",
"polar")
rownames(heat_data) = data.seq %>% filter(Symbol %in% changing_genes) %>% pull(Symbol)
}
heat_map_plotly = heatmaply(heat_data,
showticklabels = c(TRUE, FALSE),
labCol=column_labels,
seriate = "none",
Colv = FALSE)
write_rds(x = heat_map_plotly, file = paste0("ShinyExpresionMap/Preprocessed_data/", data_set_to_plot, "_plotly_heatmap.RDS"))
}
data_sets = c("Input_seq", "Polysome_seq", "Single_cell_seq_germline", "Single_cell_seq_soma")
lapply(data_sets, DE_heatmap)
heat_data = readRDS("ShinyExpresionMap/Preprocessed_data/single_cell_seq_regulated_gene_fold_change_list_GC.RDS")
heat_data
heat_map_plotly = heatmaply(heat_data,
showticklabels = c(TRUE, FALSE),
labCol=column_labels,
seriate = "none",
Colv = FALSE)
column_labels =
c("GSC CB 2CC",
"4CC",
"8CC",
"16CC",
"16CC 2a 1",
"16CC 2a 2",
"16CC 2b",
"16CC 3",
"St2")
heat_map_plotly = heatmaply(heat_data,
showticklabels = c(TRUE, FALSE),
labCol=column_labels,
seriate = "none",
Colv = FALSE)
modls = function(x){log2(x+1)}
DE_heatmap = function(data_set_to_plot="Input_seq"){
if(data_set_to_plot == "Input_seq"){
data.seq = readRDS("ShinyExpresionMap/Preprocessed_data/preprocessed_RNA_seq_data.RDS")
changing_genes = readRDS("ShinyExpresionMap/Preprocessed_data/developmentally_regulated_gene_list.RDS")
heat_data = data.seq %>%
ungroup() %>%
filter(FBGN %in% changing_genes) %>%
dplyr::select(MeanTPM_TKV_input,
MeanTPM_BamRNAi_input,
MeanTPM_BamHSbam_input,
MeanTPM_youngWT_input) %>%
modls() %>%
data.frame()
column_labels =
c("UAS-tkv",
"bam RNAi",
"bam RNAi; HS-bam",
"Young WT")
rownames(heat_data) = data.seq %>% filter(FBGN %in% changing_genes) %>% pull(FBGN)
}else if (data_set_to_plot == "Polysome_seq"){
data.seq = readRDS("ShinyExpresionMap/Preprocessed_data/preprocessed_polysome_seq_data.RDS")
changing_genes = readRDS("ShinyExpresionMap/Preprocessed_data/developmentally_regulated_gene_list_polysome.RDS")
heat_data = data.seq %>%
ungroup() %>%
filter(FBGN %in% changing_genes) %>%
dplyr::select(Mean_log2_polysome_over_input_TKV,
Mean_log2_polysome_over_input_BamRNAi,
Mean_log2_polysome_over_input_BamHSbam,
Mean_log2_polysome_over_input_youngWT) %>%
data.frame()
column_labels =
c("UAS-tkv",
"bam RNAi",
"bam RNAi; HS-bam",
"Young WT")
rownames(heat_data) = data.seq %>% filter(FBGN %in% changing_genes) %>% pull(FBGN)
}else if (data_set_to_plot == "Single_cell_seq_germline"){
heat_data = readRDS("ShinyExpresionMap/Preprocessed_data/single_cell_seq_regulated_gene_fold_change_list_GC.RDS")
column_labels =
c("GSC CB 2CC",
"4CC",
"8CC",
"16CC",
"16CC 2a 1",
"16CC 2a 2",
"16CC 2b",
"16CC 3",
"St2")
}
else if (data_set_to_plot == "Single_cell_seq_soma"){
heat_data = readRDS("ShinyExpresionMap/Preprocessed_data/single_cell_seq_regulated_gene_fold_change_list_germarium_soma.RDS")
column_labels =
c("TF/CC",
"aEc",
"cEc",
"pEc",
"FSC/pre-FC",
"pre-stalk",
"stalk",
"polar")
}
heat_map_plotly = heatmaply(heat_data,
showticklabels = c(TRUE, FALSE),
labCol=column_labels,
seriate = "none",
Colv = FALSE)
write_rds(x = heat_map_plotly, file = paste0("ShinyExpresionMap/Preprocessed_data/", data_set_to_plot, "_plotly_heatmap.RDS"))
}
data_sets = c("Input_seq", "Polysome_seq", "Single_cell_seq_germline", "Single_cell_seq_soma")
lapply(data_sets, DE_heatmap)
runApp('ShinyExpresionMap')
setwd("E:/Documents/Developmental-Landscape/ShinyExpresionMap/server_modules")
setwd("E:/Documents/Developmental-Landscape/ShinyExpresionMap")
readRDS("Preprocessed_data/Input_seq_plotly_heatmap")
heat_map_global <<- readRDS("Preprocessed_data/Input_seq_plotly_heatmap.RDS")
runApp()
runApp()
runApp()
heatmap_local = readRDS("Preprocessed_data/Single_cell_seq_germline_plotly_heatmap.RDS")
heatmap_local
runApp()
runApp()
runApp()
setwd("E:/Documents/Developmental-Landscape/ShinyExpresionMap")
library(tidyverse)
library(openxlsx)
convert_sc_symbol_to_FBGN = function(sheet_name){
# Conversion table from Maija
conversion_table = read_tsv("Normalized_expression/Symbol_to_FBID_table_sc_seq.tsv", col_names = c("FBGN", "Symbol"))
# Clusterwise expression data
single_cell_data = read.xlsx("Normalized_expression/SC_seq_expression.xlsx", sheet = sheet_name)
# Clean up names and generate bins
single_cell_data_converted = left_join(x = single_cell_data, y = conversion_table, by = c("X1"="Symbol")) %>%
rename(Symbol=X1) %>%
relocate(FBGN, .before = Symbol) %>%
pivot_longer(-c(FBGN, Symbol), names_to = "Stage", values_to = "Expression") %>%
dplyr::group_by(Symbol, Stage) %>%
mutate(bin = cut(as.numeric(Expression),
breaks = c(-1,0.05,0.25,0.5,2.5,25,200),
labels=c("None","Very Low","Low","Med","High","Very High"))) %>%
pivot_wider(id_cols = Symbol, names_from = Stage, values_from = c(Expression, bin))
# save results as RDS object
write_rds(single_cell_data_converted,
paste0("ShinyExpresionMap/Preprocessed_data/preprocessed_single_cell_seq_data_", sheet_name,".RDS"))
}
# apply convert_sc_symbol_to_FBGN to each sheet of single cell data
sheets_names = getSheetNames("Normalized_expression/SC_seq_expression.xlsx")
lapply(sheets_names, convert_sc_symbol_to_FBGN)
setwd("E:/Documents/Developmental-Landscape")
library(tidyverse)
library(openxlsx)
convert_sc_symbol_to_FBGN = function(sheet_name){
# Conversion table from Maija
conversion_table = read_tsv("Normalized_expression/Symbol_to_FBID_table_sc_seq.tsv", col_names = c("FBGN", "Symbol"))
# Clusterwise expression data
single_cell_data = read.xlsx("Normalized_expression/SC_seq_expression.xlsx", sheet = sheet_name)
# Clean up names and generate bins
single_cell_data_converted = left_join(x = single_cell_data, y = conversion_table, by = c("X1"="Symbol")) %>%
rename(Symbol=X1) %>%
relocate(FBGN, .before = Symbol) %>%
pivot_longer(-c(FBGN, Symbol), names_to = "Stage", values_to = "Expression") %>%
dplyr::group_by(Symbol, Stage) %>%
mutate(bin = cut(as.numeric(Expression),
breaks = c(-1,0.05,0.25,0.5,2.5,25,200),
labels=c("None","Very Low","Low","Med","High","Very High"))) %>%
pivot_wider(id_cols = Symbol, names_from = Stage, values_from = c(Expression, bin))
# save results as RDS object
write_rds(single_cell_data_converted,
paste0("ShinyExpresionMap/Preprocessed_data/preprocessed_single_cell_seq_data_", sheet_name,".RDS"))
}
# apply convert_sc_symbol_to_FBGN to each sheet of single cell data
sheets_names = getSheetNames("Normalized_expression/SC_seq_expression.xlsx")
lapply(sheets_names, convert_sc_symbol_to_FBGN)
setwd("E:/Documents/Developmental-Landscape/ShinyExpresionMap")
runApp()
runApp()
data.seq = readRDS("Preprocessed_data/preprocessed_single_cell_seq_data_germarium_soma.RDS")
data.seq
data.seq_pared = data.seq[c(20, 2:9)] #extract columns used for plotting
data.seq
data.seq[c(20, 2:9)]
data.seq = readRDS("Preprocessed_data/preprocessed_single_cell_seq_data_GC.RDS")
data.seq_pared = data.seq[c(20, 2:10)] #extract columns used for plotting
runApp()
data.seq
data.seq = readRDS("Preprocessed_data/preprocessed_single_cell_seq_data_GC.RDS")
data.seq
data.seq_pared = data.seq[c(1, 2:10)] #extract columns used for plotting
data.seq_pared
data.seq = readRDS("Preprocessed_data/preprocessed_single_cell_seq_data_GC.RDS")
data.seq_pared = data.seq[c(1, 2:10)] #extract columns used for plotting
data.seq_pared
data.seq = readRDS("Preprocessed_data/preprocessed_single_cell_seq_data_germarium_soma.RDS")
data.seq_pared = data.seq[c(20, 2:9)] #extract columns used for plotting
data.seq_pared = data.seq[c(1, 2:9)] #extract columns used for plotting
data.seq_pared
column_names = c("FBGN",
"TF/CC",
"aEc",
"cEc",
"pEc",
"FSC/pre-FC",
"pre-stalk",
"stalk",
"polar")
genotype_levels = c("TF/CC",
"aEc",
"cEc",
"pEc",
"FSC/pre-FC",
"pre-stalk",
"stalk",
"polar")
data.seq = readRDS("Preprocessed_data/single_cell_seq_fold_changes_germarium_soma.RDS")
data.seq
runApp()
if (graphic_to_generate == "legend") {
#Adding separate legend so that all legend values can always be displayed
legend.data = data.frame(Name = names(pal), Color = pal)
legend.data.cull = legend.data[-1,]
legend.data.cull$Name = factor(legend.data.cull$Name,
levels = c("None", "Very Low", "Low", "Med", "High", "Very High"))
dist_leg = ggplot(legend.data.cull)+
geom_area(aes(x=1, y=1, fill=Name))+
scale_fill_manual(values = pal, name="Binned\nExpression")+
theme_void()+
guides(fill = guide_legend(nrow = 1))+
theme(legend.position = "top",
legend.text = element_text(size=13),
legend.title = element_text(size=16))
return(dist_leg)
}else if (graphic_to_generate == "map"){
if (gene_name_format == "FBID") {
all.colors = data.seq[data.seq$FBGN %in% gene_of_interest, names(data.seq) %in% bins]
}else{
all.colors = data.seq[data.seq$Symbol %in% gene_of_interest, names(data.seq) %in% bins]
}
#mapping different features in shape to have proper base colors
if (data_set_to_plot == "Input_seq" | data_set_to_plot == "Polysome_seq") {
cysts_stages = c("2CC", "4CC", "8CC", "16CC_2A1", "16CC_2A2", "16CC_2AB", "16CC_2B", "16CC_3")
merge_plot$color[merge_plot$cell_type=="GSC"] = all.colors[[1]]
merge_plot$color[merge_plot$cell_type=="CB"] = all.colors[[2]]
merge_plot$color[merge_plot$cell_type %in% cysts_stages] = all.colors[[3]]
merge_plot$color[merge_plot$cell_type=="ST2"] = all.colors[[4]]
}else if (data_set_to_plot=="Single_cell_seq_germline"){
merge_plot$color[merge_plot$cell_type=="GSC"] = all.colors[[1]]
merge_plot$color[merge_plot$cell_type=="CB"] = all.colors[[1]]
merge_plot$color[merge_plot$cell_type=="2CC"] = all.colors[[1]]
merge_plot$color[merge_plot$cell_type=="4CC"] = all.colors[[2]]
merge_plot$color[merge_plot$cell_type=="8CC"] = all.colors[[3]]
merge_plot$color[merge_plot$cell_type=="16CC_2A1"] = all.colors[[4]]
merge_plot$color[merge_plot$cell_type=="16CC_2A2"] = all.colors[[5]]
merge_plot$color[merge_plot$cell_type=="16CC_2AB"] = all.colors[[6]]
merge_plot$color[merge_plot$cell_type=="16CC_2B"] = all.colors[[7]]
merge_plot$color[merge_plot$cell_type=="16CC_3"] = all.colors[[8]]
merge_plot$color[merge_plot$cell_type=="ST2"] = all.colors[[9]]
}else if (data_set_to_plot=="Single_cell_seq_soma"){
merge_plot$color[merge_plot$cell_type=="TF/CC"] = all.colors[[1]]
merge_plot$color[merge_plot$cell_type=="EC_a"] = all.colors[[2]]
merge_plot$color[merge_plot$cell_type=="EC_c"] = all.colors[[3]]
merge_plot$color[merge_plot$cell_type=="EC_p"] = all.colors[[4]]
merge_plot$color[merge_plot$cell_type=="FSC"] = all.colors[[5]]
merge_plot$color[merge_plot$cell_type=="pre-stalk"] = all.colors[[6]]
merge_plot$color[merge_plot$cell_type=="stalk"] = all.colors[[7]]
merge_plot$color[merge_plot$cell_type=="polar"] = all.colors[[8]]
}
#plotting distplot
dist_pl = merge_plot %>%
st_as_sf() %>%
arrange(region) %>%
mutate(region_index = row_number()) %>%
mutate(color = color %>% forcats::fct_reorder(-region_index)) %>%
filter(region != "background") %>%
ggplot()+
geom_sf(aes(geometry=geometry, fill=color), color = "grey50")+
scale_fill_manual(values = pal, name="Binned Expression")+
theme_void()+
theme(panel.grid.major = element_line(colour = "transparent"),
panel.background = element_rect(fill = "transparent", colour = "transparent"),
panel.border = element_rect(fill = "transparent", colour = "transparent"),
legend.position = "none")
dist_pl_rmd <<- dist_pl
# fetch parameters required for either type of label
if (displayTPM==TRUE | display_stage_labels==TRUE){
shape_centroids = st_centroid(shape)
shape_ymin = st_bbox(shape$geometry)[[2]]
shape_ymax = st_bbox(shape$geometry)[[4]]
shape.x.y = data.frame(x=map_dbl(shape_centroids$geometry, 1), y=map_dbl(shape_centroids$geometry, 2))
}
if (displayTPM==FALSE){ #switch for TPM display
}else{
if (data_set_to_plot=="Input_seq"){
if (gene_name_format == "FBID") {
TPMs = data.seq[data.seq$FBGN %in% gene_of_interest, 6:9][1,]
}else{
TPMs = data.seq[data.seq$Symbol %in% gene_of_interest, 6:9][1,]
}
}else if(data_set_to_plot=="Polysome_seq"){
if (gene_name_format == "FBID") {
TPMs = data.seq[data.seq$FBGN %in% gene_of_interest, 19:22][1,]
}else{
TPMs = data.seq[data.seq$Symbol %in% gene_of_interest, 19:22][1,]
}
}else if(data_set_to_plot=="Single_cell_seq_germline"){
if (gene_name_format == "FBID") {
TPMs = signif(data.seq[data.seq$FBGN %in% gene_of_interest, 2:10][1,], 2)
}else{
TPMs = signif(data.seq[data.seq$Symbol %in% gene_of_interest, 2:10][1,], 2)
}
}else if(data_set_to_plot=="Single_cell_seq_soma"){
if (gene_name_format == "FBID") {
TPMs = signif(data.seq[data.seq$FBGN %in% gene_of_interest, 2:9][1,], 2)
}else{
TPMs = signif(data.seq[data.seq$Symbol %in% gene_of_interest, 2:9][1,], 2)
}
}
#adding TPM values to the proper place on the shape
if (data_set_to_plot == "Input_seq" | data_set_to_plot == "Polysome_seq") {
dist_pl = dist_pl+
annotate("text", label=paste0(TPMs[1], "\n", expression_unit), x=shape.x.y[1,1], y=shape.x.y[1,2], size=text_scale)+
annotate("text", label=paste0(TPMs[2], "\n", expression_unit), x=shape.x.y[3,1], y=shape.x.y[3,2], size=text_scale)+
annotate("text", label=paste0(TPMs[3], " ", expression_unit), x=shape.x.y[4,1]+2.10,  y=shape_ymin-.1, size=text_scale)+
annotate("segment", x=shape.x.y[4,1], xend=shape.x.y[10,1]+.7, y=shape_ymin-.17, yend=shape_ymin-0.17)+
annotate("text", label=paste0(TPMs[4], " ", expression_unit), x=shape.x.y[12,1], y=shape.x.y[12,2]+.25, size=text_scale)
}else if (data_set_to_plot=="Single_cell_seq_germline"){
dist_pl = dist_pl+
# GSC-2CC
annotate("text", label=paste0(TPMs[1], " ", expression_unit),
x=st_bbox(shape[1,])[[1]]+(st_bbox(shape[4,])[[3]]-st_bbox(shape[1,])[[1]])/2,
y=shape_ymin+0.26, size=text_scale)+
annotate("segment", x=st_bbox(shape[1,])[[1]], xend=st_bbox(shape[4,])[[3]], y=shape_ymin+0.2, yend=shape_ymin+0.2)+
# 4CC
annotate("text", label=paste0(TPMs[2], "\n", expression_unit), x=shape.x.y[5,1], y=shape.x.y[5,2], size=text_scale)+
# 8CC
annotate("text", label=paste0(TPMs[3], "\n", expression_unit), x=shape.x.y[6,1], y=shape.x.y[6,2], size=text_scale)+
# 16CC_2A1
annotate("text", label=paste0(TPMs[4], "\n", expression_unit), x=shape.x.y[7,1], y=shape.x.y[7,2], size=text_scale)+
# 16CC_2A2
annotate("text", label=paste0(TPMs[5], "\n", expression_unit), x=shape.x.y[8,1], y=shape.x.y[8,2], size=text_scale)+
# 16CC_2AB
annotate("text", label=paste0(TPMs[6], "\n", expression_unit), x=shape.x.y[9,1], y=shape.x.y[9,2], size=text_scale)+
# 16CC_2B
annotate("text", label=paste0(TPMs[7], "\n", expression_unit), x=shape.x.y[10,1], y=shape.x.y[10,2], size=text_scale)+
# 16CC_3
annotate("text", label=paste0(TPMs[8], "\n", expression_unit), x=shape.x.y[11,1], y=shape.x.y[11,2], size=text_scale)+
# ST2
annotate("text", label=paste0(TPMs[9], "\n", expression_unit), x=shape.x.y[12,1], y=shape.x.y[12,2], size=text_scale)
}else if (data_set_to_plot=="Single_cell_seq_soma"){
dist_pl = dist_pl+
# TF/CC
annotate("text", label=paste0(TPMs[1], "\n", expression_unit), x=shape.x.y[13,1], y=shape.x.y[13,2], size=text_scale)+
# EC_a
annotate("text", label=paste0(TPMs[2], "\n", expression_unit), x=shape.x.y[28,1], y=shape.x.y[28,2], size=text_scale)+
# EC_c
annotate("text", label=paste0(TPMs[3], "\n", expression_unit), x=shape.x.y[32,1], y=shape.x.y[32,2], size=text_scale)+
# EC_p
annotate("text", label=paste0(TPMs[4], "\n", expression_unit), x=shape.x.y[35,1], y=shape.x.y[35,2], size=text_scale)+
# FSC
annotate("text", label=paste0(TPMs[5], "\n", expression_unit), x=shape.x.y[37,1], y=shape.x.y[37,2], size=text_scale)+
# pre-stalk
annotate("text", label=paste0(TPMs[6], "\n", expression_unit), x=shape.x.y[39,1], y=shape.x.y[39,2], size=text_scale)+
# stalk
annotate("text", label=paste0(TPMs[7], "\n", expression_unit), x=shape.x.y[41,1], y=shape.x.y[41,2], size=text_scale)+
# polar
annotate("text", label=paste0(TPMs[8], "\n", expression_unit), x=shape.x.y[45,1], y=shape.x.y[45,2], size=text_scale)
}
}
if (display_stage_labels==FALSE){ #switch for label display
}else{
if (data_set_to_plot == "Input_seq" | data_set_to_plot == "Polysome_seq") {
dist_pl = dist_pl+
# TKV cell label
annotate("text", label="UAS-Tkv", x=shape.x.y[1,1]-0.24, y=shape_ymin-0.24, size=text_scale)+
annotate("segment", x=shape.x.y[1,1], xend=shape.x.y[1,1]-0.24,
y=st_bbox(shape$geometry[1])[[2]], yend=shape_ymin-0.17)+
# bamRNAi cell label
annotate("text", label="bam RNAi", x=shape.x.y[3,1]-0.24, y=shape_ymax+0.24, size=text_scale)+
annotate("segment", x=shape.x.y[3,1], xend=shape.x.y[3,1]-0.24,
y=st_bbox(shape$geometry[3])[[4]], yend=shape_ymax+0.17)+
# bamHSbam line label (redraws line in case)
annotate("text", label="bamRNAi HS-bam", x=shape.x.y[4,1]+2.10, y=shape_ymin-0.24, size=text_scale)+
annotate("segment", x=shape.x.y[4,1], xend=shape.x.y[11,1]+0.7, y=shape_ymin-0.17, yend=shape_ymin-0.17)+
# youngWT cell label
annotate("text", label="young WT", x=shape.x.y[12,1]+0.24, y=shape_ymax+0.24, size=text_scale)+
annotate("segment", x=shape.x.y[12,1], xend=shape.x.y[12,1]+0.24, y=st_bbox(shape$geometry[12,1])[[4]], yend=shape_ymax+0.17)
}else if (data_set_to_plot=="Single_cell_seq_germline"){
dist_pl = dist_pl+
annotate("text", label="GSC/CB/2CC",
x=st_bbox(shape[1,])[[1]]+(st_bbox(shape[4,])[[3]]-st_bbox(shape[1,])[[1]])/2,
y=shape_ymin+0.15, size=text_scale)+
annotate("text", label="4-CC", x=shape.x.y[5,1], y=shape_ymax+0.24, size=text_scale)+
annotate("text", label="8-CC", x=shape.x.y[6,1], y=shape_ymin-0.24, size=text_scale)+
annotate("text", label="16-CC 2a I", x=shape.x.y[7,1], y=shape_ymax+0.24, size=text_scale)+
annotate("text", label="16-CC 2a II", x=shape.x.y[8,1], y=shape_ymin-0.24, size=text_scale)+
annotate("text", label="16-CC 2ab", x=shape.x.y[9,1], y=shape_ymax+0.24, size=text_scale)+
annotate("text", label="16-CC 2b", x=shape.x.y[10,1], y=shape_ymin-0.24, size=text_scale)+
annotate("text", label="16-CC 3", x=shape.x.y[11,1], y=shape_ymax+0.24, size=text_scale)+
annotate("text", label="ST2", x=shape.x.y[12,1], y=shape_ymin-0.24, size=text_scale)+
# GSC/CB/2CC
annotate("segment", x=st_bbox(shape[1,])[[1]], xend=st_bbox(shape[4,])[[3]],
y=shape_ymin+0.2, yend=shape_ymin+0.2)+
# 4CC
annotate("segment", x=shape.x.y[5,1], xend=shape.x.y[5,1],
y=st_bbox(shape$geometry[5])[[4]], yend=shape_ymax+0.17)+
# 8CC
annotate("segment", x=shape.x.y[6,1], xend=shape.x.y[6,1],
y=st_bbox(shape$geometry[6])[[2]], yend=shape_ymin-0.17)+
# 16CC_2A1
annotate("segment", x=shape.x.y[7,1], xend=shape.x.y[7,1],
y=st_bbox(shape$geometry[7])[[4]], yend=shape_ymax+0.17)+
# 16CC_2A2
annotate("segment", x=shape.x.y[8,1], xend=shape.x.y[8,1],
y=st_bbox(shape$geometry[8])[[2]], yend=shape_ymin-0.17)+
# 16CC_2AB
annotate("segment", x=shape.x.y[9,1], xend=shape.x.y[9,1],
y=st_bbox(shape$geometry[9])[[4]], yend=shape_ymax+0.17)+
# 16CC_2B
annotate("segment", x=shape.x.y[10,1], xend=shape.x.y[10,1],
y=st_bbox(shape$geometry[10])[[2]], yend=shape_ymin-0.17)+
# 16CC_3
annotate("segment", x=shape.x.y[11,1], xend=shape.x.y[11,1],
y=st_bbox(shape$geometry[11])[[4]], yend=shape_ymax+0.17)+
# ST2
annotate("segment", x=shape.x.y[12,1], xend=shape.x.y[12,1],
y=st_bbox(shape$geometry[12])[[2]], yend=shape_ymin-0.17)
}
}
return(dist_pl)
}else{
message("graphic_to_generate should be of type 'map', or 'legend'")
}
runApp()
data.seq = readRDS("Preprocessed_data/preprocessed_single_cell_seq_data_germarium_soma.RDS")
data.seq_pared = data.seq[c(1, 2:9)] #extract columns used for plotting
data.seq_pared
names(data.seq_pared)
