height = c((11-8*(1.1837+0.025))/2, 1.1837, rep(1.1837, 6), 1.1837, (11-8*(1.1837+0.025))/2), row_spacing = 0.025, column_spacing = 0, unit = "in",
panel_label_type = "none", figure_name = "RpS19b_control_grouped")
Figure1
Figure1 = Figure1 %>%
fill_panel(Figure1_A1, label = "A", label_just = "bottom", scaling = "none", panel_clip = "off", row = 2:3, column = 3:6, family = "Helvetica") %>%
fill_panel(Figure1_B1, label = "B", label_just = "bottom", scaling = "none", panel_clip = "off", row = 4:6, column = 3:6, family = "Helvetica") %>%
fill_panel(Figure1_C, label = "C", label_just = "bottom", scaling = "none", panel_clip = "off", row = 7:8, column = 3:5, family = "Helvetica")
Figure1
ggsave(filename = "Figure1.pdf", plot = Figure1, path = "../Paper/Figures/", width = 8.5, height = 11, device = cairo_pdf)
Figure1_A1
Figure1_A1_gt
grid::grid.draw(Figure1_A1_gt)
Figure1_A1 = as_grob(Figure1_A1_gt)
Figure1_A1
Figure1_A1
Figure1_A1 = ggplot_build(Figure1_A1_gt)
Figure1_A1 = ggplot_gtable(Figure1_A1_gt)
Figure1_A1 = grid.draw(Figure1_A1_gt)
Figure1_A1
grid.draw(Figure1_A1_gt)
bounding_16CC
setwd("ShinyExpresionMap")
library(ggplot2)
library(multipanelfigure)
library(pdftools)
library(extrafont)
source("../Paper/Helper_functions/image_panel.R")
source("../Paper/Helper_functions/eps_as_gg.R")
# font_import(paths = c("C:/Users/Elliot/AppData/Local/Microsoft/Windows/Fonts/"), prompt = F)
source("server_modules/ovary_map_cartoon.R")
Figure1_A1 =  ovary_map_cartoon(text_scale = 12/ggplot2::.pt)+
theme(aspect.ratio = .28,
plot.margin = margin(0.0, 0.0, 0.1, 0.0, unit = "in"))
Figure1_A1_gt <- ggplot_gtable(ggplot_build(Figure1_A1))
Figure1_A1_gt$layout$clip[Figure1_A1_gt$layout$name == "panel"] <- "off"
Figure1_A1 = grid.draw(Figure1_A1_gt)
Figure1_B1 = eps_as_gg("../Paper/Figures/Figure_1/Genetic_enrichment_cartoons.eps")
Figure1_C = eps_as_gg("../Paper/Figures/Figure_1/polysome_seq_diagram.eps")
# Figure1_D_paths = list.files(path = "../Paper/Figures/Figure_1/", pattern = "*heatmap.png", full.names = TRUE)
# Figure1_D = lapply(Figure1_D_paths, png_as_gg)
Figure1 = multi_panel_figure(
width = c((8.5-4*(2.0694+0.025))/2, 0.0694, 2.0, rep(2.0694, 2), 2.0, 0.0694, (8.5-4*(2.0694+0.025))/2),
height = c((11-8*(1.1837+0.025))/2, 1.1837, rep(1.1837, 6), 1.1837, (11-8*(1.1837+0.025))/2), row_spacing = 0.025, column_spacing = 0, unit = "in",
panel_label_type = "none", figure_name = "RpS19b_control_grouped")
Figure1
Figure1 = Figure1 %>%
fill_panel(Figure1_A1, label = "A", label_just = "bottom", scaling = "none", panel_clip = "off", row = 2:3, column = 3:6, family = "Helvetica") %>%
fill_panel(Figure1_B1, label = "B", label_just = "bottom", scaling = "none", panel_clip = "off", row = 4:6, column = 3:6, family = "Helvetica") %>%
fill_panel(Figure1_C, label = "C", label_just = "bottom", scaling = "none", panel_clip = "off", row = 7:8, column = 3:5, family = "Helvetica")
# fill_panel(Figure1_D[[1]], label = "D", label_just = "bottom", scaling = "none", panel_clip = "off", row = 9:10, column = 3:4, family = "Helvetica") %>%
# fill_panel(Figure1_D[[2]], label = "D'", label_just = "bottom", scaling = "none", panel_clip = "off", row = 9:10, column = 5:6, family = "Helvetica") %>%
# fill_panel(Figure1_D[[3]], label = "E", label_just = "bottom", scaling = "none", panel_clip = "off", row = 11:12, column = 3:4, family = "Helvetica") %>%
# fill_panel(Figure1_D[[4]], label = "E'", label_just = "bottom", scaling = "none", panel_clip = "off", row = 11:12, column = 5:6, family = "Helvetica")
Figure1
ggsave(filename = "Figure1.pdf", plot = Figure1, path = "../Paper/Figures/", width = 8.5, height = 11, device = cairo_pdf)
setwd("ShinyExpresionMap")
library(ggplot2)
library(multipanelfigure)
library(pdftools)
library(extrafont)
source("../Paper/Helper_functions/image_panel.R")
source("../Paper/Helper_functions/eps_as_gg.R")
# font_import(paths = c("C:/Users/Elliot/AppData/Local/Microsoft/Windows/Fonts/"), prompt = F)
source("server_modules/ovary_map_cartoon.R")
Figure1_A1 =  ovary_map_cartoon(text_scale = 12/ggplot2::.pt)+
theme(aspect.ratio = .28,
plot.margin = margin(0.0, 0.0, 0.1, 0.0, unit = "in"))
Figure1_B1 = eps_as_gg("../Paper/Figures/Figure_1/Genetic_enrichment_cartoons.eps")
Figure1_C = eps_as_gg("../Paper/Figures/Figure_1/polysome_seq_diagram.eps")
# Figure1_D_paths = list.files(path = "../Paper/Figures/Figure_1/", pattern = "*heatmap.png", full.names = TRUE)
# Figure1_D = lapply(Figure1_D_paths, png_as_gg)
Figure1 = multi_panel_figure(
width = c((8.5-4*(2.0694+0.025))/2, 0.0694, 2.0, rep(2.0694, 2), 2.0, 0.0694, (8.5-4*(2.0694+0.025))/2),
height = c((11-8*(1.1837+0.025))/2, 1.1837, rep(1.1837, 6), 1.1837, (11-8*(1.1837+0.025))/2), row_spacing = 0.025, column_spacing = 0, unit = "in",
panel_label_type = "none", figure_name = "RpS19b_control_grouped")
Figure1
Figure1 = Figure1 %>%
fill_panel(Figure1_A1, label = "A", label_just = "bottom", scaling = "none", panel_clip = "off", row = 2:3, column = 3:6, family = "Helvetica") %>%
fill_panel(Figure1_B1, label = "B", label_just = "bottom", scaling = "none", panel_clip = "off", row = 4:6, column = 3:6, family = "Helvetica") %>%
fill_panel(Figure1_C, label = "C", label_just = "bottom", scaling = "none", panel_clip = "off", row = 7:8, column = 3:5, family = "Helvetica")
# fill_panel(Figure1_D[[1]], label = "D", label_just = "bottom", scaling = "none", panel_clip = "off", row = 9:10, column = 3:4, family = "Helvetica") %>%
# fill_panel(Figure1_D[[2]], label = "D'", label_just = "bottom", scaling = "none", panel_clip = "off", row = 9:10, column = 5:6, family = "Helvetica") %>%
# fill_panel(Figure1_D[[3]], label = "E", label_just = "bottom", scaling = "none", panel_clip = "off", row = 11:12, column = 3:4, family = "Helvetica") %>%
# fill_panel(Figure1_D[[4]], label = "E'", label_just = "bottom", scaling = "none", panel_clip = "off", row = 11:12, column = 5:6, family = "Helvetica")
Figure1
ggsave(filename = "Figure1.pdf", plot = Figure1, path = "../Paper/Figures/", width = 8.5, height = 11, device = cairo_pdf)
setwd("ShinyExpresionMap")
library(ggplot2)
library(multipanelfigure)
library(pdftools)
library(extrafont)
source("../Paper/Helper_functions/image_panel.R")
source("../Paper/Helper_functions/eps_as_gg.R")
# font_import(paths = c("C:/Users/Elliot/AppData/Local/Microsoft/Windows/Fonts/"), prompt = F)
source("server_modules/ovary_map_cartoon.R")
Figure1_A1 =  ovary_map_cartoon(text_scale = 12/ggplot2::.pt)+
theme(aspect.ratio = .28,
plot.margin = margin(0.0, 0.0, 0.1, 0.0, unit = "in"))
Figure1_B1 = eps_as_gg("../Paper/Figures/Figure_1/Genetic_enrichment_cartoons.eps")
Figure1_C = eps_as_gg("../Paper/Figures/Figure_1/polysome_seq_diagram.eps")
# Figure1_D_paths = list.files(path = "../Paper/Figures/Figure_1/", pattern = "*heatmap.png", full.names = TRUE)
# Figure1_D = lapply(Figure1_D_paths, png_as_gg)
Figure1 = multi_panel_figure(
width = c((8.5-4*(2.0694+0.025))/2, 0.0694, 2.0, rep(2.0694, 2), 2.0, 0.0694, (8.5-4*(2.0694+0.025))/2),
height = c((11-8*(1.1837+0.025))/2, 1.1837, rep(1.1837, 6), 1.1837, (11-8*(1.1837+0.025))/2), row_spacing = 0.025, column_spacing = 0, unit = "in",
panel_label_type = "none", figure_name = "RpS19b_control_grouped")
Figure1
Figure1 = Figure1 %>%
fill_panel(Figure1_A1, label = "A", label_just = "bottom", scaling = "none", panel_clip = "off", row = 2:3, column = 3:6, family = "Helvetica") %>%
fill_panel(Figure1_B1, label = "B", label_just = "bottom", scaling = "none", panel_clip = "off", row = 4:6, column = 3:6, family = "Helvetica") %>%
fill_panel(Figure1_C, label = "C", label_just = "bottom", scaling = "none", panel_clip = "off", row = 7:8, column = 3:5, family = "Helvetica")
# fill_panel(Figure1_D[[1]], label = "D", label_just = "bottom", scaling = "none", panel_clip = "off", row = 9:10, column = 3:4, family = "Helvetica") %>%
# fill_panel(Figure1_D[[2]], label = "D'", label_just = "bottom", scaling = "none", panel_clip = "off", row = 9:10, column = 5:6, family = "Helvetica") %>%
# fill_panel(Figure1_D[[3]], label = "E", label_just = "bottom", scaling = "none", panel_clip = "off", row = 11:12, column = 3:4, family = "Helvetica") %>%
# fill_panel(Figure1_D[[4]], label = "E'", label_just = "bottom", scaling = "none", panel_clip = "off", row = 11:12, column = 5:6, family = "Helvetica")
Figure1
ggsave(filename = "Figure1.pdf", plot = Figure1, path = "../Paper/Figures/", width = 8.5, height = 11, device = cairo_pdf)
setwd("ShinyExpresionMap")
library(ggplot2)
library(multipanelfigure)
library(pdftools)
library(extrafont)
source("../Paper/Helper_functions/image_panel.R")
source("../Paper/Helper_functions/eps_as_gg.R")
# font_import(paths = c("C:/Users/Elliot/AppData/Local/Microsoft/Windows/Fonts/"), prompt = F)
source("server_modules/ovary_map_cartoon.R")
Figure1_A1 =  ovary_map_cartoon(text_scale = 12/ggplot2::.pt)+
theme(aspect.ratio = .28,
plot.margin = margin(0.0, 0.0, 0.1, 0.0, unit = "in"))
Figure1_B1 = eps_as_gg("../Paper/Figures/Figure_1/Genetic_enrichment_cartoons.eps")
Figure1_C = eps_as_gg("../Paper/Figures/Figure_1/polysome_seq_diagram.eps")
# Figure1_D_paths = list.files(path = "../Paper/Figures/Figure_1/", pattern = "*heatmap.png", full.names = TRUE)
# Figure1_D = lapply(Figure1_D_paths, png_as_gg)
Figure1 = multi_panel_figure(
width = c((8.5-4*(2.0694+0.025))/2, 0.0694, 2.0, rep(2.0694, 2), 2.0, 0.0694, (8.5-4*(2.0694+0.025))/2),
height = c((11-8*(1.1837+0.025))/2, 1.1837, rep(1.1837, 6), 1.1837, (11-8*(1.1837+0.025))/2), row_spacing = 0.025, column_spacing = 0, unit = "in",
panel_label_type = "none", figure_name = "RpS19b_control_grouped")
Figure1
Figure1 = Figure1 %>%
fill_panel(Figure1_A1, label = "A", label_just = "bottom", scaling = "none", panel_clip = "off", row = 2:3, column = 3:6, family = "Helvetica") %>%
fill_panel(Figure1_B1, label = "B", label_just = "bottom", scaling = "none", panel_clip = "off", row = 4:6, column = 3:6, family = "Helvetica") %>%
fill_panel(Figure1_C, label = "C", label_just = "bottom", scaling = "none", panel_clip = "off", row = 7:8, column = 3:5, family = "Helvetica")
# fill_panel(Figure1_D[[1]], label = "D", label_just = "bottom", scaling = "none", panel_clip = "off", row = 9:10, column = 3:4, family = "Helvetica") %>%
# fill_panel(Figure1_D[[2]], label = "D'", label_just = "bottom", scaling = "none", panel_clip = "off", row = 9:10, column = 5:6, family = "Helvetica") %>%
# fill_panel(Figure1_D[[3]], label = "E", label_just = "bottom", scaling = "none", panel_clip = "off", row = 11:12, column = 3:4, family = "Helvetica") %>%
# fill_panel(Figure1_D[[4]], label = "E'", label_just = "bottom", scaling = "none", panel_clip = "off", row = 11:12, column = 5:6, family = "Helvetica")
Figure1
ggsave(filename = "Figure1.pdf", plot = Figure1, path = "../Paper/Figures/", width = 8.5, height = 11, device = cairo_pdf)
c((11-8*(1.1837+0.025))/2, 1.1837, rep(1.1837, 6), 1.1837, (11-8*(1.1837+0.025))/2)
1.1837+3
1.1837+.3
setwd("ShinyExpresionMap")
library(ggplot2)
library(multipanelfigure)
library(pdftools)
library(extrafont)
source("../Paper/Helper_functions/image_panel.R")
source("../Paper/Helper_functions/eps_as_gg.R")
# font_import(paths = c("C:/Users/Elliot/AppData/Local/Microsoft/Windows/Fonts/"), prompt = F)
source("server_modules/ovary_map_cartoon.R")
Figure1_A1 =  ovary_map_cartoon(text_scale = 12/ggplot2::.pt)+
theme(aspect.ratio = .28,
plot.margin = margin(0.0, 0.0, 0.1, 0.0, unit = "in"))
Figure1_B1 = eps_as_gg("../Paper/Figures/Figure_1/Genetic_enrichment_cartoons.eps")
Figure1_C = eps_as_gg("../Paper/Figures/Figure_1/polysome_seq_diagram.eps")
# Figure1_D_paths = list.files(path = "../Paper/Figures/Figure_1/", pattern = "*heatmap.png", full.names = TRUE)
# Figure1_D = lapply(Figure1_D_paths, png_as_gg)
Figure1 = multi_panel_figure(
width = c((8.5-4*(2.0694+0.025))/2, 0.0694, 2.0, rep(2.0694, 2), 2.0, 0.0694, (8.5-4*(2.0694+0.025))/2),
height = c((11-8*(1.1837+0.025))/2-.3, 1.4837, rep(1.1837, 6), 1.4837, (11-8*(1.1837+0.025))/2-.3), row_spacing = 0.025, column_spacing = 0, unit = "in",
panel_label_type = "none", figure_name = "RpS19b_control_grouped")
Figure1
Figure1 = Figure1 %>%
fill_panel(Figure1_A1, label = "A", label_just = "bottom", scaling = "none", panel_clip = "off", row = 2:3, column = 3:6, family = "Helvetica") %>%
fill_panel(Figure1_B1, label = "B", label_just = "bottom", scaling = "none", panel_clip = "off", row = 4:6, column = 3:6, family = "Helvetica") %>%
fill_panel(Figure1_C, label = "C", label_just = "bottom", scaling = "none", panel_clip = "off", row = 7:8, column = 3:5, family = "Helvetica")
# fill_panel(Figure1_D[[1]], label = "D", label_just = "bottom", scaling = "none", panel_clip = "off", row = 9:10, column = 3:4, family = "Helvetica") %>%
# fill_panel(Figure1_D[[2]], label = "D'", label_just = "bottom", scaling = "none", panel_clip = "off", row = 9:10, column = 5:6, family = "Helvetica") %>%
# fill_panel(Figure1_D[[3]], label = "E", label_just = "bottom", scaling = "none", panel_clip = "off", row = 11:12, column = 3:4, family = "Helvetica") %>%
# fill_panel(Figure1_D[[4]], label = "E'", label_just = "bottom", scaling = "none", panel_clip = "off", row = 11:12, column = 5:6, family = "Helvetica")
Figure1
ggsave(filename = "Figure1.pdf", plot = Figure1, path = "../Paper/Figures/", width = 8.5, height = 11, device = cairo_pdf)
source("Preprocessing_scripts/heat_map_precomputation.R")
setwd("E:/Documents/Developmental-Landscape/ShinyExpresionMap")
source("Preprocessing_scripts/heat_map_precomputation.R")
source("Preprocessing_scripts/heat_map_precomputation.R")
setwd("../")
getwd()
source("ShinyExpresionMap/Preprocessing_scripts/heat_map_precomputation.R")
source("ShinyExpresionMap/Preprocessing_scripts/heat_map_precomputation.R")
source("ShinyExpresionMap/Preprocessing_scripts/heat_map_precomputation.R")
data_sets = c("Input_seq", "Polysome_seq", "Single_cell_seq_germline", "Single_cell_seq_soma")
Figure1_D_list = lapply(data_sets, DE_heatmap, write_to_rds = FALSE)
source("ShinyExpresionMap/Preprocessing_scripts/heat_map_precomputation.R")
data_sets = c("Input_seq", "Polysome_seq", "Single_cell_seq_germline", "Single_cell_seq_soma")
Figure1_D_list = lapply(data_sets, DE_heatmap, write_to_rds = FALSE)
Sys.setenv(R_GSCMD = normalizePath("C:/Users/Elliot/AppData/Local/Programs/orca/"))
OrchardSprays
orca()
setwd("ShinyExpresionMap")
library(ggplot2)
library(multipanelfigure)
library(pdftools)
library(extrafont)
source("../Paper/Helper_functions/image_panel.R")
source("../Paper/Helper_functions/eps_as_gg.R")
source("../Paper/Helper_functions/png_as_gg.R")
source("../Paper/Helper_functions/export_plotly2SVG.R")
# font_import(paths = c("C:/Users/Elliot/AppData/Local/Microsoft/Windows/Fonts/"), prompt = F)
input_plotly = readRDS("Preprocessed_data/Input_seq_plotly_heatmap.RDS")
export_plotly2SVG(input_plotly, filename = "input_plotly.eps", parent_path = "../Paper/Figures/Figure_1/")
library(tidyverse)
library(heatmaply)
modls = function(x){log2(x+1)}
DE_heatmap = function(data_set_to_plot="Input_seq", write_to_rds=TRUE, display_colnames = FALSE){
if(data_set_to_plot == "Input_seq"){
data.seq = readRDS("ShinyExpresionMap/Preprocessed_data/preprocessed_RNA_seq_data.RDS")
changing_genes = readRDS("ShinyExpresionMap/Preprocessed_data/developmentally_regulated_gene_list.RDS")
column_labels =
c("UAS-tkv",
"bam RNAi",
"bam RNAi; HS-bam",
"Young WT")
heat_data = data.seq %>%
ungroup() %>%
filter(FBGN %in% changing_genes) %>%
dplyr::select(FBGN,
Symbol,
MeanTPM_TKV_input,
MeanTPM_BamRNAi_input,
MeanTPM_BamHSbam_input,
MeanTPM_youngWT_input) %>%
pivot_longer(cols = -c(Symbol, FBGN), names_to = "Genotype", values_to = "TPM") %>%
group_by(Symbol) %>%
mutate(log2_TPM = modls(TPM)) %>%
pivot_wider(id_cols = c(FBGN, Symbol), names_from = "Genotype", values_from = "log2_TPM") %>%
mutate(Symbol = coalesce(Symbol, FBGN)) %>%
column_to_rownames(var = "Symbol") %>%
select(-c(FBGN)) %>%
rename_all(~column_labels) %>%
data.frame()
}else if (data_set_to_plot == "Polysome_seq"){
data.seq = readRDS("ShinyExpresionMap/Preprocessed_data/preprocessed_polysome_seq_data.RDS")
changing_genes = readRDS("ShinyExpresionMap/Preprocessed_data/developmentally_regulated_gene_list_polysome.RDS")
column_labels =
c("UAS-tkv",
"bam RNAi",
"bam RNAi; HS-bam",
"Young WT")
heat_data = data.seq %>%
ungroup() %>%
filter(FBGN %in% changing_genes) %>%
dplyr::select(FBGN,
Symbol,
Mean_log2_polysome_over_input_TKV,
Mean_log2_polysome_over_input_BamRNAi,
Mean_log2_polysome_over_input_BamHSbam,
Mean_log2_polysome_over_input_youngWT) %>%
mutate(Symbol = coalesce(Symbol, FBGN)) %>%
column_to_rownames(var = "Symbol") %>%
select(-c(FBGN)) %>%
rename_all(~column_labels) %>%
data.frame()
}else if (data_set_to_plot == "Single_cell_seq_germline"){
heat_data = readRDS("ShinyExpresionMap/Preprocessed_data/single_cell_seq_regulated_gene_fold_change_list_GC.RDS")
column_labels =
c("GSC CB 2CC",
"4CC",
"8CC",
"16CC",
"16CC 2a 1",
"16CC 2a 2",
"16CC 2b",
"16CC 3",
"St2")
}
else if (data_set_to_plot == "Single_cell_seq_soma"){
heat_data = readRDS("ShinyExpresionMap/Preprocessed_data/single_cell_seq_regulated_gene_fold_change_list_germarium_soma.RDS")
column_labels =
c("TF/CC",
"aEc",
"cEc",
"pEc",
"FSC/pre-FC",
"pre-stalk",
"stalk",
"polar")
}
font_properties = list(
family = "Helvetica",
size = 12,
color = 'black')
heat_map_plotly = heatmaply(
heat_data,
showticklabels = c(TRUE, FALSE),
labCol = column_labels,
seriate = "none",
Colv = FALSE,
font = font_properties) %>%
layout(
xaxis = list(titlefont = list(size = 12), tickfont = list(size = 12)),
yaxis = list(titlefont = list(size = 12), tickfont = list(size = 12))
)
if (write_to_rds == TRUE) {
write_rds(x = heat_map_plotly, file = paste0("ShinyExpresionMap/Preprocessed_data/", data_set_to_plot, "_plotly_heatmap.RDS"))
}else if (write_to_rds == FALSE & display_colnames == FALSE) {
return(heat_map_plotly)
}
heat_map_plotly = heatmaply(
heat_data,
showticklabels = c(TRUE, TRUE),
labCol = column_labels,
seriate = "none",
Colv = FALSE,
font = font_properties) %>%
layout(
xaxis = list(titlefont = list(size = 12), tickfont = list(size = 12)),
yaxis = list(titlefont = list(size = 12), tickfont = list(size = 12))
)
if (write_to_rds == TRUE) {
write_rds(x = heat_map_plotly, file = paste0("ShinyExpresionMap/Preprocessed_data/", data_set_to_plot, "_row_labels_plotly_heatmap.RDS"))
}else if (write_to_rds == FALSE & display_colnames == TRUE) {
return(heat_map_plotly)
}
}
data_sets = c("Input_seq", "Polysome_seq", "Single_cell_seq_germline", "Single_cell_seq_soma")
lapply(data_sets, DE_heatmap)
setwd("D:/R_projects/Developmental-Landscape")
library(tidyverse)
library(heatmaply)
modls = function(x){log2(x+1)}
DE_heatmap = function(data_set_to_plot="Input_seq", write_to_rds=TRUE, display_colnames = FALSE){
if(data_set_to_plot == "Input_seq"){
data.seq = readRDS("ShinyExpresionMap/Preprocessed_data/preprocessed_RNA_seq_data.RDS")
changing_genes = readRDS("ShinyExpresionMap/Preprocessed_data/developmentally_regulated_gene_list.RDS")
column_labels =
c("UAS-tkv",
"bam RNAi",
"bam RNAi; HS-bam",
"Young WT")
heat_data = data.seq %>%
ungroup() %>%
filter(FBGN %in% changing_genes) %>%
dplyr::select(FBGN,
Symbol,
MeanTPM_TKV_input,
MeanTPM_BamRNAi_input,
MeanTPM_BamHSbam_input,
MeanTPM_youngWT_input) %>%
pivot_longer(cols = -c(Symbol, FBGN), names_to = "Genotype", values_to = "TPM") %>%
group_by(Symbol) %>%
mutate(log2_TPM = modls(TPM)) %>%
pivot_wider(id_cols = c(FBGN, Symbol), names_from = "Genotype", values_from = "log2_TPM") %>%
mutate(Symbol = coalesce(Symbol, FBGN)) %>%
column_to_rownames(var = "Symbol") %>%
select(-c(FBGN)) %>%
rename_all(~column_labels) %>%
data.frame()
}else if (data_set_to_plot == "Polysome_seq"){
data.seq = readRDS("ShinyExpresionMap/Preprocessed_data/preprocessed_polysome_seq_data.RDS")
changing_genes = readRDS("ShinyExpresionMap/Preprocessed_data/developmentally_regulated_gene_list_polysome.RDS")
column_labels =
c("UAS-tkv",
"bam RNAi",
"bam RNAi; HS-bam",
"Young WT")
heat_data = data.seq %>%
ungroup() %>%
filter(FBGN %in% changing_genes) %>%
dplyr::select(FBGN,
Symbol,
Mean_log2_polysome_over_input_TKV,
Mean_log2_polysome_over_input_BamRNAi,
Mean_log2_polysome_over_input_BamHSbam,
Mean_log2_polysome_over_input_youngWT) %>%
mutate(Symbol = coalesce(Symbol, FBGN)) %>%
column_to_rownames(var = "Symbol") %>%
select(-c(FBGN)) %>%
rename_all(~column_labels) %>%
data.frame()
}else if (data_set_to_plot == "Single_cell_seq_germline"){
heat_data = readRDS("ShinyExpresionMap/Preprocessed_data/single_cell_seq_regulated_gene_fold_change_list_GC.RDS")
column_labels =
c("GSC CB 2CC",
"4CC",
"8CC",
"16CC",
"16CC 2a 1",
"16CC 2a 2",
"16CC 2b",
"16CC 3",
"St2")
}
else if (data_set_to_plot == "Single_cell_seq_soma"){
heat_data = readRDS("ShinyExpresionMap/Preprocessed_data/single_cell_seq_regulated_gene_fold_change_list_germarium_soma.RDS")
column_labels =
c("TF/CC",
"aEc",
"cEc",
"pEc",
"FSC/pre-FC",
"pre-stalk",
"stalk",
"polar")
}
font_properties = list(
family = "Helvetica",
size = 12,
color = 'black')
heat_map_plotly = heatmaply(
heat_data,
showticklabels = c(TRUE, FALSE),
labCol = column_labels,
seriate = "none",
Colv = FALSE,
font = font_properties) %>%
layout(
xaxis = list(titlefont = list(size = 12), tickfont = list(size = 12)),
yaxis = list(titlefont = list(size = 12), tickfont = list(size = 12))
)
if (write_to_rds == TRUE) {
write_rds(x = heat_map_plotly, file = paste0("ShinyExpresionMap/Preprocessed_data/", data_set_to_plot, "_plotly_heatmap.RDS"))
}else if (write_to_rds == FALSE & display_colnames == FALSE) {
return(heat_map_plotly)
}
heat_map_plotly = heatmaply(
heat_data,
showticklabels = c(TRUE, TRUE),
labCol = column_labels,
seriate = "none",
Colv = FALSE,
font = font_properties) %>%
layout(
xaxis = list(titlefont = list(size = 12), tickfont = list(size = 12)),
yaxis = list(titlefont = list(size = 12), tickfont = list(size = 12))
)
if (write_to_rds == TRUE) {
write_rds(x = heat_map_plotly, file = paste0("ShinyExpresionMap/Preprocessed_data/", data_set_to_plot, "_row_labels_plotly_heatmap.RDS"))
}else if (write_to_rds == FALSE & display_colnames == TRUE) {
return(heat_map_plotly)
}
}
data_sets = c("Input_seq", "Polysome_seq", "Single_cell_seq_germline", "Single_cell_seq_soma")
lapply(data_sets, DE_heatmap)
input_plotly = readRDS("Preprocessed_data/Input_seq_plotly_heatmap.RDS")
setwd("ShinyExpresionMap")
input_plotly = readRDS("Preprocessed_data/Input_seq_plotly_heatmap.RDS")
export_plotly2SVG(input_plotly, filename = "input_plotly.eps", parent_path = "../Paper/Figures/Figure_1/")
rD[["server"]]$stop()
install.packages("netstat")
export_plotly2SVG(input_plotly, filename = "input_plotly.eps", parent_path = "../Paper/Figures/Figure_1/")
export_plotly2SVG(input_plotly, filename = "input_plotly.eps", parent_path = "../Paper/Figures/Figure_1/")
source("../Paper/Helper_functions/export_plotly2SVG.R")
export_plotly2SVG(input_plotly, filename = "input_plotly.eps", parent_path = "../Paper/Figures/Figure_1/")
source("../Paper/Helper_functions/export_plotly2SVG.R")
source("../Paper/Helper_functions/export_plotly2SVG.R")
export_plotly2SVG(input_plotly, filename = "input_plotly.eps", parent_path = "../Paper/Figures/Figure_1/")
export_plotly2SVG(input_plotly, filename = "input_plotly.eps", parent_path = "../Paper/Figures/Figure_1/")
netstat::free_port(4445)
netstat::free_port(port = 4445)
netstat::free_port()
source("../Paper/Helper_functions/export_plotly2SVG.R")
input_plotly = readRDS("Preprocessed_data/Input_seq_plotly_heatmap.RDS")
export_plotly2SVG(input_plotly, filename = "input_plotly.eps", parent_path = "../Paper/Figures/Figure_1/")
system("taskkill /im java.exe /f", intern=FALSE, ignore.stdout=FALSE)
Figure1_D_paths = list.files(path = "../Paper/Figures/Figure_1/", pattern = "*heatmap.png", full.names = TRUE)
Figure1_D_paths
plotly_files = c("Preprocessed_data/Input_seq_plotly_heatmap.RDS",
"Preprocessed_data/Polysome_seq_plotly_heatmap.RDS",
"Preprocessed_data/Single_cell_seq_germline_plotly_heatmap.RDS",
"Preprocessed_data/Single_cell_seq_soma_plotly_heatmap.RDS")
plotly_file_names = lapply(plotly_files, basename)
plotly_file_names
input_plotlys = mapply(plotly_files, readRDS, parent_path)
input_plotlys = mapply(plotly_files, readRDS)
input_plotlys = lapply(plotly_files, readRDS)
input_plotlys
mapply(export_plotly2SVG, input_plotlys, plotly_file_names)
mapply(export_plotly2SVG, input_plotlys, filename = plotly_file_names, parent_path = "../Paper/Figures/Figure_1/")
export_plotly2SVG(input_plotly, filename = "input_plotly.eps", parent_path = "../Paper/Figures/Figure_1/", width = 200, height = 200)
mapply(export_plotly2SVG, input_plotlys, filename = plotly_file_names,
parent_path = "../Paper/Figures/Figure_1/", width = 250, height = 300)
mapply(export_plotly2SVG, input_plotlys, filename = plotly_file_names,
parent_path = "../Paper/Figures/Figure_1/", width = 300, height = 300)
Figure1_D_paths = list.files(path = "../Paper/Figures/Figure_1/", pattern = "*heatmap.eps", full.names = TRUE)
Figure1_D_paths
Figure1_D_paths = list.files(path = "../Paper/Figures/Figure_1/", pattern = "*RDS.eps", full.names = TRUE)
Figure1_D_paths
Figure1_D = lapply(Figure1_D_paths, eps_as_gg)
Figure1_D
Figure1_C = eps_as_gg("../Paper/Figures/Figure_1/polysome_seq_diagram.eps")
setwd("ShinyExpresionMap")
library(ggplot2)
library(multipanelfigure)
library(pdftools)
library(extrafont)
source("../Paper/Helper_functions/image_panel.R")
source("../Paper/Helper_functions/eps_as_gg.R")
source("../Paper/Helper_functions/png_as_gg.R")
source("../Paper/Helper_functions/export_plotly2SVG.R")
# font_import(paths = c("C:/Users/Elliot/AppData/Local/Microsoft/Windows/Fonts/"), prompt = F)
source("server_modules/ovary_map_cartoon.R")
Figure1_A1 =  ovary_map_cartoon(text_scale = 12/ggplot2::.pt)+
theme(aspect.ratio = .28,
plot.margin = margin(0.0, 0.0, 0.1, 0.0, unit = "in"))
Figure1_B1 = eps_as_gg("../Paper/Figures/Figure_1/Genetic_enrichment_cartoons.eps")
Figure1_C = eps_as_gg("../Paper/Figures/Figure_1/polysome_seq_diagram.eps")
Figure1 = multi_panel_figure(
width = c((8.5-4*(2.0694+0.025))/2, 0.0694, 2.0, rep(2.0694, 2), 2.0, 0.0694, (8.5-4*(2.0694+0.025))/2),
height = c((11-8*(1.1837+0.025))/2-.3, 1.4837, rep(1.1837, 6), 1.4837, (11-8*(1.1837+0.025))/2-.3), row_spacing = 0.025, column_spacing = 0, unit = "in",
panel_label_type = "none", figure_name = "RpS19b_control_grouped")
Figure1
