#mapping different features in shape to have proper base colors
shape.plot$FID_[c(18,25)] = all.colors[[1]]
all.colors
shape.plot$FID_[c(18,25)] = all.colors[[1]]
shape.plot$FID_[c(2,19)] = all.colors[[2]]
shape.plot$FID_[c(20:23)] = all.colors[[3]]
shape.plot$FID_[c(33)] = all.colors[[4]]
#plotting distplot
dist_pl=ggplot(data = shape.plot[-1,])+
geom_sf(aes(geometry=geometry, fill=`FID_`), color = "black")+
scale_fill_identity()+
theme_void()+
theme(panel.grid.major = element_line(colour = "transparent"),
panel.background = element_rect(fill = "transparent", colour = "transparent"),
panel.border = element_rect(fill = "transparent", colour = "transparent"),
legend.position = "none")
dist_pl
gene_of_interest = "pgc"
data.seq
data.seq[data.seq$symbol %in% gene_of_interest, 2:5]
round(data.seq[data.seq$symbol %in% gene_of_interest, 2:5]+7)
data.seq
data.seq[[1]]
data.seq[[2]]
hist(data.seq[[2]])
hist(round(data.seq[[2]]))
hist(round(data.seq[[2]])+7)
hist(round(log2(data.seq[[2]]))+7)
hist(round(log2(data.seq[[2]])))
hist(round(data.seq[[2]])+7)
runApp()
data.seq = readRDS("Preprocessed_data/preprocessed_polysome_seq_data.RDS") #data from preprocessed TE (binned/organized)
expression_unit = "TE"
color_scale_seq = colfunc(11)
color_scale_seq
runApp()
runApp()
runApp()
runApp()
colfunc_low <- colorRampPalette(c("white", "cyan"), interpolate = "spline", bias = .1)
colfunc_high <- colorRampPalette(c("white", "cyan"), interpolate = "spline", biast = 10)
color_scale_seq = c(colfunc_low(5), colfunc_high(5))
colfunc_low <- colorRampPalette(c("white", "cyan"), interpolate = "spline", bias = .1)
colfunc_high <- colorRampPalette(c("white", "cyan"), interpolate = "spline", biast = 10)
colfunc_high <- colorRampPalette(c("white", "cyan"), interpolate = "spline", bias = 10)
color_scale_seq = c(colfunc_low(5), colfunc_high(5))
color_scale_seq
color_scale_seq = c(colfunc_low(11)[1:5], colfunc_high(11)[6:11])
color_scale_seq
colfunc_low <- colorRampPalette(c("white", "cyan"), interpolate = "spline", bias = .01)
colfunc_high <- colorRampPalette(c("white", "cyan"), interpolate = "spline", bias = 100)
color_scale_seq = c(colfunc_low(11)[1:5], colfunc_high(11)[6:11])
color_scale_seq
colfunc_low <- colorRampPalette(c("white", "cyan"), interpolate = "spline", bias = -1)
colfunc_low <- colorRampPalette(c("white", "cyan"), interpolate = "spline", bias = .001)
colfunc_high <- colorRampPalette(c("white", "cyan"), interpolate = "spline", bias = 1000)
color_scale_seq = c(colfunc_low(11)[1:5], colfunc_high(11)[6:11])
color_scale_seq
colfunc_low <- colorRampPalette(c("white", "cyan"), interpolate = "spline", bias = 1)
colfunc_high <- colorRampPalette(c("white", "cyan"), interpolate = "spline", bias = 1)
color_scale_seq = c(colfunc_low(11)[1:5], colfunc_high(11)[6:11])
color_scale_seq
.1:1
.1:10
seq(0,1,.1)
rnorm(11, 7, 1)
rnorm(11, 7, 5)
x <- seq(-10, 10, by = .1)
dnorm(x, mean = 2.5, sd = 0.5)
x <- seq(, 10, by = .1)
rgb(1,255,255)
rgb(1,1,1)
rgb(.5,1,1)
x <- seq(0, 1, by = .1)
dnorm(x, mean = 2.5, sd = 0.5)
rgb(.1:1,.1:1,.1:1)
.1:1
rgb(c(0,1),1,1)
norm = dnorm(x, mean = 2.5, sd = 0.5)
norm = dnorm(x, mean = .5, sd = 0.5)
norm
x <- seq(0, 2, by = .1)
norm = dnorm(x, mean = .5, sd = 0.5)
norm
norm = dnorm(x, mean = .5, sd = 1)
norm
norm = dnorm(x, mean = 1, sd = 1)
norm
x <- seq(0, 21, by = 1)
norm = dnorm(x, mean = 1, sd = 1)
norm
x <- seq(0, 1, by = .05)
norm = dnorm(x, mean = 1, sd = 1)
norm
norm = dnorm(x, mean = .1, sd = 1)
norm
norm = dnorm(x, mean = 10, sd = 1)
norm
norm = dnorm(x, mean = .1, sd = 1)
norm = dnorm(x, mean = .5, sd = 1)
norm
x <- seq(-10, 10, by = .1)
y <- dnorm(x, mean = 2.5, sd = 0.5)
plot(x,y)
y <- dnorm(x, mean = .5, sd = 0.5)
plot(x,y)
x <- seq(-5, 5, by = .1)
y <- dnorm(x, mean = .5, sd = 0.5)
plot(x,y)
x <- seq(-2, 2, by = .1)
y <- dnorm(x, mean = .5, sd = 0.5)
plot(x,y)
x <- seq(-1.5, 2, by = .1)
plot(x,y)
y <- dnorm(x, mean = .5, sd = 0.5)
plot(x,y)
x <- seq(-1.5, 2, by = .2)
y <- dnorm(x, mean = .5, sd = 0.5)
plot(x,y)
y
y[1:11]
y[1:11]
y[1:11]*1.2
y[1:11]*1.3
y[1:11]*1.25
x = seq(-1.5, 2, by = .2)
normal_ramp = dnorm(x, mean = .5, sd = 0.5)[1:11]*1.25
normal_ramp
rgb(normal_ramp, 1, 1)
runApp()
normal_ramp
x = seq(-1.5, 2, by = .2)
normal_ramp = dnorm(x, mean = .5, sd = 0.5)[1:11]*1.25
plot(x, normal_ramp)
plot(x[1:11], normal_ramp)
x = seq(-1, 2, by = .2)
normal_ramp = dnorm(x, mean = .5, sd = 0.5)[1:11]*1.25
plot(x[1:11], normal_ramp)
x = seq(-1, 2, by = .15)
normal_ramp = dnorm(x, mean = .5, sd = 0.5)[1:11]*1.25
x = seq(-1, 2, by = .15)
plot(x[1:11], normal_ramp)
normal_ramp
x = seq(-1, 2, by = .15)
normal_ramp = dnorm(x, mean = .5, sd = 0.2)[1:11]*1.25
plot(x[1:11], normal_ramp)
x = seq(-1, 2, by = .15)
normal_ramp = dnorm(x, mean = .5, sd = 0.4)[1:11]*1.25
plot(x[1:11], normal_ramp)
x = seq(-.5, 2, by = .12)
normal_ramp = dnorm(x, mean = .5, sd = 0.3)[1:11]*1.25
plot(x[1:11], normal_ramp)
x = seq(-.5, 2, by = .1)
normal_ramp = dnorm(x, mean = .5, sd = 0.3)[1:11]*1.25
plot(x[1:11], normal_ramp)
x = seq(-.5, 2, by = .1)
normal_ramp = dnorm(x, mean = .5, sd = 0.2)[1:11]*1.25
plot(x[1:11], normal_ramp)
x = seq(-.1, 2, by = .1)
normal_ramp = dnorm(x, mean = .5, sd = 0.2)[1:11]*1.25
plot(x[1:11], normal_ramp)
x = seq(-.1, 2, by = .05)
normal_ramp = dnorm(x, mean = .5, sd = 0.2)[1:11]*1.25
plot(x[1:11], normal_ramp)
normal_ramp = dnorm(x, mean = .5, sd = 0.25)[1:11]*1.25
plot(x[1:11], normal_ramp)
x = seq(-.5, 2, by = .1)
normal_ramp = dnorm(x, mean = .5, sd = 0.3)[1:11]*1.25
plot(x[1:11], normal_ramp)
data.seq = readRDS("Preprocessed_data/preprocessed_polysome_seq_data.RDS") #data from preprocessed TE (binned/organized)
data.seq
data.seq[2]
round((data.seq[2]+7)
)
hist(round((data.seq[2]+7)))
hist(round((data.seq[[2]]+7)))
hist(round((data.seq[[3]]+7)))
hist(round((data.seq[[4]]+7)))
hist(round((data.seq[[5]]+7)))
runApp()
normal_ramp
normal_ramp = dnorm(x, mean = .5, sd = 0.3)[1:11]
normal_ramp
normal_ramp = dnorm(x, mean = .5, sd = 0.3)[1:11]*.7
normal_ramp
normal_ramp = dnorm(x, mean = .5, sd = 0.3)[1:11]*.8
normal_ramp
normal_ramp = dnorm(x, mean = .5, sd = 0.3)[1:11]*.78
normal_ramp
normal_ramp = dnorm(x, mean = .5, sd = 0.3)[1:11]*.77
normal_ramp
normal_ramp = dnorm(x, mean = .5, sd = 0.3)[1:11]*.75
normal_ramp
plot(x[1:11], normal_ramp)
runApp()
plot(x[1:11], 1/normal_ramp)
runApp()
x = seq(-.5, 2, by = .1)
normal_ramp = dnorm(x, mean = .5, sd = 0.3)[11:1]*.75
color_scale_seq = rgb(normal_ramp, 1, 1)
normal_ramp
plot(x, normal_ramp)
x = seq(-.5, 2, by = .1)
normal_ramp = dnorm(x, mean = .5, sd = 0.3)[11:1]*.75
plot(x, normal_ramp)
plot(x[1:11], normal_ramp)
normal_ramp = dnorm(x, mean = .5, sd = 0.1)[11:1]*.75
plot(x[1:11], normal_ramp)
normal_ramp = dnorm(x, mean = .5, sd = 0.5)[11:1]*.75
plot(x[1:11], normal_ramp)
normal_ramp = dnorm(x, mean = .5, sd = 0.5)[11:1]*.75
normal_ramp = dnorm(x, mean = .5, sd = 0.7)[11:1]*.75
plot(x[1:11], normal_ramp)
color_scale_seq = rgb(normal_ramp, 1, 1)
x = seq(-.5, 2, by = .1)
normal_ramp = dnorm(x, mean = .5, sd = 0.7)[11:1]*.75
plot(x[1:11], normal_ramp)
color_scale_seq = rgb(normal_ramp, 1, 1)
x = seq(-.5, 2, by = .1)
normal_ramp = dnorm(x, mean = .5, sd = 1)[11:1]*.75
plot(x[1:11], normal_ramp)
color_scale_seq = rgb(normal_ramp, 1, 1)
normal_ramp
normal_ramp = dnorm(x, mean = .5, sd = .2)[11:1]*.75
plot(x[1:11], normal_ramp)
x = seq(-.4, 2, by = .1)
normal_ramp = dnorm(x, mean = .5, sd = .2)[11:1]*.75
plot(x[1:11], normal_ramp)
x = seq(-.5, 2, by = .1)
normal_ramp = dnorm(x, mean = .5, sd = .2)[11:1]*.75
plot(x[1:11], normal_ramp)
x = seq(-.5, 2, by = .05)
normal_ramp = dnorm(x, mean = .5, sd = .2)[11:1]*.75
plot(x[1:11], normal_ramp)
x = seq(-.5, 2, by = .07)
normal_ramp = dnorm(x, mean = .5, sd = .2)[11:1]*.75
plot(x[1:11], normal_ramp)
x = seq(-.5, 2, by = .08)
normal_ramp = dnorm(x, mean = .5, sd = .2)[11:1]*.75
plot(x[1:11], normal_ramp)
x = seq(-.5, 2, by = .1)
normal_ramp = dnorm(x, mean = .5, sd = .2)[11:1]*.75
plot(x[1:11], normal_ramp)
x = seq(-.5, 2, by = .2)
normal_ramp = dnorm(x, mean = .5, sd = .2)[11:1]*.75
plot(x[1:11], normal_ramp)
x = seq(-.5, 2, by = .001)
normal_ramp = dnorm(x, mean = .5, sd = .2)[11:1]*.75
plot(x[1:11], normal_ramp)
x = seq(-.5, 2, by = .01)
normal_ramp = dnorm(x, mean = .5, sd = .2)[11:1]*.75
plot(x[1:11], normal_ramp)
x = seq(-.5, 2, by = .02)
normal_ramp = dnorm(x, mean = .5, sd = .2)[11:1]*.75
plot(x[1:11], normal_ramp)
x = seq(-.5, 2, by = .02)
normal_ramp = dnorm(x, mean = .5, sd = .2)[11:1]*5e4
plot(x[1:11], normal_ramp)
x = seq(-.5, 2, by = .02)
normal_ramp = dnorm(x, mean = .5, sd = .2)[11:1]*5e3
plot(x[1:11], normal_ramp)
x = seq(-.5, 2, by = .02)
normal_ramp = dnorm(x, mean = .5, sd = .2)[11:1]*2e3
plot(x[1:11], normal_ramp)
x = seq(-.5, 2, by = .02)
normal_ramp = dnorm(x, mean = .5, sd = .2)[11:1]*1.1e3
plot(x[1:11], normal_ramp)
x = seq(-.5, 2, by = .02)
normal_ramp = dnorm(x, mean = .5, sd = .2)[11:1]*1.3e3
plot(x[1:11], normal_ramp)
x = seq(-.5, 2, by = .02)
normal_ramp = dnorm(x, mean = .5, sd = .2)[11:1]*1.4e3
plot(x[1:11], normal_ramp)
x = seq(-.5, 2, by = .02)
normal_ramp = dnorm(x, mean = .5, sd = .2)[11:1]*1.5e3
plot(x[1:11], normal_ramp)
x = seq(-.5, 2, by = .02)
normal_ramp = dnorm(x, mean = .5, sd = .2)[11:1]*1.45e3
plot(x[1:11], normal_ramp)
normal_ramp
runApp()
x = seq(-.5, 2, by = .1)
normal_ramp = dnorm(x, mean = .5, sd = .2)[11:1]
plot(x[1:11], normal_ramp)
x = seq(-.5, 2, by = .1)
normal_ramp = dnorm(x, mean = .5, sd = .3)[11:1]
plot(x[1:11], normal_ramp)
x = seq(-.5, 2, by = .1)
normal_ramp = dnorm(x, mean = .2, sd = .3)[11:1]
plot(x[1:11], normal_ramp)
x = seq(-.5, 2, by = .1)
normal_ramp = dnorm(x, mean = .5, sd = .3)[11:1]
plot(x[1:11], normal_ramp)
x = seq(-.5, 2, by = .05)
normal_ramp = dnorm(x, mean = .5, sd = .3)[11:1]
plot(x[1:11], normal_ramp)
x = seq(0, 2, by = .05)
normal_ramp = dnorm(x, mean = .5, sd = .3)[11:1]
plot(x[1:11], normal_ramp)
x = seq(-.2, 2, by = .05)
normal_ramp = dnorm(x, mean = .5, sd = .3)[11:1]
plot(x[1:11], normal_ramp)
x = seq(1, 2, by = .05)
normal_ramp = dnorm(x, mean = .5, sd = .3)[11:1]
plot(x[1:11], normal_ramp)
x = seq(0, 2, by = .05)
normal_ramp = dnorm(x, mean = .5, sd = .3)[11:1]
plot(x[1:11], normal_ramp)
x = seq(0, 2, by = .05)
normal_ramp = dnorm(x, mean = .5, sd = .4)[11:1]
plot(x[1:11], normal_ramp)
normal_ramp = dnorm(x, mean = .5, sd = .2)[11:1]
plot(x[1:11], normal_ramp)
normal_ramp = dnorm(x, mean = .5, sd = .1)[11:1]
plot(x[1:11], normal_ramp)
normal_ramp = dnorm(x, mean = .5, sd = .15)[11:1]
plot(x[1:11], normal_ramp)
normal_ramp = dnorm(x, mean = .5, sd = .2)[11:1]
plot(x[1:11], normal_ramp)
normal_ramp = dnorm(x, mean = .5, sd = .3)[11:1]
plot(x[1:11], normal_ramp)
runApp()
normal_ramp = dnorm(x, mean = .5, sd = .3)[11:1]*.8
normal_ramp
normal_ramp = dnorm(x, mean = .5, sd = .3)[11:1]*.75
normal_ramp
runApp()
plot(x[1:11], normal_ramp)
normal_ramp = dnorm(x, mean = .5, sd = 0.3)[1:11]*.75
plot(x[1:11], normal_ramp)
x = seq(-.5, 2, by = .1)
normal_ramp = dnorm(x, mean = .5, sd = 0.3)[1:11]*.75
plot(x[1:11], normal_ramp)
normal_ramp
normal_ramp = 1-dnorm(x, mean = .5, sd = 0.3)[1:11]*.75
plot(x[1:11], normal_ramp)
runApp()
color_scale_seq
x = seq(-.5, 2, by = .1)
normal_ramp = 1-dnorm(x, mean = .5, sd = 0.3)[1:11]*.75
color_scale_seq = rgb(normal_ramp, 1, 1)
color_scale_seq
1:11
log2(1:11)
runApp()
setwd("E:/Documents/Developmental-Landscape")
library(data.table)
library(stringr)
library(tidyverse)
library(org.Dm.eg.db)
library(annotate)
# This script computes TPMs for all libraries and computes polysome/input ratio
temp = list.files(path = "fastqs/STAR_processed_files/", pattern = "*ReadsPerGene.out.tab$", recursive = TRUE)
data.table(temp)
pick = temp[] #pick or reorder featurecounts
data.table(pick)
temp_names = unlist(strsplit(pick, 'ReadsPerGene.out.tab'))
picked_names = unlist(strsplit(temp_names, '/'))[seq(2, length(temp_names)*2, 2)]
picked_names
groups = strsplit(picked_names, '*_[0-9]')
myfiles = lapply(paste0("fastqs/STAR_processed_files/", pick),
read.delim,
stringsAsFactors = F,
header = F)
allseq = data.frame(myfiles)
rownames(allseq) = allseq[[1]]
allseq = allseq[c(seq(from = 4, to = length(allseq), by = 4))]
colnames(allseq) = picked_names
allseq = allseq[-(1:4),] #remove header/summary rows
####TPM####
tpm = function(counts, lengths) {
rate = counts / lengths
rate / sum(rate) * 1e6
}
featLens = read.table(file = "TPMs/Feature_lengths_dm6ensgene.tabular",
header = TRUE,
stringsAsFactors = FALSE)
tpms_all = data.table(apply(X = allseq, 2, tpm, lengths=featLens[[2]]))
rownames(tpms_all) = rownames(allseq)
tpms_all_tib = as_tibble(data.frame(FBGN = rownames(tpms_all), tpms_all))
head(tpms_all_tib)
tpms_all_long = tpms_all_tib %>%
pivot_longer(
cols = -FBGN,
names_to = c("Genotype", "Source", "Replicate"),
names_sep  = "_",
values_to = "TPM"
)
polysome_ratios = tpms_all_long %>%
group_by(FBGN, Genotype, Replicate) %>%
mutate(polysome_over_input = (TPM+1)/(TPM[Source=="input"]+1)) %>%
mutate(log2_polysome_over_input = log2(polysome_over_input)) %>%
filter(Source == "polysome")
std <- function(x) sd(x)/sqrt(length(x))
polysome_ratios_mean = polysome_ratios %>%
group_by(FBGN, Genotype, Source) %>%
summarise(Mean_polysome_over_input = mean(polysome_over_input),
Mean_polysome_over_input_error = std(polysome_over_input),
Mean_log2_polysome_over_input = mean(log2_polysome_over_input),
Mean_log2_polysome_over_input_error = std(log2_polysome_over_input))
polysome_ratios_mean$log2MeanRatioError = paste0(round(signif(polysome_ratios_mean$Mean_log2_polysome_over_input, digits = 3),
digits = 1), "±",
round(signif(polysome_ratios_mean$Mean_log2_polysome_over_input_error, digits = 3),
digits = 1))
polysome_ratios_mean$Genotype = factor(polysome_ratios_mean$Genotype,
levels = c("TKV", "BamRNAi", "BamHSbam", "youngWT"))
polysome_ratios_mean_wide = polysome_ratios_mean %>%
arrange(Genotype) %>%
pivot_wider(names_from = Genotype, values_from = c(Mean_polysome_over_input,
Mean_polysome_over_input_error,
Mean_log2_polysome_over_input,
Mean_log2_polysome_over_input_error,
log2MeanRatioError))
polysome_ratios_mean_wide
polysome_ratios_mean
polysome_ratios_mean$Mean_log2_polysome_over_input
summary(polysome_ratios_mean$Mean_log2_polysome_over_input)
hist(polysome_ratios_mean$Mean_log2_polysome_over_input)
hist(polysome_ratios_mean$Mean_log2_polysome_over_input, breaks = 10)
hist(polysome_ratios_mean$Mean_log2_polysome_over_input, breaks = 20)
hist(polysome_ratios_mean$Mean_log2_polysome_over_input, breaks = 30)
hist(polysome_ratios_mean$Mean_log2_polysome_over_input)
library(data.table)
library(stringr)
library(tidyverse)
library(org.Dm.eg.db)
library(annotate)
# This script computes TPMs for all libraries and computes polysome/input ratio
temp = list.files(path = "fastqs/STAR_processed_files/", pattern = "*ReadsPerGene.out.tab$", recursive = TRUE)
data.table(temp)
pick = temp[] #pick or reorder featurecounts
data.table(pick)
temp_names = unlist(strsplit(pick, 'ReadsPerGene.out.tab'))
picked_names = unlist(strsplit(temp_names, '/'))[seq(2, length(temp_names)*2, 2)]
picked_names
groups = strsplit(picked_names, '*_[0-9]')
myfiles = lapply(paste0("fastqs/STAR_processed_files/", pick),
read.delim,
stringsAsFactors = F,
header = F)
allseq = data.frame(myfiles)
rownames(allseq) = allseq[[1]]
allseq = allseq[c(seq(from = 4, to = length(allseq), by = 4))]
colnames(allseq) = picked_names
allseq = allseq[-(1:4),] #remove header/summary rows
####TPM####
tpm = function(counts, lengths) {
rate = counts / lengths
rate / sum(rate) * 1e6
}
featLens = read.table(file = "TPMs/Feature_lengths_dm6ensgene.tabular",
header = TRUE,
stringsAsFactors = FALSE)
tpms_all = data.table(apply(X = allseq, 2, tpm, lengths=featLens[[2]]))
rownames(tpms_all) = rownames(allseq)
tpms_all_tib = as_tibble(data.frame(FBGN = rownames(tpms_all), tpms_all))
head(tpms_all_tib)
tpms_all_long = tpms_all_tib %>%
pivot_longer(
cols = -FBGN,
names_to = c("Genotype", "Source", "Replicate"),
names_sep  = "_",
values_to = "TPM"
)
polysome_ratios = tpms_all_long %>%
group_by(FBGN, Genotype, Replicate) %>%
mutate(polysome_over_input = (TPM+1)/(TPM[Source=="input"]+1)) %>%
mutate(log2_polysome_over_input = log2(polysome_over_input)) %>%
filter(Source == "polysome")
std <- function(x) sd(x)/sqrt(length(x))
polysome_ratios_mean = polysome_ratios %>%
group_by(FBGN, Genotype, Source) %>%
summarise(Mean_polysome_over_input = mean(polysome_over_input),
Mean_polysome_over_input_error = std(polysome_over_input),
Mean_log2_polysome_over_input = mean(log2_polysome_over_input),
Mean_log2_polysome_over_input_error = std(log2_polysome_over_input))
polysome_ratios_mean$log2MeanRatioError = paste0(round(signif(polysome_ratios_mean$Mean_log2_polysome_over_input, digits = 3),
digits = 1), "±",
round(signif(polysome_ratios_mean$Mean_log2_polysome_over_input_error, digits = 3),
digits = 1))
polysome_ratios_mean$Genotype = factor(polysome_ratios_mean$Genotype,
levels = c("TKV", "BamRNAi", "BamHSbam", "youngWT"))
polysome_ratios_mean_wide = polysome_ratios_mean %>%
arrange(Genotype) %>%
pivot_wider(names_from = Genotype, values_from = c(Mean_polysome_over_input,
Mean_polysome_over_input_error,
Mean_log2_polysome_over_input,
Mean_log2_polysome_over_input_error,
log2MeanRatioError))
saveRDS(polysome_ratios_mean_wide, file = "TPMs/Polysome_Input_ratio_and_text.RDS")
fbgn_to_symbol =  function(fbid){
AnnotationDbi::select(org.Dm.eg.db, fbid,
columns=c("SYMBOL"),
keytype="FLYBASE")
}
polysome_ratios_mean_wide$FBGN = as.character(polysome_ratios_mean_wide$FBGN)
Symbol = fbgn_to_symbol(polysome_ratios_mean_wide$FBGN)[[2]]
polysome_ratios_mean_wide$symbol = Symbol
polysome_ratios_mean_wide$TKVbin1 = cut(as.numeric(polysome_ratios_mean_wide$Mean_log2_polysome_over_input_TKV),
breaks = c(-11,-0.5,-0.2,0,0.2,0.5,11),
labels=c("None","Very Low","Low","Med","High","Very High"))
polysome_ratios_mean_wide$Bambin1 = cut(as.numeric(polysome_ratios_mean_wide$Mean_log2_polysome_over_input_BamRNAi),
breaks = c(-11,-0.5,-0.2,0,0.2,0.5,11),
labels=c("None","Very Low","Low","Med","High","Very High"))
polysome_ratios_mean_wide$Cystbin1 = cut(as.numeric(polysome_ratios_mean_wide$Mean_log2_polysome_over_input_BamHSbam),
breaks = c(-11,-0.5,-0.2,0,0.2,0.5,11),
labels=c("None","Very Low","Low","Med","High","Very High"))
polysome_ratios_mean_wide$Virginbin1 = cut(as.numeric(polysome_ratios_mean_wide$Mean_log2_polysome_over_input_youngWT),
breaks = c(-11,-0.5,-0.2,0,0.2,0.5,11),
labels=c("None","Very Low","Low","Med","High","Very High"))
saveRDS(polysome_ratios_mean_wide, "ShinyExpresionMap/Preprocessed_data/preprocessed_polysome_seq_data.RDS", compress = TRUE)
runApp('ShinyExpresionMap')
