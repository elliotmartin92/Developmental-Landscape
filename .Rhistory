runApp('ShinyExpresionMap')
lines = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_lines_simplified")
shape = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_shape_simplified_recover")
shape
library(sf)
library(tidyverse)
lines = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_lines_simplified")
shape = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_shape_simplified_recover")
lines$cell_type = "line"
lines$region = "line"
lines$color = "line"
shape$color = "White"
line.plot = data.frame(lines)
shape.plot = data.frame(shape)
lines.plot = data.frame(shape)
merge_plot = full_join(shape.plot, line.plot)
# merge_plot = shape.plot
merge_plot$color = factor(merge_plot$color,
c("line", "None", "Very Low", "Low", "Med", "High", "Very High", "Black", "White"))
merge_plot =
merge_plot %>%
group_by(cell_type) %>%
mutate(region = factor(region, c("line", "germline", "soma", "background"))) %>%
arrange(region) %>%
ungroup() %>%
mutate(cell_type = factor(cell_type, unique(cell_type)))
saveRDS(merge_plot, "ShinyExpresionMap/Preprocessed_data/preprocessed_sf.RDS", compress = TRUE)
saveRDS(shape, "ShinyExpresionMap/Preprocessed_data/preloaded_shape.RDS", compress = TRUE)
library(sf)
library(tidyverse)
lines = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_lines_simplified")
shape = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_shape_simplified_recover")
lines$cell_type = "line"
lines$region = "line"
lines$color = "line"
shape$color = "White"
line.plot = data.frame(lines)
shape.plot = data.frame(shape)
lines.plot = data.frame(shape)
merge_plot = full_join(shape.plot, line.plot)
merge_plot = full_join(shape.plot, line.plot)
lines
shape
lines = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_lines_simplified")
shape = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_shape_simplified_recover")
lines$cell_type = "line"
lines$region = "line"
lines$color = "line"
shape$color = "White"
line.plot = data.frame(lines)
shape.plot = data.frame(shape)
merge_plot = full_join(shape.plot, line.plot)
shape.plot
line.plot
merge_plot = full_join(shape.plot, line.plot)
library(sf)
library(tidyverse)
lines = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_lines_simplified")
shape = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_shape_simplified_recover")
lines$cell_type = "line"
lines$region = "line"
lines$color = "line"
shape$color = "White"
line.plot = data.frame(lines)
shape.plot = data.frame(shape)
merge_plot = full_join(shape.plot, line.plot)
shape.plot
merge_plot = rbind(shape.plot, line.plot)
merge_plot
merge_plot$color = factor(merge_plot$color,
c("line", "None", "Very Low", "Low", "Med", "High", "Very High", "Black", "White"))
merge_plot =
merge_plot %>%
group_by(cell_type) %>%
mutate(region = factor(region, c("line", "germline", "soma", "background"))) %>%
arrange(region) %>%
ungroup() %>%
mutate(cell_type = factor(cell_type, unique(cell_type)))
saveRDS(merge_plot, "ShinyExpresionMap/Preprocessed_data/preprocessed_sf.RDS", compress = TRUE)
saveRDS(shape, "ShinyExpresionMap/Preprocessed_data/preloaded_shape.RDS", compress = TRUE)
shiny::runApp('ShinyExpresionMap')
setwd("E:/Documents/Developmental-Landscape")
read_rds("TPMs/GC_clusters.RData")
load("TPMs/GC_clusters.RData")
install.packages('Seurat')
library(Seurat)
load("TPMs/GC_clusters.RData")
load("TPMs/GC_clusters.RData")
DimPlot(GC_clusters)
GC_clusters$nFeature_RNA
FeaturePlot(GC_clusters, features = c("bam"))
DimPlot(GC_clusters, cells = active.ident)
DimPlot(GC_clusters)
FeaturePlot(GC_clusters, features = c("bam"))
FeaturePlot(GC_clusters, features = c("pgc"))
FeaturePlot(GC_clusters, features = c("pgc", "bam"))
FeaturePlot(GC_clusters, features = c("bam", "blanks"))
FeaturePlot(GC_clusters, features = c("bam", "tkv"))
runApp('ShinyExpresionMap')
FeaturePlot(GC_clusters, features = c("bam", "rps19b"))
FeaturePlot(GC_clusters, features = c("bam", "RpS19b"))
FeaturePlot(GC_clusters, features = c("RpS19a", "RpS19b"))
FeaturePlot(GC_clusters, features = c("bam"))
FeaturePlot(GC_clusters)
DimPlot(GC_clusters)
DimPlot(GC_clusters)
FeaturePlot(GC_clusters)
FeaturePlot(GC_clusters, features = "RpS2")
FeaturePlot(GC_clusters, features = "RpL30")
FeaturePlot(GC_clusters, features = "RpS3")
FeaturePlot(GC_clusters, features = "RpS4")
FeaturePlot(GC_clusters, features = "RpS13")
library(openxlsx)
read.xlsx("TPMs/SC_seq_expression.xlsx", sheet = 1)
GC_clusters = read.xlsx("TPMs/SC_seq_expression.xlsx", sheet = 1)
GC_clusters
head(GC_clusters)
GC_clusters[[1]]
GC_clusters[[2]]
GC_clusters[[2]]-GC_clusters[[2]]
GC_clusters[[2]]-GC_clusters[[3]]
GC_clusters$diff = GC_clusters[[2]]-GC_clusters[[3]]
View(GC_clusters)
GC_clusters$diff = (GC_clusters[[2]]-GC_clusters[[3]])/GC_clusters[[2]]
View(GC_clusters)
GC_clusters$diff = (GC_clusters[[2]]/GC_clusters[[3]])
View(GC_clusters)
runApp('ShinyExpresionMap')
GC_clusters$X1
colnames(GC_clusters$X1)
colnames(GC_clusters[1])
GC_clusters
colnames(GC_clusters[1]) = "Symbol"
GC_clusters
names(GC_clusters)[names(GC_clusters) == "X1"] = "Symbol"
head(GC_clusters)
symbol_to_fbgn(GC_clusters$Symbol)
library(org.Dm.eg.db)
symbol_to_fbgn =  function(fbid){
AnnotationDbi::select(org.Dm.eg.db, fbid,
columns=c("FLYBASE"),
keytype="SYMBOL")
}
symbol_to_fbgn(GC_clusters$Symbol)
GC_clusters
GC_clusters$Symbol
GC_clusters$Symbol %>% writeClipboard()
symbol_to_fbgn(GC_clusters$Symbol)
symbol_to_fbgn(GC_clusters$Symbol)$FLYBASE
GC_clusters$FBgn = symbol_to_fbgn(GC_clusters$Symbol)$FLYBASE
GC_clusters
head(GC_clusters)
GC_clusters = read.xlsx("TPMs/SC_seq_expression.xlsx", sheet = 1)
head(GC_clusters)
names(GC_clusters)[names(GC_clusters) == "X1"] = "Symbol"
library(org.Dm.eg.db)
symbol_to_fbgn =  function(fbid){
AnnotationDbi::select(org.Dm.eg.db, fbid,
columns=c("FLYBASE"),
keytype="SYMBOL")
}
GC_clusters$FBgn = symbol_to_fbgn(GC_clusters$Symbol)$FLYBASE
GC_clusters
GC_clusters[2:6]
head(GC_clusters[2:6])
head(GC_clusters[2:8])
head(GC_clusters[2:9])
head(GC_clusters[2:10])
head(GC_clusters[2:11])
head(GC_clusters[2:10])
summary(head(GC_clusters[2:10]))
1/6
.45+.15
GC_clusters
head(GC_clusters)
GC_clusters %>% pivot_longer(-c(Symbol, FBgn), names_to = "Stage", values_to = "Expression")
GC_clusters %>%
pivot_longer(-c(Symbol, FBgn), names_to = "Stage", values_to = "Expression") %>%
dplyr::group_by(Symbol, FBgn, Stage) %>%
mutate(bin = cut(as.numeric(Expression)),
breaks = c(0,0.05,0.2,0.4,0.6,0.8,1.1),
labels=c("None","Very Low","Low","Med","High","Very High"))
GC_clusters %>%
pivot_longer(-c(Symbol, FBgn), names_to = "Stage", values_to = "Expression") %>%
dplyr::group_by(Symbol, FBgn, Stage) %>%
mutate(bin = cut(as.numeric(Expression),
breaks = c(0,0.05,0.2,0.4,0.6,0.8,1.1),
labels=c("None","Very Low","Low","Med","High","Very High")))
GC_preprocessed =
GC_clusters %>%
pivot_longer(-c(Symbol, FBgn), names_to = "Stage", values_to = "Expression") %>%
dplyr::group_by(Symbol, FBgn, Stage) %>%
mutate(bin = cut(as.numeric(Expression),
breaks = c(0,0.05,0.2,0.4,0.6,0.8,1.1),
labels=c("None","Very Low","Low","Med","High","Very High"))) %>%
pivot_wider(id_cols = Symbol, names_from = Stage, values_from = c(Expression, bin))
head(GC_preprocessed)
write_rds(GC_clusters, "preprocessed_signel_cell_seq_data.RDS")
write_rds(GC_clusters, "preprocessed_single_cell_seq_data.RDS")
merge_plot
library(tidyverse)
library(openxlsx)
GC_clusters = read.xlsx("TPMs/SC_seq_expression.xlsx", sheet = 1)
head(GC_clusters)
names(GC_clusters)[names(GC_clusters) == "X1"] = "symbol"
library(org.Dm.eg.db)
symbol_to_fbgn =  function(fbid){
AnnotationDbi::select(org.Dm.eg.db, fbid,
columns=c("FLYBASE"),
keytype="SYMBOL")
}
GC_clusters$FBID = symbol_to_fbgn(GC_clusters$Symbol)$FLYBASE
GC_preprocessed =
GC_clusters %>%
pivot_longer(-c(Symbol, FBgn), names_to = "Stage", values_to = "Expression") %>%
dplyr::group_by(Symbol, FBgn, Stage) %>%
mutate(bin = cut(as.numeric(Expression),
breaks = c(0,0.05,0.2,0.4,0.6,0.8,1.1),
labels=c("None","Very Low","Low","Med","High","Very High"))) %>%
pivot_wider(id_cols = Symbol, names_from = Stage, values_from = c(Expression, bin))
head(GC_preprocessed)
write_rds(GC_clusters, "preprocessed_single_cell_seq_data.RDS")
names(GC_preprocessed)
names(GC_preprocessed[11:15])
names(GC_preprocessed[11:19])
names(GC_preprocessed[11:20])
names(GC_preprocessed[11:19])
writeClipboard(names(GC_preprocessed[11:19]))
data.seq = readRDS("Preprocessed_data/preprocessed_single_cell_seq_data.RDS") #data from preprocessed SC-seq (binned/organized)
setwd("E:/Documents/Developmental-Landscape/ShinyExpresionMap")
data.seq = readRDS("Preprocessed_data/preprocessed_single_cell_seq_data.RDS") #data from preprocessed SC-seq (binned/organized)
data.seq = readRDS("Preprocessed_data/preprocessed_single_cell_seq_data.RDS") #data from preprocessed SC-seq (binned/organized)
library(tidyverse)
library(openxlsx)
GC_clusters = read.xlsx("TPMs/SC_seq_expression.xlsx", sheet = 1)
head(GC_clusters)
names(GC_clusters)[names(GC_clusters) == "X1"] = "symbol"
library(org.Dm.eg.db)
symbol_to_fbgn =  function(fbid){
AnnotationDbi::select(org.Dm.eg.db, fbid,
columns=c("FLYBASE"),
keytype="SYMBOL")
}
GC_clusters$FBID = symbol_to_fbgn(GC_clusters$Symbol)$FLYBASE
GC_preprocessed =
GC_clusters %>%
pivot_longer(-c(Symbol, FBgn), names_to = "Stage", values_to = "Expression") %>%
dplyr::group_by(Symbol, FBgn, Stage) %>%
mutate(bin = cut(as.numeric(Expression),
breaks = c(0,0.05,0.2,0.4,0.6,0.8,1.1),
labels=c("None","Very Low","Low","Med","High","Very High"))) %>%
pivot_wider(id_cols = Symbol, names_from = Stage, values_from = c(Expression, bin))
head(GC_preprocessed)
write_rds(GC_clusters, "preprocessed_single_cell_seq_data.RDS")
data.seq = readRDS("Preprocessed_data/preprocessed_single_cell_seq_data.RDS") #data from preprocessed SC-seq (binned/organized)
setwd("E:/Documents/Developmental-Landscape")
library(tidyverse)
library(openxlsx)
GC_clusters = read.xlsx("TPMs/SC_seq_expression.xlsx", sheet = 1)
head(GC_clusters)
names(GC_clusters)[names(GC_clusters) == "X1"] = "symbol"
library(org.Dm.eg.db)
symbol_to_fbgn =  function(fbid){
AnnotationDbi::select(org.Dm.eg.db, fbid,
columns=c("FLYBASE"),
keytype="SYMBOL")
}
GC_clusters$FBID = symbol_to_fbgn(GC_clusters$Symbol)$FLYBASE
GC_preprocessed =
GC_clusters %>%
pivot_longer(-c(Symbol, FBgn), names_to = "Stage", values_to = "Expression") %>%
dplyr::group_by(Symbol, FBgn, Stage) %>%
mutate(bin = cut(as.numeric(Expression),
breaks = c(0,0.05,0.2,0.4,0.6,0.8,1.1),
labels=c("None","Very Low","Low","Med","High","Very High"))) %>%
pivot_wider(id_cols = Symbol, names_from = Stage, values_from = c(Expression, bin))
head(GC_preprocessed)
write_rds(GC_clusters, "ShinyExpresionMap/Preprocessed_data/preprocessed_single_cell_seq_data.RDS")
data.seq = readRDS("Preprocessed_data/preprocessed_single_cell_seq_data.RDS") #data from preprocessed SC-seq (binned/organized)
expression_unit = "dunno"
data.seq = readRDS("Preprocessed_data/preprocessed_single_cell_seq_data.RDS") #data from preprocessed SC-seq (binned/organized)
setwd("E:/Documents/Developmental-Landscape/ShinyExpresionMap")
data.seq = readRDS("Preprocessed_data/preprocessed_single_cell_seq_data.RDS") #data from preprocessed SC-seq (binned/organized)
expression_unit = "dunno"
all.colors = data.seq[data.seq$symbol %in% "pgc", names(data.seq) %in% sc_seq_bins]
sc_seq_bins = c("bin_GSC/CB/2-cc",
"bin_4-cc",
"bin_8-cc",
"bin_16-cc.2a.I",
"bin_16-cc.2a.II",
"bin_16-cc.2ab",
"bin_16-cc.2b",
"bin_16-cc.3",
"bin_St2")
all.colors = data.seq[data.seq$symbol %in% "pgc", names(data.seq) %in% sc_seq_bins]
all.colors
sc_seq_bins
data.seq
names(data.seq)
data.seq$symbol
data.seq$symbol %in% "pgc"
names(data.seq) %in% sc_seq_bins
names(data.seq)
setwd("E:/Documents/Developmental-Landscape")
library(tidyverse)
library(openxlsx)
GC_clusters = read.xlsx("TPMs/SC_seq_expression.xlsx", sheet = 1)
head(GC_clusters)
names(GC_clusters)[names(GC_clusters) == "X1"] = "symbol"
library(org.Dm.eg.db)
symbol_to_fbgn =  function(fbid){
AnnotationDbi::select(org.Dm.eg.db, fbid,
columns=c("FLYBASE"),
keytype="SYMBOL")
}
GC_clusters$FBID = symbol_to_fbgn(GC_clusters$Symbol)$FLYBASE
GC_preprocessed =
GC_clusters %>%
pivot_longer(-c(Symbol, FBgn), names_to = "Stage", values_to = "Expression") %>%
dplyr::group_by(Symbol, FBgn, Stage) %>%
mutate(bin = cut(as.numeric(Expression),
breaks = c(0,0.05,0.2,0.4,0.6,0.8,1.1),
labels=c("None","Very Low","Low","Med","High","Very High"))) %>%
pivot_wider(id_cols = Symbol, names_from = Stage, values_from = c(Expression, bin))
head(GC_preprocessed)
write_rds(GC_preprocessed, "ShinyExpresionMap/Preprocessed_data/preprocessed_single_cell_seq_data.RDS")
setwd("E:/Documents/Developmental-Landscape/ShinyExpresionMap")
data.seq[data.seq$symbol %in% "pgc", names(data.seq) %in% sc_seq_bins]
names(data.seq)
setwd("E:/Documents/Developmental-Landscape")
GC_preprocessed
write_rds(GC_preprocessed, "ShinyExpresionMap/Preprocessed_data/preprocessed_single_cell_seq_data.RDS")
setwd("E:/Documents/Developmental-Landscape/ShinyExpresionMap")
data.seq = readRDS("Preprocessed_data/preprocessed_single_cell_seq_data.RDS") #data from preprocessed SC-seq (binned/organized)
all.colors = data.seq[data.seq$symbol %in% gene_of_interest, names(data.seq) %in% sc_seq_bins]
all.colors = data.seq[data.seq$symbol %in% "pgc", names(data.seq) %in% sc_seq_bins]
names(data.seq) %in% sc_seq_bins
data.seq$symbol %in% pgc
data.seq$symbol %in% "pgc"
data.seq$symbol
data.seq
setwd("E:/Documents/Developmental-Landscape")
GC_clusters = read.xlsx("TPMs/SC_seq_expression.xlsx", sheet = 1)
head(GC_clusters)
names(GC_clusters)[names(GC_clusters) == "X1"] = "symbol"
GC_clusters
head(GC_clusters)
library(org.Dm.eg.db)
symbol_to_fbgn =  function(fbid){
AnnotationDbi::select(org.Dm.eg.db, fbid,
columns=c("FLYBASE"),
keytype="SYMBOL")
}
GC_clusters$FBID = symbol_to_fbgn(GC_clusters$Symbol)$FLYBASE
GC_clusters = read.xlsx("TPMs/SC_seq_expression.xlsx", sheet = 1)
head(GC_clusters)
names(GC_clusters)[names(GC_clusters) == "X1"] = "symbol"
library(org.Dm.eg.db)
symbol_to_fbgn =  function(fbid){
AnnotationDbi::select(org.Dm.eg.db, fbid,
columns=c("FLYBASE"),
keytype="SYMBOL")
}
GC_clusters$FBID = symbol_to_fbgn(GC_clusters$symbol)$FLYBASE
GC_preprocessed =
GC_clusters %>%
pivot_longer(-c(symbol, FBID), names_to = "Stage", values_to = "Expression") %>%
dplyr::group_by(symbol, FBID, Stage) %>%
mutate(bin = cut(as.numeric(Expression),
breaks = c(0,0.05,0.2,0.4,0.6,0.8,1.1),
labels=c("None","Very Low","Low","Med","High","Very High"))) %>%
pivot_wider(id_cols = Symbol, names_from = Stage, values_from = c(Expression, bin))
head(GC_preprocessed)
write_rds(GC_preprocessed, "ShinyExpresionMap/Preprocessed_data/preprocessed_single_cell_seq_data.RDS")
setwd("E:/Documents/Developmental-Landscape")
setwd("E:/Documents/Developmental-Landscape/ShinyExpresionMap")
data.seq = readRDS("Preprocessed_data/preprocessed_single_cell_seq_data.RDS") #data from preprocessed SC-seq (binned/organized)
all.colors = data.seq[data.seq$symbol %in% gene_of_interest, names(data.seq) %in% sc_seq_bins]
all.colors = data.seq[data.seq$symbol %in% "pgc", names(data.seq) %in% sc_seq_bins]
names(data.seq)
sc_seq_bins
names(data.seq) %in% sc_seq_bins
data.seq$symbol
data.seq
setwd("E:/Documents/Developmental-Landscape")
library(tidyverse)
library(openxlsx)
GC_clusters = read.xlsx("TPMs/SC_seq_expression.xlsx", sheet = 1)
head(GC_clusters)
names(GC_clusters)[names(GC_clusters) == "X1"] = "symbol"
library(org.Dm.eg.db)
symbol_to_fbgn =  function(fbid){
AnnotationDbi::select(org.Dm.eg.db, fbid,
columns=c("FLYBASE"),
keytype="SYMBOL")
}
GC_clusters$FBID = symbol_to_fbgn(GC_clusters$symbol)$FLYBASE
GC_preprocessed =
GC_clusters %>%
pivot_longer(-c(symbol, FBID), names_to = "Stage", values_to = "Expression") %>%
dplyr::group_by(symbol, FBID, Stage) %>%
mutate(bin = cut(as.numeric(Expression),
breaks = c(0,0.05,0.2,0.4,0.6,0.8,1.1),
labels=c("None","Very Low","Low","Med","High","Very High"))) %>%
pivot_wider(id_cols = symbol, names_from = Stage, values_from = c(Expression, bin))
head(GC_preprocessed)
write_rds(GC_preprocessed, "ShinyExpresionMap/Preprocessed_data/preprocessed_single_cell_seq_data.RDS")
setwd("E:/Documents/Developmental-Landscape/ShinyExpresionMap")
all.colors
data.seq
data.seq$symbol
data.seq
r
data.seq = readRDS("Preprocessed_data/preprocessed_single_cell_seq_data.RDS") #data from preprocessed SC-seq (binned/organized)
data.seq$symbol
data.seq
all.colors = data.seq[data.seq$symbol %in% gene_of_interest, names(data.seq) %in% sc_seq_bins]
all.colors = data.seq[data.seq$symbol %in% "pgc", names(data.seq) %in% sc_seq_bins]
all.colors
head(all.colors)
head(all.colors)[2:10]
head(all.colors)[2:9]
GC_preprocessed
GC_clusters
GC_clusters[2:12]
GC_clusters[2:11]
GC_clusters[2:10]
summary(GC_clusters[2:10])
setwd("E:/Documents/Developmental-Landscape")
library(tidyverse)
library(openxlsx)
GC_clusters = read.xlsx("TPMs/SC_seq_expression.xlsx", sheet = 1)
head(GC_clusters)
names(GC_clusters)[names(GC_clusters) == "X1"] = "symbol"
library(org.Dm.eg.db)
symbol_to_fbgn =  function(fbid){
AnnotationDbi::select(org.Dm.eg.db, fbid,
columns=c("FLYBASE"),
keytype="SYMBOL")
}
GC_clusters$FBID = symbol_to_fbgn(GC_clusters$symbol)$FLYBASE
GC_preprocessed =
GC_clusters %>%
pivot_longer(-c(symbol, FBID), names_to = "Stage", values_to = "Expression") %>%
dplyr::group_by(symbol, FBID, Stage) %>%
mutate(bin = cut(as.numeric(Expression),
breaks = c(-1,0.05,0.5,5,10,100,200),
labels=c("None","Very Low","Low","Med","High","Very High"))) %>%
pivot_wider(id_cols = symbol, names_from = Stage, values_from = c(Expression, bin))
head(GC_preprocessed)
write_rds(GC_preprocessed, "ShinyExpresionMap/Preprocessed_data/preprocessed_single_cell_seq_data.RDS")
setwd("E:/Documents/Developmental-Landscape/ShinyExpresionMap")
data.seq = readRDS("Preprocessed_data/preprocessed_single_cell_seq_data.RDS") #data from preprocessed SC-seq (binned/organized)
all.colors = data.seq[data.seq$symbol %in% "pgc", names(data.seq) %in% sc_seq_bins]
all.colors
merge_plot
all.colors
merge_plot
all.colors
merge_plot$color[merge_plot$cell_type=="GSC"] = all.colors[[1]]
merge_plot$color[merge_plot$cell_type=="CB"] = all.colors[[1]]
merge_plot$color[merge_plot$cell_type=="4CC"] = all.colors[[2]]
merge_plot$color[merge_plot$cell_type=="8CC"] = all.colors[[3]]
merge_plot$color[merge_plot$cell_type=="16CC_2A1"] = all.colors[[4]]
merge_plot$color[merge_plot$cell_type=="16CC_2A2"] = all.colors[[5]]
merge_plot$color[merge_plot$cell_type=="16CC_2AB"] = all.colors[[6]]
merge_plot$color[merge_plot$cell_type=="16CC_2B"] = all.colors[[7]]
merge_plot$color[merge_plot$cell_type=="16CC_3"] = all.colors[[8]]
merge_plot$color
dist_pl = merge_plot %>%
st_as_sf() %>%
mutate(region_index = row_number()) %>%
mutate(color = color %>% forcats::fct_reorder(-region_index)) %>%
ggplot()+
geom_sf(aes(geometry=geometry, fill=color), color = "grey50")+
scale_fill_manual(values = pal, name="Binned Expression")+
theme_void()+
theme(panel.grid.major = element_line(colour = "transparent"),
panel.background = element_rect(fill = "transparent", colour = "transparent"),
panel.border = element_rect(fill = "transparent", colour = "transparent"),
legend.position = "none")
dist_pl
merge_plot$color[merge_plot$cell_type=="GSC"] = all.colors[[1]]
merge_plot$color[merge_plot$cell_type=="CB"] = all.colors[[1]]
merge_plot$color[merge_plot$cell_type=="2CC"] = all.colors[[1]]
merge_plot$color[merge_plot$cell_type=="4CC"] = all.colors[[2]]
merge_plot$color[merge_plot$cell_type=="8CC"] = all.colors[[3]]
merge_plot$color[merge_plot$cell_type=="16CC_2A1"] = all.colors[[4]]
merge_plot$color[merge_plot$cell_type=="16CC_2A2"] = all.colors[[5]]
merge_plot$color[merge_plot$cell_type=="16CC_2AB"] = all.colors[[6]]
merge_plot$color[merge_plot$cell_type=="16CC_2B"] = all.colors[[7]]
merge_plot$color[merge_plot$cell_type=="16CC_3"] = all.colors[[8]]
#plotting distplot
dist_pl = merge_plot %>%
st_as_sf() %>%
mutate(region_index = row_number()) %>%
mutate(color = color %>% forcats::fct_reorder(-region_index)) %>%
ggplot()+
geom_sf(aes(geometry=geometry, fill=color), color = "grey50")+
scale_fill_manual(values = pal, name="Binned Expression")+
theme_void()+
theme(panel.grid.major = element_line(colour = "transparent"),
panel.background = element_rect(fill = "transparent", colour = "transparent"),
panel.border = element_rect(fill = "transparent", colour = "transparent"),
legend.position = "none")
dist_pl
data.seq
data.seq$FBGN
data.seq
data.seq[2:9]
data.seq[2:10]
runApp()
