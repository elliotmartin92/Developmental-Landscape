pvalue = 0.1
log2FC_cutoff = 1
up = resTable %>% filter(padj < pvalue) %>% filter(log2FoldChange > log2FC_cutoff)
down = resTable %>% filter(pvalue < pvalue) %>% filter(log2FoldChange < -log2FC_cutoff)
changing_genes = c(up$V1, down$V1)
up = resTable %>% filter(pvalue < pvalue) %>% filter(log2FoldChange > log2FC_cutoff)
down = resTable %>% filter(pvalue < pvalue) %>% filter(log2FoldChange < -log2FC_cutoff)
up
resTable
up = resTable %>% filter(pvalue < pvalue) %>% filter(log2FoldChange > log2FC_cutoff)
down = resTable %>% filter(pvalue < pvalue) %>% filter(log2FoldChange < -log2FC_cutoff)
up
resTable %>% filter(pvalue < pvalue)
resTable
resTable %>% filter(pvalue < pvalue)
pvalue
down
pvalue_cutoff = 0.1
log2FC_cutoff = 1
up = resTable %>% filter(pvalue < pvalue_cutoff) %>% filter(log2FoldChange > log2FC_cutoff)
down = resTable %>% filter(pvalue < pvalue_cutoff) %>% filter(log2FoldChange < -log2FC_cutoff)
up
up = resTable %>% filter(pvalue < pvalue_cutoff) %>% filter(log2FoldChange > log2FC_cutoff)
down = resTable %>% filter(pvalue < pvalue_cutoff) %>% filter(log2FoldChange < -log2FC_cutoff)
changing_genes = c(up$V1, down$V1)
write_rds(changing_genes, file = "ShinyExpresionMap/Preprocessed_data/developmentally_regulated_gene_list_polysome.RDS")
runApp()
changing_genes = readRDS("Preprocessed_data/developmentally_regulated_gene_list_polysome.RDS")
changing_genes
write_rds(changing_genes, file = "ShinyExpresionMap/Preprocessed_data/developmentally_regulated_gene_list_polysome.RDS")
write_rds(changing_genes, file = "Preprocessed_data/developmentally_regulated_gene_list_polysome.RDS")
runApp()
changing_genes = readRDS("Preprocessed_data/developmentally_regulated_gene_list_polysome.RDS")
changing_genes
setwd("E:/Documents/Developmental-Landscape/ShinyExpresionMap")
changing_genes = readRDS("Preprocessed_data/developmentally_regulated_gene_list_polysome.RDS")
changing_genes
changing_genes
up
changing_genes = c(up$V1, down$V1)
changing_genes
write_rds(changing_genes, file = "ShinyExpresionMap/Preprocessed_data/developmentally_regulated_gene_list_polysome.RDS")
setwd("E:/Documents/Developmental-Landscape")
write_rds(changing_genes, file = "ShinyExpresionMap/Preprocessed_data/developmentally_regulated_gene_list_polysome.RDS")
runApp('ShinyExpresionMap')
data.seq = readRDS("Preprocessed_data/preprocessed_polysome_seq_data.RDS")
setwd("E:/Documents/Developmental-Landscape/ShinyExpresionMap")
data.seq = readRDS("Preprocessed_data/preprocessed_polysome_seq_data.RDS")
data.seq
changing_genes = readRDS("Preprocessed_data/developmentally_regulated_gene_list_polysome.RDS")
changing_genes
data.seq = readRDS("Preprocessed_data/preprocessed_RNA_seq_data.RDS")
data.seq
changing_genes = readRDS("Preprocessed_data/developmentally_regulated_gene_list.RDS")
changing_genes
data.seq = readRDS("Preprocessed_data/preprocessed_polysome_seq_data.RDS")
data.seq
data.seq = readRDS("Preprocessed_data/preprocessed_RNA_seq_data.RDS")
data.seq
data.seq = readRDS("Preprocessed_data/preprocessed_RNA_seq_data.RDS")
data.seq
?heatmaply
?heatmaply
runApp()
install.packages(captioner )
install.packages("captioner")
library(captioner)
vignette("using_captioner")
runApp()
fig_nums("ovary_map", paste0("Plot of", input$variable,"expression over development."))
library(captioner)
fig_nums("ovary_map", paste0("Plot of", input$variable,"expression over development."))
library(captioner)
fig_nums = captioner()
fig_nums("ovary_map", paste0("Plot of", input$variable,"expression over development."))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shape = read_sf(dsn = "ShinyExpresionMap/www/germPoly", layer = "germPoly")
setwd("E:/Documents/Developmental-Landscape")
shape = read_sf(dsn = "ShinyExpresionMap/www/germPoly", layer = "germPoly")
shape
runApp('ShinyExpresionMap')
runApp('ShinyExpresionMap')
runApp('ShinyExpresionMap')
runApp('ShinyExpresionMap')
all.colors
data.seq = readRDS("Preprocessed_data/preprocessed_polysome_seq_data.RDS")
setwd("E:/Documents/Developmental-Landscape/ShinyExpresionMap")
data.seq = readRDS("Preprocessed_data/preprocessed_polysome_seq_data.RDS")
data.seq
data.seq[data.seq$symbol %in% "pgc", names(data.seq) %in% bins]
temp = list.files(path = "fastqs/STAR_processed_files/", pattern = "*ReadsPerGene.out.tab$", recursive = TRUE)
temp = list.files(path = "fastqs/STAR_processed_files/", pattern = "*ReadsPerGene.out.tab$", recursive = TRUE)
data.table(temp)
setwd("E:/Documents/Developmental-Landscape")
library(data.table)
library(stringr)
library(tidyverse)
library(org.Dm.eg.db)
library(annotate)
# This script computes TPMs for all libraries and computes polysome/input ratio
temp = list.files(path = "fastqs/STAR_processed_files/", pattern = "*ReadsPerGene.out.tab$", recursive = TRUE)
data.table(temp)
pick = temp[] #pick or reorder featurecounts
data.table(pick)
temp_names = unlist(strsplit(pick, 'ReadsPerGene.out.tab'))
picked_names = unlist(strsplit(temp_names, '/'))[seq(2, length(temp_names)*2, 2)]
picked_names
groups = strsplit(picked_names, '*_[0-9]')
myfiles = lapply(paste0("fastqs/STAR_processed_files/", pick),
read.delim,
stringsAsFactors = F,
header = F)
allseq = data.frame(myfiles)
rownames(allseq) = allseq[[1]]
allseq = allseq[c(seq(from = 4, to = length(allseq), by = 4))]
colnames(allseq) = picked_names
allseq = allseq[-(1:4),] #remove header/summary rows
####TPM####
tpm = function(counts, lengths) {
rate = counts / lengths
rate / sum(rate) * 1e6
}
featLens = read.table(file = "TPMs/Feature_lengths_dm6ensgene.tabular",
header = TRUE,
stringsAsFactors = FALSE)
tpms_all = data.table(apply(X = allseq, 2, tpm, lengths=featLens[[2]]))
rownames(tpms_all) = rownames(allseq)
tpms_all_tib = as_tibble(data.frame(FBGN = rownames(tpms_all), tpms_all))
head(tpms_all_tib)
tpms_all_long = tpms_all_tib %>%
pivot_longer(
cols = -FBGN,
names_to = c("Genotype", "Source", "Replicate"),
names_sep  = "_",
values_to = "TPM"
)
polysome_ratios = tpms_all_long %>%
group_by(FBGN, Genotype, Replicate) %>%
mutate(polysome_over_input = (TPM+1)/(TPM[Source=="input"]+1)) %>%
mutate(log2_polysome_over_input = log2(polysome_over_input)) %>%
filter(Source == "polysome") %>%
group_by(FBGN, Source, Replicate) %>%
mutate(TKV_normalized_log2_polysome_over_input = log2_polysome_over_input-log2_polysome_over_input[Genotype=="TKV"])
std <- function(x) sd(x)/sqrt(length(x))
polysome_ratios_mean = polysome_ratios %>%
group_by(FBGN, Genotype, Source) %>%
summarise(Mean_polysome_over_input = mean(polysome_over_input),
Mean_polysome_over_input_error = std(polysome_over_input),
Mean_log2_polysome_over_input = mean(log2_polysome_over_input),
Mean_log2_polysome_over_input_error = std(log2_polysome_over_input))
polysome_ratios_mean$log2MeanRatioError = paste0(round(signif(polysome_ratios_mean$Mean_log2_polysome_over_input, digits = 3),
digits = 1), "Â±",
round(signif(polysome_ratios_mean$Mean_log2_polysome_over_input_error, digits = 3),
digits = 1))
polysome_ratios_mean$Genotype = factor(polysome_ratios_mean$Genotype,
levels = c("TKV", "BamRNAi", "BamHSbam", "youngWT"))
polysome_ratios_mean_wide = polysome_ratios_mean %>%
arrange(Genotype) %>%
pivot_wider(names_from = Genotype, values_from = c(Mean_polysome_over_input,
Mean_polysome_over_input_error,
Mean_log2_polysome_over_input,
Mean_log2_polysome_over_input_error,
log2MeanRatioError))
saveRDS(polysome_ratios_mean_wide, file = "TPMs/Polysome_Input_ratio_and_text.RDS")
fbgn_to_symbol =  function(fbid){
AnnotationDbi::select(org.Dm.eg.db, fbid,
columns=c("SYMBOL"),
keytype="FLYBASE")
}
polysome_ratios_mean_wide$FBGN = as.character(polysome_ratios_mean_wide$FBGN)
Symbol = fbgn_to_symbol(polysome_ratios_mean_wide$FBGN)[[2]]
polysome_ratios_mean_wide$symbol = Symbol
polysome_ratios_mean_wide$TKVbin1 = cut(as.numeric(polysome_ratios_mean_wide$Mean_log2_polysome_over_input_TKV),
breaks = c(-11,-0.5,-0.2,0,0.2,0.5,11),
labels=c("None","Very Low","Low","Med","High","Very High"))
polysome_ratios_mean_wide$Bambin1 = cut(as.numeric(polysome_ratios_mean_wide$Mean_log2_polysome_over_input_BamRNAi),
breaks = c(-11,-0.5,-0.2,0,0.2,0.5,11),
labels=c("None","Very Low","Low","Med","High","Very High"))
polysome_ratios_mean_wide$Cystbin1 = cut(as.numeric(polysome_ratios_mean_wide$Mean_log2_polysome_over_input_BamRNAi),
breaks = c(-11,-0.5,-0.2,0,0.2,0.5,11),
labels=c("None","Very Low","Low","Med","High","Very High"))
polysome_ratios_mean_wide$Virginbin1 = cut(as.numeric(polysome_ratios_mean_wide$Mean_log2_polysome_over_input_BamRNAi),
breaks = c(-11,-0.5,-0.2,0,0.2,0.5,11),
labels=c("None","Very Low","Low","Med","High","Very High"))
saveRDS(polysome_ratios_mean_wide, "ShinyExpresionMap/Preprocessed_data/preprocessed_polysome_seq_data.RDS", compress = TRUE)
temp = list.files(path = "fastqs/STAR_processed_files/", pattern = "*ReadsPerGene.out.tab$", recursive = TRUE)
data.table(temp)
pick = temp[] #pick or reorder featurecounts
data.table(pick)
temp_names = unlist(strsplit(pick, 'ReadsPerGene.out.tab'))
picked_names = unlist(strsplit(temp_names, '/'))[seq(2, length(temp_names)*2, 2)]
picked_names
groups = strsplit(picked_names, '*_[0-9]')
myfiles = lapply(paste0("fastqs/STAR_processed_files/", pick),
read.delim,
stringsAsFactors = F,
header = F)
allseq = data.frame(myfiles)
rownames(allseq) = allseq[[1]]
allseq = allseq[c(seq(from = 4, to = length(allseq), by = 4))]
colnames(allseq) = picked_names
allseq = allseq[-(1:4),] #remove header/summary rows
####TPM####
tpm = function(counts, lengths) {
rate = counts / lengths
rate / sum(rate) * 1e6
}
featLens = read.table(file = "TPMs/Feature_lengths_dm6ensgene.tabular",
header = TRUE,
stringsAsFactors = FALSE)
tpms_all = data.table(apply(X = allseq, 2, tpm, lengths=featLens[[2]]))
rownames(tpms_all) = rownames(allseq)
tpms_all_tib = as_tibble(data.frame(FBGN = rownames(tpms_all), tpms_all))
head(tpms_all_tib)
tpms_all_long = tpms_all_tib %>%
pivot_longer(
cols = -FBGN,
names_to = c("Genotype", "Source", "Replicate"),
names_sep  = "_",
values_to = "TPM"
)
polysome_ratios = tpms_all_long %>%
group_by(FBGN, Genotype, Replicate) %>%
mutate(polysome_over_input = (TPM+1)/(TPM[Source=="input"]+1))
std <- function(x) sd(x)/sqrt(length(x))
polysome_ratios_mean = polysome_ratios %>%
group_by(Genotype, Source, FBGN) %>%
summarise(MeanTPM = mean(TPM), se = std(TPM),
Mean_polysome_over_input = mean(polysome_over_input), se = std(polysome_over_input)) %>%
mutate()
tpms_long_mean$MeanTPMpmError = paste0(round(signif(tpms_long_mean$MeanTPM, digits = 3), digits = 1), "Â±",
round(signif(tpms_long_mean$se, digits = 3), digits = 1))
tpms_long_mean
polysome_ratios_mean
polysome_ratios_mean$MeanTPMpmError = paste0(round(signif(polysome_ratios_mean$MeanTPM, digits = 3), digits = 1), "Â±",
round(signif(polysome_ratios_mean$se, digits = 3), digits = 1))
polysome_ratios_mean$Genotype = factor(polysome_ratios_mean$Genotype,
levels = c("TKV", "BamRNAi", "BamHSbam", "youngWT"))
polysome_ratios_mean$MeanTPMpmError = paste0(round(signif(polysome_ratios_mean$MeanTPM, digits = 3), digits = 1), "Â±",
round(signif(polysome_ratios_mean$se, digits = 3), digits = 1))
polysome_ratios_mean = polysome_ratios %>%
group_by(Genotype, Source, FBGN) %>%
summarise(MeanTPM = mean(TPM), se = std(TPM),
Mean_polysome_over_input = mean(polysome_over_input), se = std(polysome_over_input)) %>%
mutate()
polysome_ratios_mean
polysome_ratios_mean$Genotype
unique(polysome_ratios_mean$Genotype)
polysome_ratios_mean$Genotype = factor(polysome_ratios_mean$Genotype,
levels = c("TKV", "BamRNAi", "BamHSbam", "youngWT"))
tpms_wide_mean = tpms_long_mean %>%
arrange(Genotype) %>%
dplyr::select(-se) %>%
pivot_wider(names_from = c(Genotype, Source), values_from = c(MeanTPM, MeanTPMpmError))
tpms_wide_mean = polysome_ratios_mean %>%
arrange(Genotype) %>%
dplyr::select(-se) %>%
pivot_wider(names_from = c(Genotype, Source), values_from = c(MeanTPM, MeanTPMpmError))
plot(1)
data.seq = readRDS("Preprocessed_data/preprocessed_RNA_seq_data.RDS") #data from preprocessed tpms (binned/organized)
expression_unit = "TPM"
setwd("E:/Documents/Developmental-Landscape/ShinyExpresionMap")
data.seq = readRDS("Preprocessed_data/preprocessed_RNA_seq_data.RDS") #data from preprocessed tpms (binned/organized)
expression_unit = "TPM"
all.colors = data.seq[data.seq$symbol %in% "pgc", names(data.seq) %in% bins]
pal <- c(
"Black" = "Black",
"Very High" = "#19FFFF",
"High" = "#6FFFFF",
"Med" = "#98FFFF",
"Low" = "#B2FFFF",
"Very Low" = "#E0FFFF",
"None" = "#ECFFFF"
)
bins = c("TKVbin1", "Bambin1", "Cystbin1", "Virginbin1")
all.colors = data.seq[data.seq$symbol %in% "pgc", names(data.seq) %in% bins]
all.colors
temp = list.files(path = "fastqs/STAR_processed_files/", pattern = "*ReadsPerGene.out.tab$", recursive = TRUE)
data.table(temp)
setwd("E:/Documents/Developmental-Landscape")
temp = list.files(path = "fastqs/STAR_processed_files/", pattern = "*ReadsPerGene.out.tab$", recursive = TRUE)
data.table(temp)
library(data.table)
library(stringr)
library(tidyverse)
temp = list.files(path = "fastqs/STAR_processed_files/", pattern = "*ReadsPerGene.out.tab$", recursive = TRUE)
data.table(temp)
pick = temp[] #pick or reorder featurecounts
data.table(pick)
temp_names = unlist(strsplit(pick, 'ReadsPerGene.out.tab'))
picked_names = unlist(strsplit(temp_names, '/'))[seq(2, length(temp_names)*2, 2)]
picked_names
myfiles = lapply(paste0("fastqs/STAR_processed_files/", pick),
read.delim,
stringsAsFactors = F,
header = F)
allseq = data.frame(myfiles)
rownames(allseq) = allseq[[1]]
allseq = allseq[c(seq(from = 4, to = length(allseq), by = 4))]
colnames(allseq) = picked_names
allseq = allseq[-(1:4),]
head(allseq)
####TPM####
tpm = function(counts, lengths) {
rate = counts / lengths
rate / sum(rate) * 1e6
}
featLens = read.table(file = "TPMs/Feature_lengths_dm6ensgene.tabular",  header = TRUE, stringsAsFactors = FALSE)
is_input = !is.na(str_extract(picked_names, "input"))
tpms = data.frame(apply(X = allseq, 2, tpm, lengths=featLens[[2]]))
rownames(tpms) = rownames(allseq)
tpms_inputs = tpms[is_input]
tpms_inputs
tpms_inputs_tib = as_tibble(data.frame(FBGN = rownames(tpms_inputs), tpms_inputs))
head(tpms_inputs_tib)
write_rds(tpms_inputs_tib, "ShinyExpresionMap/raw_tpms_input.rds")
write_rds(tpms_inputs_tib, "ShinyExpresionMap/Preprocessed_data/raw_tpms_input.rds")
tpms_inputs_long = tpms_inputs_tib %>% pivot_longer(cols = -FBGN, names_to = "Genotype", values_to = "TPM")
groups = unlist(strsplit(tpms_inputs_long$Genotype, '*_[0-9]'))
tpms_inputs_long$Group = groups
std <- function(x) sd(x)/sqrt(length(x))
tpms_long_mean = tpms_inputs_long %>%
group_by(Group, FBGN) %>%
summarise(MeanTPM = mean(TPM), se = std(TPM))
tpms_long_mean$MeanTPMpmError = paste0(round(signif(tpms_long_mean$MeanTPM, digits = 3), digits = 1), "Â±",
round(signif(tpms_long_mean$se, digits = 3), digits = 1))
tpms_long_mean$Group = factor(tpms_long_mean$Group,
levels = c("TKV_input", "BamRNAi_input", "BamHSbam_input", "youngWT_input", "pelo_cyo_input"))
tpms_wide_mean = tpms_long_mean %>%
arrange(Group) %>%
dplyr::select(-se) %>%
pivot_wider(names_from = Group, values_from = c(MeanTPM, MeanTPMpmError))
saveRDS(tpms_wide_mean, file = "TPMs/Mean_TPMs_and_text.RDS")
fbgn_to_symbol =  function(fbid){
AnnotationDbi::select(org.Dm.eg.db, fbid,
columns=c("SYMBOL"),
keytype="FLYBASE")
}
tpms_wide_mean$FBGN = as.character(tpms_wide_mean$FBGN)
Symbol = fbgn_to_symbol(tpms_wide_mean$FBGN)[[2]]
fbgn_to_symbol =  function(fbid){
AnnotationDbi::select(org.Dm.eg.db, fbid,
columns=c("SYMBOL"),
keytype="FLYBASE")
}
tpms_wide_mean$FBGN = as.character(tpms_wide_mean$FBGN)
Symbol = fbgn_to_symbol(tpms_wide_mean$FBGN)[[2]]
tpms_wide_mean$FBGN
fbgn_to_symbol(tpms_wide_mean$FBGN)
library(org.Dm.eg.db)
fbgn_to_symbol =  function(fbid){
AnnotationDbi::select(org.Dm.eg.db, fbid,
columns=c("SYMBOL"),
keytype="FLYBASE")
}
tpms_wide_mean$FBGN = as.character(tpms_wide_mean$FBGN)
Symbol = fbgn_to_symbol(tpms_wide_mean$FBGN)[[2]]
tpms_wide_mean$symbol = Symbol
temp = list.files(path = "fastqs/STAR_processed_files/", pattern = "*ReadsPerGene.out.tab$", recursive = TRUE)
data.table(temp)
pick = temp[] #pick or reorder featurecounts
data.table(pick)
temp_names = unlist(strsplit(pick, 'ReadsPerGene.out.tab'))
picked_names = unlist(strsplit(temp_names, '/'))[seq(2, length(temp_names)*2, 2)]
picked_names
groups = strsplit(picked_names, '*_[0-9]')
myfiles = lapply(paste0("fastqs/STAR_processed_files/", pick),
read.delim,
stringsAsFactors = F,
header = F)
allseq = data.frame(myfiles)
rownames(allseq) = allseq[[1]]
allseq = allseq[c(seq(from = 4, to = length(allseq), by = 4))]
colnames(allseq) = picked_names
allseq = allseq[-(1:4),] #remove header/summary rows
####TPM####
tpm = function(counts, lengths) {
rate = counts / lengths
rate / sum(rate) * 1e6
}
featLens = read.table(file = "TPMs/Feature_lengths_dm6ensgene.tabular",
header = TRUE,
stringsAsFactors = FALSE)
tpms_all = data.table(apply(X = allseq, 2, tpm, lengths=featLens[[2]]))
rownames(tpms_all) = rownames(allseq)
tpms_all_tib = as_tibble(data.frame(FBGN = rownames(tpms_all), tpms_all))
head(tpms_all_tib)
tpms_all_long = tpms_all_tib %>%
pivot_longer(
cols = -FBGN,
names_to = c("Genotype", "Source", "Replicate"),
names_sep  = "_",
values_to = "TPM"
)
polysome_ratios = tpms_all_long %>%
group_by(FBGN, Genotype, Replicate) %>%
mutate(polysome_over_input = (TPM+1)/(TPM[Source=="input"]+1))
std <- function(x) sd(x)/sqrt(length(x))
polysome_ratios_mean = polysome_ratios %>%
group_by(Genotype, Source, FBGN) %>%
summarise(MeanTPM = mean(TPM), se = std(TPM),
Mean_polysome_over_input = mean(polysome_over_input), se = std(polysome_over_input)) %>%
mutate()
tpms_long_mean$MeanTPMpmError = paste0(round(signif(tpms_long_mean$MeanTPM, digits = 3), digits = 1), "Â±",
round(signif(tpms_long_mean$se, digits = 3), digits = 1))
tpms_all_long
tpms_long_mean = tpms_all_long %>%
group_by(FBGN, Genotype, Source) %>%
mutate(MeanTPM = mean(TPM),
se = std(TPM))
tpms_long_mean$MeanTPMpmError = paste0(round(signif(tpms_long_mean$MeanTPM, digits = 3), digits = 1), "Â±",
round(signif(tpms_long_mean$se, digits = 3), digits = 1))
tpms_long_mean
saveRDS(tpms_wide_mean, file = "TPMs/All_Mean_TPMs_and_text.RDS")
tpms_long_mean$Genotype = factor(tpms_long_mean$Genotype,
levels = c("TKV", "BamRNAi", "BamHSbam", "youngWT"))
tpms_wide_mean = tpms_long_mean %>%
arrange(Genotype) %>%
dplyr::select(-se) %>%
pivot_wider(names_from = c(Genotype, Source), values_from = c(MeanTPM, MeanTPMpmError))
saveRDS(tpms_wide_mean, file = "TPMs/All_Mean_TPMs_and_text.RDS")
tpms_wide_mean
tpms_wide_mean = tpms_long_mean %>%
arrange(Genotype) %>%
dplyr::select(-se) %>%
pivot_wider(id_cols = FBGN, names_from = c(Genotype, Source), values_from = c(MeanTPM, MeanTPMpmError))
tpms_wide_mean
tpms_long_mean
tpms_long_mean %>%
arrange(Genotype) %>%
dplyr::select(-se, -TPM, -Replicate)
tpms_long_mean
tpms_long_mean %>%
arrange(Genotype) %>%
dplyr::select(-se, -TPM, -Replicate)
tpms_wide_mean = tpms_long_mean %>%
arrange(Genotype) %>%
dplyr::select(-se, -TPM, -Replicate) %>%
pivot_wider(names_from = c(Genotype, Source), values_from = c(MeanTPM, MeanTPMpmError))
tpms_wide_mean
tpms_long_mean %>%
arrange(Genotype) %>%
dplyr::select(-se) %>%
distinct(
)
tpms_long_mean %>%
arrange(Genotype) %>%
dplyr::select(-se, -Replicate) %>%
distinct()
View(tpms_long_mean)
tpms_wide_mean = tpms_long_mean %>%
arrange(Genotype) %>%
dplyr::select(-se, -Replicate, -TPM) %>%
distinct() %>%
pivot_wider(names_from = c(Genotype, Source), values_from = c(MeanTPM, MeanTPMpmError))
tpms_wide_mean
tpms_long_mean %>%
arrange(Genotype) %>%
dplyr::select(-se, -Replicate, -TPM) %>%
distinct()
saveRDS(tpms_wide_mean, file = "TPMs/All_Mean_TPMs_and_text.RDS")
tpms_all_long
tpms_all_long$Genotype = factor(tpms_all_long$Genotype,
levels = c("TKV", "BamRNAi", "BamHSbam", "youngWT"))
polysome_ratios = tpms_all_long %>%
group_by(FBGN, Genotype, Replicate) %>%
mutate(polysome_over_input = (TPM+1)/(TPM[Source=="input"]+1))
polysome_ratios
std <- function(x) sd(x)/sqrt(length(x))
polysome_ratios_mean = polysome_ratios %>%
group_by(Genotype, Source, FBGN) %>%
summarise(MeanTPM = mean(TPM), se = std(TPM),
Mean_polysome_over_input = mean(polysome_over_input), se = std(polysome_over_input)) %>%
mutate()
polysome_ratios_mean
tpms_wide_mean %>%
arrange(color) %>%
ggplot(aes(x=log2(MeanTPM_youngWT_input+1), y=log2(MeanTPM_youngWT_polysome)+1), color=color)+
geom_point()+
scale_color_manual(values = c("nontarget" = "black",
"RP" = "darkred"))+
xlim(c(0,16))+
ylim(c(0,16))
mean_log2_polysome_input_ratio =
tpms_all_long %>%
group_by(FBGN, Genotype, Replicate) %>%
mutate(Log2_Plus1_Polysome_Input_Ratio = log2(TPM+1)-log2(TPM[Source=="input"])+1) %>%
filter(Source == "polysome") %>%
select(-c(Source, TPM)) %>%
group_by(FBGN, Genotype) %>%
summarise(Mean_Log2_Plus1_Polysome_Input_Ratio = mean(Log2_Plus1_Polysome_Input_Ratio)) %>%
arrange(Genotype) %>%
pivot_wider(names_from = Genotype, values_from = Mean_Log2_Plus1_Polysome_Input_Ratio)
rp = read.xlsx("../RibosomeBiogen/PolysomeSeq/RPs.xlsx")
test =
mean_log2_polysome_input_ratio %>%
filter(FBGN %in% rp[[1]]) %>%
pivot_longer(cols = -FBGN, names_to = "Genotype", values_to = "TE")
test$Genotype = factor(test$Genotype,
levels = c("TKV", "BamRNAi", "BamHSbam", "youngWT", "peloCyo"))
ggplot(test, aes(Genotype, TE))+
geom_boxplot()+
geom_point()
tpms_wide_mean$color = "nontarget"
tpms_wide_mean$color[tpms_wide_mean$FBGN %in% rp[[1]]] = "RP"
