egg.coll
egg.summ = egg.raw %>% group_by(Genotype) %>% dplyr::summarize(MeanCount=mean(Count), Error=std(Count))
egg.summ
egg.summ
egg.coll
egg.raw
std = function(x) sd(x)/sqrt(length(x))
egg.coll =  egg.raw %>% group_by(Genotype, Trial) %>% dplyr::summarise(per72=mean(Count))
egg.coll
egg.summ
egg.summ =
egg.raw %>%
group_by(Genotype, Trial) %>%
dplyr::summarize(MeanCount=mean(Count), Error=std(Count))
egg.summ$Genotype = factor(egg.summ$Genotype, levels=c("UD2_NG4", "Athos", "Aramis", "Porthos"))
egg.summ
ggplot(egg.summ, aes(Genotype, MeanCount))+
geom_bar(stat =  "identity")+
geom_errorbar(data=egg.summ, mapping=aes(Genotype, ymin=MeanCount-Error, ymax=MeanCount+Error), width=.1)+
scale_y_continuous(expand = c(0,0), limits = c(0, max(egg.summ$MeanCount+egg.summ$Error)*1.1))+
scale_x_discrete(position = "bottom", labels=c("Control", "Athos", "Aramis", "Porthos"))+
ylab("Eggs laid per day")+
theme_white()+
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
ggsave("EggLayingBarplot.pdf", width = 3, height = 2.5)
warnings
warnings()
egg.summ =
egg.raw %>%
group_by(Genotype, Trial) %>%
dplyr::summarize(MeanCount=mean(Count))
egg.summ
egg.summ =
egg.raw %>%
group_by(Genotype, Trial) %>%
dplyr::summarize(MeanCount=mean(Count)) %>%
dplyr::summarize(MeanCount=mean(MeanCount), Error=std(MeanCount))
egg.summ
egg.summ
egg.summ =
egg.raw %>%
group_by(Genotype, Trial) %>%
dplyr::summarize(MeanCount=mean(Count))
egg.summ
egg.summ
egg.summ %>% dplyr::summarize(MeanCount=mean(MeanCount), Error=std(MeanCount))
egg.summ %>% dplyr::summarize(Error=std(MeanCount))
egg.summ =
egg.raw %>%
group_by(Genotype, Trial) %>%
dplyr::summarize(MeanCount=mean(Count)) %>%
dplyr::summarize(MeanCount=mean(OverallMean), Error=std(MeanCount))
egg.summ =
egg.raw %>%
group_by(Genotype, Trial) %>%
dplyr::summarize(MeanCount=mean(Count)) %>%
dplyr::summarize(OverallMean=mean(MeanCount), Error=std(MeanCount))
egg.summ
egg.summ$Genotype = factor(egg.summ$Genotype, levels=c("UD2_NG4", "Athos", "Aramis", "Porthos"))
ggplot(egg.summ, aes(Genotype, MeanCount))+
geom_bar(stat =  "identity")+
geom_errorbar(data=egg.summ, mapping=aes(Genotype, ymin=MeanCount-Error, ymax=MeanCount+Error), width=.1)+
scale_y_continuous(expand = c(0,0), limits = c(0, max(egg.summ$MeanCount+egg.summ$Error)*1.1))+
scale_x_discrete(position = "bottom", labels=c("Control", "Athos", "Aramis", "Porthos"))+
ylab("Eggs laid per day")+
theme_white()+
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
egg.summ
ggplot(egg.summ, aes(Genotype, OverallMean))+
geom_bar(stat =  "identity")+
geom_errorbar(data=egg.summ, mapping=aes(Genotype, ymin=OverallMean-Error, ymax=OverallMean+Error), width=.1)+
scale_y_continuous(expand = c(0,0), limits = c(0, max(egg.summ$OverallMean+egg.summ$Error)*1.1))+
scale_x_discrete(position = "bottom", labels=c("Control", "Athos", "Aramis", "Porthos"))+
ylab("Eggs laid per day")+
theme_white()+
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
warnings()
ggplot(egg.summ, aes(Genotype, OverallMean))+
geom_bar(stat =  "identity")+
geom_errorbar(data=egg.summ, mapping=aes(Genotype, ymin=OverallMean-Error, ymax=OverallMean+Error), width=.1)+
scale_y_continuous(expand = c(0,0), limits = c(0, max(egg.summ$OverallMean+egg.summ$Error)*1.2))+
scale_x_discrete(position = "bottom", labels=c("Control", "Athos", "Aramis", "Porthos"))+
ylab("Eggs laid per day")+
theme_white()+
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
ggplot(egg.summ, aes(Genotype, OverallMean))+
geom_bar(stat =  "identity")+
geom_errorbar(data=egg.summ, mapping=aes(Genotype, ymin=OverallMean-Error, ymax=OverallMean+Error), width=.1)+
scale_y_continuous(expand = c(0,0),
limits = c(0, max(egg.summ$OverallMean+egg.summ$Error)*1.1),
breaks = seq(0,80,20))+
scale_x_discrete(position = "bottom", labels=c("Control", "Athos", "Aramis", "Porthos"))+
ylab("Eggs laid per day")+
theme_white()+
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
ggplot(egg.summ, aes(Genotype, OverallMean))+
geom_bar(stat =  "identity")+
geom_errorbar(data=egg.summ, mapping=aes(Genotype, ymin=OverallMean-Error, ymax=OverallMean+Error), width=.1)+
scale_y_continuous(expand = c(0,0),
limits = c(0, max(egg.summ$OverallMean+egg.summ$Error)*1.2),
breaks = seq(0,80,20))+
scale_x_discrete(position = "bottom", labels=c("Control", "Athos", "Aramis", "Porthos"))+
ylab("Eggs laid per day")+
theme_white()+
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
seq(0,80,20)
ggplot(egg.summ, aes(Genotype, OverallMean))+
geom_bar(stat =  "identity")+
geom_errorbar(data=egg.summ, mapping=aes(Genotype, ymin=OverallMean-Error, ymax=OverallMean+Error), width=.1)+
scale_y_continuous(expand = c(0,0),
limits = c(0, max(egg.summ$OverallMean+egg.summ$Error)*1.5),
breaks = seq(0,80,20))+
scale_x_discrete(position = "bottom", labels=c("Control", "Athos", "Aramis", "Porthos"))+
ylab("Eggs laid per day")+
theme_white()+
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
ggplot(egg.summ, aes(Genotype, OverallMean))+
geom_bar(stat =  "identity")+
geom_errorbar(data=egg.summ, mapping=aes(Genotype, ymin=OverallMean-Error, ymax=OverallMean+Error), width=.1)+
scale_y_continuous(expand = c(0,0),
limits = c(0, max(egg.summ$OverallMean+egg.summ$Error)*1.3),
breaks = seq(0,80,20))+
scale_x_discrete(position = "bottom", labels=c("Control", "Athos", "Aramis", "Porthos"))+
ylab("Eggs laid per day")+
theme_white()+
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
ggsave("EggLayingBarplot.pdf", width = 3, height = 2.5)
ggplot(egg.summ, aes(Genotype, OverallMean))+
geom_bar(stat =  "identity")+
geom_errorbar(data=egg.summ, mapping=aes(Genotype, ymin=OverallMean-Error, ymax=OverallMean+Error), width=.1)+
scale_y_continuous(expand = c(0,0),
limits = c(0, max(egg.summ$OverallMean+egg.summ$Error)*1.3),
breaks = seq(0,80,20))+
scale_x_discrete(position = "bottom", labels=c("Control", "Athos", "Aramis", "Porthos"))+
ylab("Eggs laid per day")+
theme_white()+
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
aspect.ratio = 1)
ggsave("EggLayingBarplot.pdf", width = 3, height = 2.5)
ggsave("EggLayingBarplot.pdf", width = 3, height = 3)
ggsave("EggLayingBarplot.pdf", width = 2.75, height = 2.75)
setwd("Y:/Data/ElliotMartin/rawdata/DevelomentLandscape/ShinyExpresionMap")
data.seq = readRDS("TPMs/Mean_TPMs_and_text.RDS")
setwd("Y:/Data/ElliotMartin/rawdata/DevelomentLandscape")
data.seq = readRDS("TPMs/Mean_TPMs_and_text.RDS")
data.seq
shiny::runApp('ShinyExpresionMap')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("scran")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("scran")
data.seq = readRDS("preprocessed_seq_data.RDS")
setwd("~/ranganlab/Data/ElliotMartin/rawdata/DevelomentLandscape")
data.seq = readRDS("preprocessed_seq_data.RDS")
readRDS("preprocessed_sf.RDS")
ps = .libPaths()
ps
data.seq = readRDS("preprocessed_seq_data.RDS") #data from preprocessed tpms (binned/organized)
setwd("/network/rit/lab/ranganlab/Data/ElliotMartin/rawdata/DevelomentLandscape/ShinyExpresionMap")
data.seq = readRDS("preprocessed_seq_data.RDS")
data.seq
Mean_TPMs_and_text <- readRDS("/network/rit/lab/ranganlab/Data/ElliotMartin/rawdata/DevelomentLandscape/TPMs/Mean_TPMs_and_text.RDS")
View(Mean_TPMs_and_text)
library(data.table)
library(stringr)
library(tidyverse)
temp = list.files(path = "fastqs/STAR_processed_files/", pattern = "*ReadsPerGene.out.tab", recursive = TRUE)
data.table(temp)
pick = temp[] #pick or reorder featurecounts
data.table(pick)
temp_names = unlist(strsplit(pick, 'ReadsPerGene.out.tab'))
picked_names = unlist(strsplit(temp_names, '/'))[seq(2, length(temp_names)*2, 2)]
myfiles = lapply(paste0("fastqs/STAR_processed_files/", pick),
read.delim,
stringsAsFactors = F,
header = F)
allseq = data.frame(myfiles)
rownames(allseq) = allseq[[1]]
allseq = allseq[c(seq(from = 4, to = length(allseq), by = 4))]
colnames(allseq) = picked_names
allseq = allseq[-(1:4),]
head(allseq)
####TPM####
tpm = function(counts, lengths) {
rate = counts / lengths
rate / sum(rate) * 1e6
}
featLens = read.table(file = "TPMs/Feature_lengths_dm6ensgene.tabular",  header = TRUE, stringsAsFactors = FALSE)
is_input = !is.na(str_extract(picked_names, "input"))
tpms = data.frame(apply(X = allseq, 2, tpm, lengths=featLens[[2]]))
rownames(tpms) = rownames(allseq)
tpms_inputs = tpms[is_input]
tpms_inputs_tib = as_tibble(data.frame(FBGN = rownames(tpms_inputs), tpms_inputs))
head(tpms_inputs_tib)
tpms_inputs_long = tpms_inputs_tib %>% pivot_longer(cols = -FBGN, names_to = "Genotype", values_to = "TPM")
groups = unlist(strsplit(tpms_inputs_long$Genotype, '*_[0-9]'))
tpms_inputs_long$Group = groups
setwd("/network/rit/lab/ranganlab/Data/ElliotMartin/rawdata/DevelomentLandscape/TPMs")
library(data.table)
library(stringr)
library(tidyverse)
temp = list.files(path = "fastqs/STAR_processed_files/", pattern = "*ReadsPerGene.out.tab", recursive = TRUE)
data.table(temp)
pick = temp[] #pick or reorder featurecounts
data.table(pick)
temp_names = unlist(strsplit(pick, 'ReadsPerGene.out.tab'))
picked_names = unlist(strsplit(temp_names, '/'))[seq(2, length(temp_names)*2, 2)]
myfiles = lapply(paste0("fastqs/STAR_processed_files/", pick),
read.delim,
stringsAsFactors = F,
header = F)
allseq = data.frame(myfiles)
rownames(allseq) = allseq[[1]]
allseq = allseq[c(seq(from = 4, to = length(allseq), by = 4))]
colnames(allseq) = picked_names
allseq = allseq[-(1:4),]
head(allseq)
####TPM####
tpm = function(counts, lengths) {
rate = counts / lengths
rate / sum(rate) * 1e6
}
featLens = read.table(file = "TPMs/Feature_lengths_dm6ensgene.tabular",  header = TRUE, stringsAsFactors = FALSE)
is_input = !is.na(str_extract(picked_names, "input"))
tpms = data.frame(apply(X = allseq, 2, tpm, lengths=featLens[[2]]))
rownames(tpms) = rownames(allseq)
tpms_inputs = tpms[is_input]
tpms_inputs_tib = as_tibble(data.frame(FBGN = rownames(tpms_inputs), tpms_inputs))
head(tpms_inputs_tib)
tpms_inputs_long = tpms_inputs_tib %>% pivot_longer(cols = -FBGN, names_to = "Genotype", values_to = "TPM")
groups = unlist(strsplit(tpms_inputs_long$Genotype, '*_[0-9]'))
tpms_inputs_long$Group = groups
setwd("~/ranganlab/Data/ElliotMartin/rawdata/DevelomentLandscape")
temp = list.files(path = "fastqs/STAR_processed_files/", pattern = "*ReadsPerGene.out.tab", recursive = TRUE)
data.table(temp)
pick = temp[] #pick or reorder featurecounts
data.table(pick)
temp_names = unlist(strsplit(pick, 'ReadsPerGene.out.tab'))
picked_names = unlist(strsplit(temp_names, '/'))[seq(2, length(temp_names)*2, 2)]
myfiles = lapply(paste0("fastqs/STAR_processed_files/", pick),
read.delim,
stringsAsFactors = F,
header = F)
allseq = data.frame(myfiles)
rownames(allseq) = allseq[[1]]
allseq = allseq[c(seq(from = 4, to = length(allseq), by = 4))]
colnames(allseq) = picked_names
allseq = allseq[-(1:4),]
head(allseq)
####TPM####
tpm = function(counts, lengths) {
rate = counts / lengths
rate / sum(rate) * 1e6
}
featLens = read.table(file = "TPMs/Feature_lengths_dm6ensgene.tabular",  header = TRUE, stringsAsFactors = FALSE)
is_input = !is.na(str_extract(picked_names, "input"))
tpms = data.frame(apply(X = allseq, 2, tpm, lengths=featLens[[2]]))
rownames(tpms) = rownames(allseq)
tpms_inputs = tpms[is_input]
tpms_inputs_tib = as_tibble(data.frame(FBGN = rownames(tpms_inputs), tpms_inputs))
head(tpms_inputs_tib)
write_rds(tpms_inputs_tib, "ShinyExpresionMap/raw_tpms_input.rds")
setwd("/network/rit/lab/ranganlab/Data/ElliotMartin/rawdata/DevelomentLandscape/ShinyExpresionMap")
data.seq = readRDS("raw_tpms_input.rds")
data.seq
library(scran)
tpms = readRDS("raw_tpms_input.rds")
tpms_log = log2(tpms+1)
tpms
tpms[-1]
tpms_log = log2(tpms[-1]+1)
tpms_log = tibble(tpms$FBGN, log2(tpms[-1]+1))
tpms_log
tpms_log_p1 = tibble(tpms$FBGN, log2(tpms[-1]+1))
tpms_log_p1
library(scran)
clusters = quickCluster(tpms_log_p1)
tpms_log_p1 = data.frame(row.names = tpms$FBGN, log2(tpms[-1]+1))
tpms_log_p1
clusters = quickCluster(tpms_log_p1)
clusters = quickCluster(tpms_log_p1, approx=F)
install.packages("Seurat")
library(seurat)
library(Seurat)
clusters = FindAllMarkers(tpms_log_p1)
clusters = FindMarkers(tpms_log_p1)
clusters = Seurat::FindMarkers(tpms_log_p1)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("MGFR")
tpms_log_p1
head(tpms_log_p1)
colnames(tpms_log_p1)
strsplit(x = colnames(tpms_log_p1), split = [0-9])
strsplit(x = colnames(tpms_log_p1), split = *[0-9])
strsplit(x = colnames(tpms_log_p1), split = *[0-9])
strsplit(x = colnames(tpms_log_p1), split = *[0-9], perl = TRUE)
strsplit(x = colnames(tpms_log_p1), split = "*[0-9]", perl = TRUE)
strsplit(x = colnames(tpms_log_p1), split = "[0-9]", perl = TRUE)
strsplit(x = colnames(tpms_log_p1), split = "_[0-9]", perl = TRUE)
unlist(strsplit(x = colnames(tpms_log_p1), split = "_[0-9]", perl = TRUE))
data.frame(strsplit(x = colnames(tpms_log_p1), split = "_[0-9]", perl = TRUE))
unlist(strsplit(x = colnames(tpms_log_p1), split = "_[0-9]*", perl = TRUE))
unlist(strsplit(x = colnames(tpms_log_p1), split = "_[0-9]", perl = TRUE))
unlist(strsplit(x = colnames(tpms_log_p1), split = "_[0-9]..", perl = TRUE))
unlist(strsplit(x = colnames(tpms_log_p1), split = "_[0-9]", perl = TRUE))
unlist(strsplit(x = colnames(tpms_log_p1), split = "_input", perl = TRUE))
unlist(strsplit(x = colnames(tpms_log_p1), split = "_input*", perl = TRUE))
unlist(strsplit(x = colnames(tpms_log_p1), split = "_input*_[0-9]", perl = TRUE))
unlist(strsplit(x = colnames(tpms_log_p1), split = "_input*_[0-9 .]", perl = TRUE))
unlist(strsplit(x = colnames(tpms_log_p1), split = "_input*_[0-9 \.]", perl = TRUE))
unlist(strsplit(x = colnames(tpms_log_p1), split = "_input*_[0-9 \\.]", perl = TRUE))
unlist(strsplit(x = colnames(tpms_log_p1), split = "_input*_[0-9 \\.]", perl = TRUE))
unlist(strsplit(x = colnames(tpms_log_p1), split = "_input*_[0-9 \\.1]", perl = TRUE))
unlist(strsplit(x = colnames(tpms_log_p1), split = "."))
unlist(strsplit(x = colnames(tpms_log_p1), split = ".", fixed = TRUE))
unlist(strsplit(x = colnames(tpms_log_p1), split = ".1", fixed = TRUE))
unlist(strsplit(x = colnames(tpms_log_p1), split = "1.1", fixed = TRUE))
unlist(strsplit(x = colnames(tpms_log_p1), split = ".1", fixed = TRUE))
sunlist(strsplit(x = colnames(tpms_log_p1), split = "input", fixed = TRUE))
unlist(strsplit(x = colnames(tpms_log_p1), split = "input", fixed = TRUE))
unlist(strsplit(x = colnames(tpms_log_p1), split = "input", fixed = TRUE))[seq(1, 10, 2)]
unlist(strsplit(x = colnames(tpms_log_p1), split = "input", fixed = TRUE))[seq(1, 20, 2)]
unlist(strsplit(x = colnames(tpms_log_p1), split = "_input", fixed = TRUE))[seq(1, 20, 2)]
unlist(strsplit(x = colnames(tpms_log_p1), split = "_input", fixed = TRUE))[seq(1, length(tpms_log_p1), 2)]
colnames(tpms_log_p1)
unlist(strsplit(x = colnames(tpms_log_p1), split = "_input", fixed = TRUE))[seq(1, length(colnames(tpms_log_p1)), 2)]
colnames(tpms_log_p1)
length(colnames(tpms_log_p1))
seq(1, length(colnames(tpms_log_p1)), 2)
seq(1, length(colnames(tpms_log_p1)), 1)
unlist(strsplit(x = colnames(tpms_log_p1), split = "input", fixed = TRUE))[seq(1, length(colnames(tpms_log_p1)), 2)]
unlist(strsplit(x = colnames(tpms_log_p1), split = "_input", fixed = TRUE))[seq(1, 3-, 2)]
unlist(strsplit(x = colnames(tpms_log_p1), split = "_input", fixed = TRUE))[seq(1, 30, 2)]
unlist(strsplit(x = colnames(tpms_log_p1), split = "_input", fixed = TRUE))[seq(1, 40, 2)]
unlist(strsplit(x = colnames(tpms_log_p1), split = "_input", fixed = TRUE))[seq(1, 50, 2)]
c("BamHSbam", "BamHSbam", "BamHSbam", "BamHSbam", "BamRNAi",  "BamRNAi",  "BamRNAi",
"pelo_cyo", "pelo_cyo", "TKV",      "TKV",      "youngWT",  "youngWT",  "BamHSbam"
"BamHSbam", "BamHSbam", "BamHSbam", "BamRNAi",  "BamRNAi",  "BamRNAi",  "pelo_cyo"
"pelo_cyo", )
c("BamHSbam", "BamHSbam", "BamHSbam", "BamHSbam", "BamRNAi",  "BamRNAi",  "BamRNAi",
"pelo_cyo", "pelo_cyo", "TKV", "TKV", "youngWT", "youngWT",  "BamHSbam",
"BamHSbam", "BamHSbam", "BamHSbam", "BamRNAi",  "BamRNAi",  "BamRNAi",  "pelo_cyo",
"pelo_cyo", )
c("BamHSbam", "BamHSbam", "BamHSbam", "BamHSbam", "BamRNAi",  "BamRNAi",  "BamRNAi",
"pelo_cyo", "pelo_cyo", "TKV", "TKV", "youngWT", "youngWT",  "BamHSbam",
"BamHSbam", "BamHSbam", "BamHSbam", "BamRNAi",  "BamRNAi",  "BamRNAi",  "pelo_cyo",
"pelo_cyo")
samples = c("BamHSbam", "BamHSbam", "BamHSbam", "BamHSbam", "BamRNAi",  "BamRNAi",  "BamRNAi",
"pelo_cyo", "pelo_cyo", "TKV", "TKV", "youngWT", "youngWT",  "BamHSbam",
"BamHSbam", "BamHSbam", "BamHSbam", "BamRNAi",  "BamRNAi",  "BamRNAi",  "pelo_cyo",
"pelo_cyo")
getMarkerGenes.rnaseq(data.mat = tpms_log_p1, class.vec = samples)
library(MGFR)
getMarkerGenes.rnaseq(data.mat = tpms_log_p1, class.vec = samples)
runApp()
runApp()
tpms_log_p1
tpms
tpms %>%
rowwise() %>%
mutate(min(everything()))
tpms %>%
rowwise() %>%
mutate(min(everything(.)))
tpms %>%
rowwise() %>%
mutate(overall_min = min(everything(.))) %>%
select(overall_min)
tpms
tpms %>%
tpms %>%
mutate_all(overall_min = min() %>%
tpms_log_p1 = data.frame(row.names = tpms$FBGN, log2(tpms[-1]+1))
tpms %>%
rowwise()
tpms %>%
rowwise() %>%
mutate_all(overall_min = min()
)
c_across
c_across()
dplyr
dplyr()
detach("package:dplyr", unload = TRUE)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr, lib.loc = "/usr/local/lib/R/site-library")
samples = c("BamHSbam", "BamHSbam", "BamHSbam", "BamHSbam", "BamRNAi",  "BamRNAi",  "BamRNAi",
"pelo_cyo", "pelo_cyo", "BamRNAi", "BamRNAi", "youngWT", "youngWT",  "BamHSbam",
"BamHSbam", "BamHSbam", "BamHSbam", "BamRNAi",  "BamRNAi",  "BamRNAi",  "pelo_cyo",
"pelo_cyo")
getMarkerGenes.rnaseq(data.mat = tpms_log_p1, class.vec = samples)
library(MGFR)
tpms = readRDS("raw_tpms_input.rds")
tpms %>%
c_acr() %>%
mutate_all(overall_min = min()) %>%
select(overall_min)
tpms_log_p1 = data.frame(row.names = tpms$FBGN, log2(tpms[-1]+1))
tpms_log_p1
samples = c("BamHSbam", "BamHSbam", "BamHSbam", "BamHSbam", "BamRNAi",  "BamRNAi",  "BamRNAi",
"pelo_cyo", "pelo_cyo", "BamRNAi", "BamRNAi", "youngWT", "youngWT",  "BamHSbam",
"BamHSbam", "BamHSbam", "BamHSbam", "BamRNAi",  "BamRNAi",  "BamRNAi",  "pelo_cyo",
"pelo_cyo")
getMarkerGenes.rnaseq(data.mat = tpms_log_p1, class.vec = samples)
shiny::runApp()
tpms
tpms_sums = rowSums(tpms)
tpms_sums = rowSums(tpms[-1])
tpms_sums
tpms_log_p1[1]
tpms_log_p1[,1]
tpms_sums
hist(tpms_sums)
hist(tpms_sums, breaks = 1000)
hist(tpms_sums, breaks = 1000, xlim = c(0,1000))
hist(tpms_sums, breaks = 1000, xlim = c(0,10000))
hist(tpms_sums, breaks = 10000, xlim = c(0,10000))
hist(tpms_sums, breaks = 10000, xlim = c(0,1000))
hist(tpms_sums, breaks = 100000, xlim = c(0,1000))
hist(tpms_sums, breaks = 100000, xlim = c(0,10000))
hist(tpms_sums, breaks = 100000, xlim = c(0,100))
hist(tpms_log_p1)
hist(tpms_log_p1[-1])
hist(tpms_log_p1)
tpms_log_p1
tpms_sums
hist(tpms_sums[tpms_sums>0], breaks = 100000, xlim = c(0,100))
hist(tpms_sums[tpms_sums>5], breaks = 100000, xlim = c(0,100))
hist(tpms_sums[tpms_sums>5], breaks = 100000, xlim = c(0,1000))
hist(tpms_sums[tpms_sums>10], breaks = 100000, xlim = c(0,1000))
hist(tpms_sums[tpms_sums>100], breaks = 100000, xlim = c(0,1000))
hist(tpms_sums[tpms_sums>200], breaks = 100000, xlim = c(0,1000))
hist(tpms_sums[tpms_sums>200], breaks = 100000, xlim = c(0,10000))
hist(tpms_sums[tpms_sums>200], breaks = 100000, xlim = c(0,10000), ylim = c(0,50))
hist(tpms_sums, breaks = 100000, xlim = c(0,10000), ylim = c(0,50))
tpms_log_p1[,tpms_sums>200]
tpms_log_p1[1,tpms_sums>200]
tpms_sums>200
tpms_log_p1[,(tpms_sums>200)]
tpms_log_p1[,c(tpms_sums>200)]
tpms_log_p1[,1]
tpms_log_p1[,c(1,2)]
tpms_log_p1[tpms_sums>200,]
tpms_log_p1_expr = tpms_log_p1[tpms_sums>200,]
getMarkerGenes.rnaseq(data.mat = tpms_log_p1_expr, class.vec = samples)
runApp()
hist(tpms[2], breaks = 100000, xlim = c(0,10000), ylim = c(0,50))
hist(tpms[,2], breaks = 100000, xlim = c(0,10000), ylim = c(0,50))
hist(tpms[2,], breaks = 100000, xlim = c(0,10000), ylim = c(0,50))
tpms
tpms[2,]
tpms[,2]
tpms[[2]]
hist(tpms[[2]], breaks = 100000, xlim = c(0,10000), ylim = c(0,50))
hist(tpms[[2]], breaks = 100000, xlim = c(0,1000), ylim = c(0,50))
hist(tpms[[2]], breaks = 100000)
hist(tpms[[2]], breaks = 10000)
hist(tpms[[2]], breaks = 10000)0
hist(log2(tpms[[2]]+1))
hist(log2(tpms[[2]]+1), breaks = 100)
hist(log2(tpms[[2]]+1), breaks = 1000)
hist(log2(tpms[[2]]+1), breaks = 1000, xlim = c(0,5))
hist(log2(tpms[[2]]+1), breaks = 1000, xlim = c(0,1))
hist(log2(tpms[[2]]+1), breaks = 10000, xlim = c(0,1))
hist(log2(tpms[[2]]+1), breaks = 1000)
hist(tpms_log_p1_expr[[2]], breaks = 1000)
hist(tpms_log_p1_expr[[3]], breaks = 1000)
hist(tpms_log_p1_expr[[1]], breaks = 1000)
hist(tpms_log_p1_expr[[2]], breaks = 1000)
hist(tpms_log_p1_expr[[3]], breaks = 1000)
hist(tpms_log_p1_expr[[4]], breaks = 1000)
hist(tpms_log_p1_expr[[5]], breaks = 1000)
hist(tpms_log_p1_expr[[6]], breaks = 1000)
tpms_log_p1_expr
head(tpms_log_p1_expr)
hist(tpms_log_p1_expr[[1]], breaks = 1000)
hist(tpms_log_p1_expr[[2]], breaks = 1000)
hist(tpms_log_p1_expr[[3]], breaks = 1000)
hist(tpms_log_p1_expr[[4]], breaks = 1000)
hist(tpms_log_p1_expr[[5]], breaks = 1000)
hist(tpms_log_p1_expr[[6]], breaks = 1000)
hist(tpms_log_p1_expr[[7]], breaks = 1000)
hist(tpms_log_p1_expr[[8]], breaks = 1000)
hist(tpms_log_p1_expr[[9]], breaks = 1000)
getMarkerGenes.rnaseq(data.mat = tpms_log_p1_expr, class.vec = samples, samples2compare = c("TKV", "BamRNAi"))
samples = c("BamHSbam", "BamHSbam", "BamHSbam", "BamHSbam", "BamRNAi",  "BamRNAi",  "BamRNAi",
"pelo_cyo", "pelo_cyo", "TKV", "TKV", "youngWT", "youngWT",  "BamHSbam",
"BamHSbam", "BamHSbam", "BamHSbam", "BamRNAi",  "BamRNAi",  "BamRNAi",  "pelo_cyo",
"pelo_cyo")
getMarkerGenes.rnaseq(data.mat = tpms_log_p1_expr, class.vec = samples, samples2compare = c("TKV", "BamRNAi"))
runApp('~/ranganlab/Data/ElliotMartin/rawdata/DevelomentLandscape/ShinyExpresionMap')
getMarkerGenes.rnaseq(data.mat = tpms_log_p1_expr, class.vec = samples, samples2compare = c("TKV", "BamRNAi"), score.cutoff = 0.2)
getMarkerGenes.rnaseq(data.mat = tpms_log_p1_expr, class.vec = samples, samples2compare = c("TKV", "BamRNAi"), score.cutoff = 0.2)
runApp()
getMarkerGenes.rnaseq
tpms
getMarkerGenes.rnaseq(data.mat = tpms, class.vec = samples, samples2compare = c("TKV", "BamRNAi"), score.cutoff = 0.2)
getMarkerGenes.rnaseq(data.mat = tpms[-1], class.vec = samples, samples2compare = c("TKV", "BamRNAi"), score.cutoff = 0.2)
tpms_df = data.frame(row.names = tpms[1], tpms[-1])
tpms[1]
tpms[-1]
tpms_df = data.frame(row.names = tpms[[1]], tpms[-1])
getMarkerGenes.rnaseq(data.mat = tpms_df, class.vec = samples, samples2compare = c("TKV", "BamRNAi"), score.cutoff = 0.2)
getMarkerGenes.rnaseq(data.mat = tpms_df, class.vec = samples, score.cutoff = 0.2)
runApp()
tpms_exp_df = tpms_df[tpms_sums>10, ]
getMarkerGenes.rnaseq(data.mat = tpms_exp_df, class.vec = samples, score.cutoff = 0.2)
runApp('~/ranganlab/Data/ElliotMartin/rawdata/DevelomentLandscape/ShinyExpresionMap')
