lapply(sheets_names, convert_sc_symbol_to_FBGN)
setwd("E:/Documents/Developmental-Landscape")
library(tidyverse)
library(openxlsx)
convert_sc_symbol_to_FBGN = function(sheet_name){
# Conversion table from Maija
conversion_table = read_tsv("Normalized_expression/Symbol_to_FBID_table_sc_seq.tsv", col_names = c("FBGN", "Symbol"))
# Clusterwise expression data
single_cell_data = read.xlsx("Normalized_expression/SC_seq_expression.xlsx", sheet = sheet_name)
# Clean up names and generate bins
single_cell_data_converted = left_join(x = single_cell_data, y = conversion_table, by = c("X1"="Symbol")) %>%
rename(Symbol=X1) %>%
relocate(FBGN, .before = Symbol) %>%
pivot_longer(-c(FBGN, Symbol), names_to = "Stage", values_to = "Expression") %>%
dplyr::group_by(Symbol, Stage) %>%
mutate(bin = cut(as.numeric(Expression),
breaks = c(-1,0.05,0.25,0.5,2.5,25,200),
labels=c("None","Very Low","Low","Med","High","Very High"))) %>%
pivot_wider(id_cols = Symbol, names_from = Stage, values_from = c(Expression, bin))
# save results as RDS object
write_rds(single_cell_data_converted,
paste0("ShinyExpresionMap/Preprocessed_data/preprocessed_single_cell_seq_data_", sheet_name,".RDS"))
}
# apply convert_sc_symbol_to_FBGN to each sheet of single cell data
sheets_names = getSheetNames("Normalized_expression/SC_seq_expression.xlsx")
lapply(sheets_names, convert_sc_symbol_to_FBGN)
runApp('ShinyExpresionMap')
runApp('ShinyExpresionMap')
merge_plot
View(merge_plot)
library(sf)
library(tidyverse)
lines = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_lines_v3")
shape = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_poly_v3")
lines$cell_type = "line"
lines$region = "line"
lines$color = "line"
shape$color = "White"
line.plot = data.frame(lines) %>% select(-path)
shape.plot = data.frame(shape)
merge_plot = rbind(shape.plot, line.plot)
merge_plot$color = factor(merge_plot$color,
c("line", "None", "Very Low", "Low", "Med", "High", "Very High", "Black", "White"))
dev_order = c("GSC", "CB", "2CC", "4CC", "8CC",
"16CC_2A1", "16CC_2A2", "16CC_2AB", "16CC_2B", "16CC_3", "ST2",
"CC", "cap_cells", "pre-stalk", "EC_a", "EC_c", "EC_p", "polar", "FSC", "stalk", "background", "line")
shape = shape %>% arrange(match(cell_type, dev_order))
merge_plot =
merge_plot %>%
group_by(cell_type) %>%
mutate(region = factor(region, c("line", "germline", "soma", "background"))) %>%
ungroup() %>%
arrange(match(cell_type, dev_order)) %>%
mutate(cell_type = factor(cell_type, unique(cell_type)))
saveRDS(merge_plot, "ShinyExpresionMap/Preprocessed_data/preprocessed_sf.RDS", compress = TRUE)
saveRDS(shape, "ShinyExpresionMap/Preprocessed_data/preloaded_shape.RDS", compress = TRUE)
setwd("E:/Documents/Developmental-Landscape")
library(sf)
library(tidyverse)
lines = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_lines_v3")
shape = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_poly_v3")
lines$cell_type = "line"
lines$region = "line"
lines$color = "line"
shape$color = "White"
line.plot = data.frame(lines) %>% select(-path)
shape.plot = data.frame(shape)
merge_plot = rbind(shape.plot, line.plot)
merge_plot$color = factor(merge_plot$color,
c("line", "None", "Very Low", "Low", "Med", "High", "Very High", "Black", "White"))
dev_order = c("GSC", "CB", "2CC", "4CC", "8CC",
"16CC_2A1", "16CC_2A2", "16CC_2AB", "16CC_2B", "16CC_3", "ST2",
"CC", "cap_cells", "pre-stalk", "EC_a", "EC_c", "EC_p", "polar", "FSC", "stalk", "background", "line")
shape = shape %>% arrange(match(cell_type, dev_order))
merge_plot =
merge_plot %>%
group_by(cell_type) %>%
mutate(region = factor(region, c("line", "germline", "soma", "background"))) %>%
ungroup() %>%
arrange(match(cell_type, dev_order)) %>%
mutate(cell_type = factor(cell_type, unique(cell_type)))
saveRDS(merge_plot, "ShinyExpresionMap/Preprocessed_data/preprocessed_sf.RDS", compress = TRUE)
saveRDS(shape, "ShinyExpresionMap/Preprocessed_data/preloaded_shape.RDS", compress = TRUE)
setwd("E:/Documents/Developmental-Landscape/ShinyExpresionMap/Preprocessing_scripts")
runApp('E:/Documents/Developmental-Landscape/ShinyExpresionMap')
setwd("E:/Documents/Developmental-Landscape")
library(sf)
library(tidyverse)
lines = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_lines_v3")
runApp('ShinyExpresionMap')
library(sf)
library(tidyverse)
lines = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_lines_v3")
shape = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_poly_v3")
lines$cell_type = "line"
lines$region = "line"
lines$color = "line"
shape$color = "White"
line.plot = data.frame(lines) %>% select(-path)
shape.plot = data.frame(shape)
merge_plot = rbind(shape.plot, line.plot)
merge_plot$color = factor(merge_plot$color,
c("line", "None", "Very Low", "Low", "Med", "High", "Very High", "Black", "White"))
dev_order = c("GSC", "CB", "2CC", "4CC", "8CC",
"16CC_2A1", "16CC_2A2", "16CC_2AB", "16CC_2B", "16CC_3", "ST2",
"CC", "cap_cells", "pre-stalk", "EC_a", "EC_c", "EC_p", "polar", "FSC", "stalk", "background", "line")
shape = shape %>% arrange(match(cell_type, dev_order))
merge_plot =
merge_plot %>%
group_by(cell_type) %>%
mutate(region = factor(region, c("line", "germline", "soma", "background"))) %>%
ungroup() %>%
arrange(match(cell_type, dev_order)) %>%
mutate(cell_type = factor(cell_type, unique(cell_type)))
saveRDS(merge_plot, "ShinyExpresionMap/Preprocessed_data/preprocessed_sf.RDS", compress = TRUE)
saveRDS(shape, "ShinyExpresionMap/Preprocessed_data/preloaded_shape.RDS", compress = TRUE)
lines = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_lines_v3")
shape = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_poly_v3")
lines$cell_type = "line"
lines$region = "line"
lines$color = "line"
shape$color = "White"
line.plot = data.frame(lines) %>% select(-path)
line.plot
data.frame(lines)
library(sf)
library(tidyverse)
lines = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_lines_v3")
shape = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_poly_v3")
lines$cell_type = "line"
lines$region = "line"
lines$color = "line"
shape$color = "White"
line.plot = data.frame(lines)
shape.plot = data.frame(shape)
merge_plot = rbind(shape.plot, line.plot)
merge_plot$color = factor(merge_plot$color,
c("line", "None", "Very Low", "Low", "Med", "High", "Very High", "Black", "White"))
dev_order = c("GSC", "CB", "2CC", "4CC", "8CC",
"16CC_2A1", "16CC_2A2", "16CC_2AB", "16CC_2B", "16CC_3", "ST2",
"CC", "cap_cells", "pre-stalk", "EC_a", "EC_c", "EC_p", "polar", "FSC", "stalk", "background", "line")
shape = shape %>% arrange(match(cell_type, dev_order))
merge_plot =
merge_plot %>%
group_by(cell_type) %>%
mutate(region = factor(region, c("line", "germline", "soma", "background"))) %>%
ungroup() %>%
arrange(match(cell_type, dev_order)) %>%
mutate(cell_type = factor(cell_type, unique(cell_type)))
saveRDS(merge_plot, "ShinyExpresionMap/Preprocessed_data/preprocessed_sf.RDS", compress = TRUE)
saveRDS(shape, "ShinyExpresionMap/Preprocessed_data/preloaded_shape.RDS", compress = TRUE)
runApp('ShinyExpresionMap')
library(sf)
library(tidyverse)
lines = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_lines_v3")
shape = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_poly_v3")
lines$cell_type = "line"
lines$region = "line"
lines$color = "line"
shape$color = "White"
line.plot = data.frame(lines)
shape.plot = data.frame(shape)
merge_plot = rbind(shape.plot, line.plot)
merge_plot$color = factor(merge_plot$color,
c("line", "None", "Very Low", "Low", "Med", "High", "Very High", "Black", "White"))
dev_order = c("GSC", "CB", "2CC", "4CC", "8CC",
"16CC_2A1", "16CC_2A2", "16CC_2AB", "16CC_2B", "16CC_3", "ST2",
"CC", "cap_cells", "pre-stalk", "EC_a", "EC_c", "EC_p", "polar", "FSC", "stalk", "background", "line")
shape = shape %>% arrange(match(cell_type, dev_order))
merge_plot =
merge_plot %>%
group_by(cell_type) %>%
mutate(region = factor(region, c("line", "germline", "soma", "background"))) %>%
ungroup() %>%
arrange(match(cell_type, dev_order)) %>%
mutate(cell_type = factor(cell_type, unique(cell_type)))
saveRDS(merge_plot, "ShinyExpresionMap/Preprocessed_data/preprocessed_sf.RDS", compress = TRUE)
saveRDS(shape, "ShinyExpresionMap/Preprocessed_data/preloaded_shape.RDS", compress = TRUE)
runApp('ShinyExpresionMap')
lines = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_lines_v3")
lines
lines = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_lines_v3")
shape = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_poly_v3")
lines$cell_type = "line"
lines$region = "line"
lines$color = "line"
shape$color = "White"
line.plot = data.frame(lines)
shape.plot = data.frame(shape)
merge_plot = rbind(shape.plot, line.plot)
line.plot
library(sf)
library(tidyverse)
lines = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_lines_v3")
shape = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_poly_v3")
lines$cell_type = "line"
lines$region = "line"
lines$color = "line"
shape$color = "White"
line.plot = data.frame(lines) %>% select(-path)
shape.plot = data.frame(shape)
merge_plot = rbind(shape.plot, line.plot)
merge_plot$color = factor(merge_plot$color,
c("line", "None", "Very Low", "Low", "Med", "High", "Very High", "Black", "White"))
dev_order = c("GSC", "CB", "2CC", "4CC", "8CC",
"16CC_2A1", "16CC_2A2", "16CC_2AB", "16CC_2B", "16CC_3", "ST2",
"CC", "cap_cells", "pre-stalk", "EC_a", "EC_c", "EC_p", "polar", "FSC", "stalk", "background", "line")
shape = shape %>% arrange(match(cell_type, dev_order))
merge_plot =
merge_plot %>%
group_by(cell_type) %>%
mutate(region = factor(region, c("line", "germline", "soma", "background"))) %>%
ungroup() %>%
arrange(match(cell_type, dev_order)) %>%
mutate(cell_type = factor(cell_type, unique(cell_type)))
saveRDS(merge_plot, "ShinyExpresionMap/Preprocessed_data/preprocessed_sf.RDS", compress = TRUE)
saveRDS(shape, "ShinyExpresionMap/Preprocessed_data/preloaded_shape.RDS", compress = TRUE)
runApp('ShinyExpresionMap')
merge_plot
data.seq = readRDS("Preprocessed_data/preprocessed_single_cell_seq_data_germarium_soma.RDS") #data from preprocessed  somaSC-seq (binned/organized)
setwd("E:/Documents/Developmental-Landscape/ShinyExpresionMap")
data.seq = readRDS("Preprocessed_data/preprocessed_single_cell_seq_data_germarium_soma.RDS") #data from preprocessed  somaSC-seq (binned/organized)
data.seq
names(data.seq)
merge_plot
merge_plot$cell_type
library(sf)
library(tidyverse)
lines = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_lines_v3")
shape = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_poly_v3")
lines$cell_type = "line"
lines$region = "line"
lines$color = "line"
shape$color = "White"
line.plot = data.frame(lines) %>% select(-path)
shape.plot = data.frame(shape)
merge_plot = rbind(shape.plot, line.plot)
merge_plot$color = factor(merge_plot$color,
c("line", "None", "Very Low", "Low", "Med", "High", "Very High", "Black", "White"))
dev_order = c("GSC", "CB", "2CC", "4CC", "8CC",
"16CC_2A1", "16CC_2A2", "16CC_2AB", "16CC_2B", "16CC_3", "ST2",
"TF/CC", "EC_a", "EC_c", "EC_p", "FSC", "pre-stalk", "stalk", "polar", "background", "line")
shape = shape %>% arrange(match(cell_type, dev_order))
merge_plot =
merge_plot %>%
group_by(cell_type) %>%
mutate(region = factor(region, c("line", "germline", "soma", "background"))) %>%
ungroup() %>%
arrange(match(cell_type, dev_order)) %>%
mutate(cell_type = factor(cell_type, unique(cell_type)))
saveRDS(merge_plot, "ShinyExpresionMap/Preprocessed_data/preprocessed_sf.RDS", compress = TRUE)
saveRDS(shape, "ShinyExpresionMap/Preprocessed_data/preloaded_shape.RDS", compress = TRUE)
setwd("E:/Documents/Developmental-Landscape")
library(sf)
library(tidyverse)
lines = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_lines_v3")
shape = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_poly_v3")
lines$cell_type = "line"
lines$region = "line"
lines$color = "line"
shape$color = "White"
line.plot = data.frame(lines) %>% select(-path)
shape.plot = data.frame(shape)
merge_plot = rbind(shape.plot, line.plot)
merge_plot$color = factor(merge_plot$color,
c("line", "None", "Very Low", "Low", "Med", "High", "Very High", "Black", "White"))
dev_order = c("GSC", "CB", "2CC", "4CC", "8CC",
"16CC_2A1", "16CC_2A2", "16CC_2AB", "16CC_2B", "16CC_3", "ST2",
"TF/CC", "EC_a", "EC_c", "EC_p", "FSC", "pre-stalk", "stalk", "polar", "background", "line")
shape = shape %>% arrange(match(cell_type, dev_order))
merge_plot =
merge_plot %>%
group_by(cell_type) %>%
mutate(region = factor(region, c("line", "germline", "soma", "background"))) %>%
ungroup() %>%
arrange(match(cell_type, dev_order)) %>%
mutate(cell_type = factor(cell_type, unique(cell_type)))
saveRDS(merge_plot, "ShinyExpresionMap/Preprocessed_data/preprocessed_sf.RDS", compress = TRUE)
saveRDS(shape, "ShinyExpresionMap/Preprocessed_data/preloaded_shape.RDS", compress = TRUE)
setwd("E:/Documents/Developmental-Landscape/ShinyExpresionMap")
merge_plot$cell_type
data.seq
shape.x.y
shape.x.y = data.frame(x=map_dbl(shape_centroids$geometry, 1), y=map_dbl(shape_centroids$geometry, 2))
#adding TPM values to the proper place on the shape
shape_centroids = st_centroid(shape)
shape_ymin = st_bbox(shape$geometry)[[2]]
shape_ymax = st_bbox(shape$geometry)[[4]]
shape.x.y = data.frame(x=map_dbl(shape_centroids$geometry, 1), y=map_dbl(shape_centroids$geometry, 2))
shape
shape[shape$cell_type=="TF/CC"]
shape[shape$cell_type=="TF/CC",]
data.seq
shape$region[shape$cell_type=="TF/CC"]
shape.x.y[shape$cell_type=="TF/CC",]
shape.x.y[shape$cell_type=="EC_a",]
shape.x.y[shape$cell_type=="EC_c",]
shape.x.y[shape$cell_type=="EC_p",]
shape.x.y[shape$cell_type=="FSC",]
shape.x.y[shape$cell_type=="pre_stalk",]
shape.x.y[shape$cell_type=="prestalk",]
shape.x.y[shape$cell_type=="pre-stalk",]
shape.x.y[shape$cell_type=="stalk",]
shape.x.y[shape$cell_type=="polar",]
runApp()
runApp()
data.seq
names(data.seq)
runApp()
runApp()
runApp()
merge_plot = readRDS("Preprocessed_data/preprocessed_sf.RDS") #data to populate shape file for distPlot
shape = readRDS("Preprocessed_data/preloaded_shape.RDS") #shape file for distPlot
data.seq = readRDS("Preprocessed_data/preprocessed_RNA_seq_data.RDS")
#setting some variables for distPlot that must be declared outside of the server function
FBID = data.seq$FBGN
Symbol = data.seq$Symbol
pal <- c(
"Black" = "Black",
"Very High" = "#00ffff",
"High" = "#66ffff",
"Med" = "#99ffff",
"Low" = "#ccffff",
"Very Low" = "#d9ffff",
"None" = "#bdbdbd",
"White" = "White",
"line" = "Black")
data.seq = readRDS("Preprocessed_data/preprocessed_single_cell_seq_data_germarium_soma.RDS") #data from preprocessed  somaSC-seq (binned/organized)
expression_unit = "NE"
bins = c("bin_TF/CC",
"bin_aEC",
"bin_cEC",
"bin_pEC",
"bin_FSC/pre-FC",
"bin_pre-stalk",
"bin_stalk",
"bin_polar")
all.colors = data.seq[data.seq$Symbol %in% "fax", names(data.seq) %in% bins]
all.colors
merge_plot$color[merge_plot$cell_type=="TF/CC"] = all.colors[[1]]
merge_plot$color[merge_plot$cell_type=="EC_a"] = all.colors[[2]]
merge_plot$color[merge_plot$cell_type=="EC_c"] = all.colors[[3]]
merge_plot$color[merge_plot$cell_type=="EC_p"] = all.colors[[4]]
merge_plot$color[merge_plot$cell_type=="FSC "] = all.colors[[5]]
merge_plot$color[merge_plot$cell_type=="pre-stalk"] = all.colors[[6]]
merge_plot$color[merge_plot$cell_type=="stalk"] = all.colors[[7]]
merge_plot$color[merge_plot$cell_type=="polar"] = all.colors[[8]]
#plotting distplot
dist_pl = merge_plot %>%
st_as_sf() %>%
arrange(region) %>%
mutate(region_index = row_number()) %>%
mutate(color = color %>% forcats::fct_reorder(-region_index)) %>%
ggplot()+
geom_sf(aes(geometry=geometry, fill=color), color = "grey50")+
scale_fill_manual(values = pal, name="Binned Expression")+
theme_void()+
theme(panel.grid.major = element_line(colour = "transparent"),
panel.background = element_rect(fill = "transparent", colour = "transparent"),
panel.border = element_rect(fill = "transparent", colour = "transparent"),
legend.position = "none")
TPMs = signif(data.seq[data.seq$Symbol %in% "fax", 2:9][1,], 2)
dist_pl
merge_plot %>%
st_as_sf() %>%
arrange(region)
merge_plot %>%
st_as_sf() %>%
arrange(region) %>%
mutate(region_index = row_number())
merge_plot %>%
st_as_sf() %>%
arrange(region) %>%
mutate(region_index = row_number()) %>%
mutate(color = color %>% forcats::fct_reorder(-region_index))
merge_plot %>%
st_as_sf() %>%
arrange(region) %>%
mutate(region_index = row_number()) %>%
mutate(color = color %>% forcats::fct_reorder(-region_index)) %>%
ggplot()+
geom_sf(aes(geometry=geometry, fill=color), color = "grey50")
View(dist_pl)
runApp()
runApp()
merge_plot
merge_plot[merge_plot$region=="soma",]
all.colors
merge_plot$color[merge_plot$cell_type=="TF/CC"]
all.colors
all.colors[[1]]
merge_plot$color[merge_plot$cell_type=="TF/CC"] = all.colors[[1]]
merge_plot
merge_plot$color[merge_plot$cell_type=="TF/CC"]
merge_plot[merge_plot$cell_type=="TF/CC"]
merge_plot[merge_plot$cell_type=="TF/CC",]
runApp()
merge_plot
runApp()
merge_plot
merge_plot
merge_plot %>%
st_as_sf()
all.colors
merge_plot = readRDS("Preprocessed_data/preprocessed_sf.RDS") #data to populate shape file for distPlot
shape = readRDS("Preprocessed_data/preloaded_shape.RDS") #shape file for distPlot
data.seq = readRDS("Preprocessed_data/preprocessed_RNA_seq_data.RDS")
#setting some variables for distPlot that must be declared outside of the server function
FBID = data.seq$FBGN
Symbol = data.seq$Symbol
pal <- c(
"Black" = "Black",
"Very High" = "#00ffff",
"High" = "#66ffff",
"Med" = "#99ffff",
"Low" = "#ccffff",
"Very Low" = "#d9ffff",
"None" = "#bdbdbd",
"White" = "White",
"line" = "Black")
data.seq = readRDS("Preprocessed_data/preprocessed_single_cell_seq_data_germarium_soma.RDS") #data from preprocessed  somaSC-seq (binned/organized)
expression_unit = "NE"
bins = c("bin_TF/CC",
"bin_aEC",
"bin_cEC",
"bin_pEC",
"bin_FSC/pre-FC",
"bin_pre-stalk",
"bin_stalk",
"bin_polar")
all.colors = data.seq[data.seq$Symbol %in% "eya", names(data.seq) %in% bins]
all.colors
merge_plot$color[merge_plot$cell_type=="TF/CC"] = all.colors[[1]]
merge_plot$color[merge_plot$cell_type=="EC_a"] = all.colors[[2]]
merge_plot$color[merge_plot$cell_type=="EC_c"] = all.colors[[3]]
merge_plot$color[merge_plot$cell_type=="EC_p"] = all.colors[[4]]
merge_plot$color[merge_plot$cell_type=="FSC "] = all.colors[[5]]
merge_plot$color[merge_plot$cell_type=="pre-stalk"] = all.colors[[6]]
merge_plot$color[merge_plot$cell_type=="stalk"] = all.colors[[7]]
merge_plot$color[merge_plot$cell_type=="polar"] = all.colors[[8]]
merge_plot$color[merge_plot$cell_type=="TF/CC"]
merge_plot$color[merge_plot$cell_type=="FSC "]
merge_plot$color[merge_plot$cell_type=="FSC"]
merge_plot$color[merge_plot$cell_type=="EC_p"]
merge_plot$color[merge_plot$cell_type=="EC_c"]
merge_plot$color[merge_plot$cell_type=="polar"]
merge_plot$color[merge_plot$cell_type=="stalk"]
runApp()
dist_pl = merge_plot %>%
st_as_sf() %>%
arrange(region) %>%
mutate(region_index = row_number()) %>%
mutate(color = color %>% forcats::fct_reorder(-region_index)) %>%
ggplot()+
geom_sf(aes(geometry=geometry, fill=color), color = "grey50")+
scale_fill_manual(values = pal, name="Binned Expression")+
theme_void()+
theme(panel.grid.major = element_line(colour = "transparent"),
panel.background = element_rect(fill = "transparent", colour = "transparent"),
panel.border = element_rect(fill = "transparent", colour = "transparent"),
legend.position = "none")
dist_pl
merge_plot %>%
st_as_sf() %>%
arrange(region)
test =  merge_plot %>%
st_as_sf() %>%
arrange(region) %>%
mutate(region_index = row_number()) %>%
mutate(color = color %>% forcats::fct_reorder(-region_index))
View(test)
runApp()
runApp()
test$color
merge_plot
merge_plot$color
runApp()
runApp()
library(Seurat)
library(tidyverse)
library(openxlsx)
load("TPMs/GC_clusters.RData")
all_de = FindAllMarkers(GC_clusters, logfc.threshold = 0.75)
all_de_genes = all_de %>% pull(gene)
write_rds(all_de_genes, "ShinyExpresionMap/Preprocessed_data/Single_cell_seq_regulated_gene_list.RDS")
write.xlsx(all_de, "DE_Analysis/single_cell/single_cell_DE.xlsx")
GC_clusters
all_genes_vs_cluster1 = FindAllMarkers(GC_clusters, logfc.threshold = 0, min.pct = 0)
setwd("E:/Documents/Developmental-Landscape")
library(Seurat)
library(tidyverse)
library(openxlsx)
load("TPMs/GC_clusters.RData")
all_de = FindAllMarkers(GC_clusters, logfc.threshold = 0.75)
all_de_genes = all_de %>% pull(gene)
write_rds(all_de_genes, "ShinyExpresionMap/Preprocessed_data/Single_cell_seq_regulated_gene_list.RDS")
write.xlsx(all_de, "DE_Analysis/single_cell/single_cell_DE.xlsx")
GC_clusters
all_genes_vs_cluster1 = FindAllMarkers(GC_clusters, logfc.threshold = 0, min.pct = 0)
library(Seurat)
library(tidyverse)
library(openxlsx)
load("Normalized_expression//GC_clusters.RData")
all_de = FindAllMarkers(GC_clusters, logfc.threshold = 0.75)
all_de_genes = all_de %>% pull(gene)
write_rds(all_de_genes, "ShinyExpresionMap/Preprocessed_data/Single_cell_seq_regulated_gene_list.RDS")
write.xlsx(all_de, "DE_Analysis/single_cell/single_cell_DE.xlsx")
GC_clusters
all_genes_vs_cluster1 = FindAllMarkers(GC_clusters, logfc.threshold = 0, min.pct = 0)
Seurat::FeaturePlot(GC_clusters, features = "vas")
load("Normalized_expression/GC_clusters.RData")
Seurat::FeaturePlot(GC_clusters, features = "vas")
