annotate("segment", x=shape.x.y[5,1], xend=shape.x.y[5,1],
y=st_bbox(shape$geometry[5])[[4]], yend=shape_ymax+0.17)+
# 8CC
annotate("segment", x=shape.x.y[6,1], xend=shape.x.y[6,1],
y=st_bbox(shape$geometry[6])[[2]], yend=shape_ymin-0.17)+
# 16CC_2A1
annotate("segment", x=shape.x.y[7,1], xend=shape.x.y[7,1],
y=st_bbox(shape$geometry[7])[[4]], yend=shape_ymax+0.17)+
# 16CC_2A2
annotate("segment", x=shape.x.y[8,1], xend=shape.x.y[8,1],
y=st_bbox(shape$geometry[8])[[2]], yend=shape_ymin-0.17)+
# 16CC_2AB
annotate("segment", x=shape.x.y[9,1], xend=shape.x.y[9,1],
y=st_bbox(shape$geometry[9])[[4]], yend=shape_ymax+0.17)+
# 16CC_2B
annotate("segment", x=shape.x.y[10,1], xend=shape.x.y[10,1],
y=st_bbox(shape$geometry[10])[[2]], yend=shape_ymin-0.17)+
# 16CC_3
annotate("segment", x=shape.x.y[11,1], xend=shape.x.y[11,1],
y=st_bbox(shape$geometry[11])[[4]], yend=shape_ymax+0.17)+
# ST2
annotate("segment", x=shape.x.y[12,1], xend=shape.x.y[12,1],
y=st_bbox(shape$geometry[12])[[2]], yend=shape_ymin-0.17)
}
}
return(dist_pl)
}else{
message("graphic_to_generate should be of type 'map', or 'legend'")
}
runApp()
data.seq = readRDS("Preprocessed_data/preprocessed_single_cell_seq_data_germarium_soma.RDS")
data.seq_pared = data.seq[c(1, 2:9)] #extract columns used for plotting
data.seq_pared
names(data.seq_pared)
shape
merge_plot = readRDS("Preprocessed_data/preprocessed_sf.RDS") #data to populate shape file for distPlot
shape = readRDS("Preprocessed_data/preloaded_shape.RDS") #shape file for distPlot
data.seq = readRDS("Preprocessed_data/preprocessed_RNA_seq_data.RDS")
setwd("E:/Documents/Developmental-Landscape/ShinyExpresionMap")
shiny::runApp()
shape
shape$cell_type == "aEC"
shape$cell_type
shape$cell_type == "TF/CC"
shape[shape$cell_type == "TF/CC",]
st_bbox(shape[shape$cell_type == "TF/CC",])
st_bbox(shape[shape$cell_type == "TF/CC",])[[1]]
runApp()
runApp()
st_centroid(shape[shape$cell_type == "TF/CC",])
st_centroid(st_multipolygon(shape[shape$cell_type == "TF/CC",]))
st_multipolygon(shape[shape$cell_type == "TF/CC",])
st_combine(shape[shape$cell_type == "TF/CC",])
st_centroid(st_combine(shape[shape$cell_type == "TF/CC",]))
group_centroids = shape %>% group_by(cell_type)
group_centroids
group_centroids = shape %>% group_by(cell_type) %>% summarise(st_combine())
group_centroids = shape %>% group_by(cell_type) %>% summarise(st_combine(.))
group_centroids
group_centroids = shape %>% group_by(cell_type) %>% summarise(centroids = st_combine(.))
group_centroids
group_centroids = shape %>% group_by(cell_type) %>% summarise(grouped_polygons = st_combine(.)) %>% st_centroid(.)
group_centroids
group_centroids = shape %>% group_by(cell_type) %>% summarise(grouped_polygons = st_combine(.)) %>% st_centroid(.)
group_centroids.x.y = data.frame(x=map_dbl(group_centroids$geometry, 1), y=map_dbl(group_centroids$geometry, 2))
group_centroids = shape %>% group_by(cell_type) %>% summarise(geometry = st_combine(.)) %>% st_centroid(.)
group_centroids.x.y = data.frame(x=map_dbl(group_centroids$geometry, 1), y=map_dbl(group_centroids$geometry, 2))
group_centroids.x.y
shape
shape %>% st_as_sf()
group_centroids = shape %>% st_as_sf() %>%  group_by(cell_type) %>% summarise(geometry = st_combine(.)) %>% st_centroid(.)
group_centroids = shape %>%  group_by(cell_type) %>% summarise(geometry = st_union(.)) %>% st_centroid(.)
group_centroids
group_centroids = shape %>%  group_by(cell_type) %>% summarise(geometry = st_union(.))
group_centroids
shape
group_centroids = shape %>%  group_by(cell_type) %>% summarise(geometry = sf::st_union(geometry)) %>% st_centroid(.)
group_centroids
group_centroids = shape %>%  group_by(cell_type) %>% summarise(geometry = st_union(geometry)) %>% st_centroid(.)
group_centroids
shape %>%  group_by(cell_type) %>% summarise(geometry = st_union(geometry))
group_centroids = shape %>%  group_by(cell_type) %>% summarise(geometry = st_union(geometry)) %>% st_centroid(geometry)
group_centroids
group_centroids = shape %>%  group_by(cell_type) %>% summarise(geometry = st_union(geometry)) %>% st_centroid(geometry)
group_centroids.x.y = data.frame(x=map_dbl(group_centroids$geometry, 1), y=map_dbl(group_centroids$geometry, 2))
group_centroids.x.y
group_centroids
group_centroids[[11]]
group_centroids[11]
group_centroids[,11]
group_centroids[11,]
group_centroids.x.y = data.frame(cell_type=group_centroids$cell_type,
x=map_dbl(group_centroids$geometry, 1),
y=map_dbl(group_centroids$geometry, 2))
group_centroids.x.y
runApp()
shape %>%  group_by(cell_type) %>% summarise(geometry = st_union(geometry)) %>% st_centroid(geometry)
group_centroids = shape %>%  group_by(cell_type) %>% summarise(geometry = st_union(geometry)) %>% mutate(st_centroid(geometry))
group_centroids
group_centroids = shape %>%
group_by(cell_type) %>%
summarise(geometry = st_union(geometry)) %>%
mutate(centroid = st_centroid(geometry)) %>%
mutate(bbox = st_bbox(geometry))
shape %>%
group_by(cell_type) %>%
summarise(geometry = st_union(geometry)) %>%
mutate(centroid = st_centroid(geometry))
shape %>%
group_by(cell_type) %>%
summarise(geometry = st_union(geometry)) %>%
mutate(centroid = st_centroid(geometry)) %>%
mutate(bbox = st_bbox(geometry))
group_centroids = shape %>%
group_by(cell_type) %>%
summarise(geometry = st_union(geometry)) %>%
group_by(cell_type) %>%
mutate(centroid = st_centroid(geometry)) %>%
mutate(bbox = st_bbox(geometry))
group_centroids
st_bbox(group_centroids)
group_centroids = shape %>%
group_by(cell_type) %>%
summarise(geometry = st_union(geometry)) %>%
mutate(centroid = st_centroid(geometry)) %>%
mutate(bbox = list(st_bbox(geometry)))
group_centroids
group_geometry = shape %>%
group_by(cell_type) %>%
summarise(geometry = st_union(geometry)) %>%
mutate(centroid = st_centroid(geometry)) %>%
mutate(bbox = list(st_bbox(geometry)))
group_geometry_bounding = data.frame(cell_type=group_geometry$cell_type,
x=map_dbl(group_geometry$geometry, 1),
y=map_dbl(group_geometry$geometry, 2))
group_geometry_bounding = data.frame(cell_type=group_geometry$cell_type,
x=map_dbl(group_geometry$centroid, 1),
y=map_dbl(group_geometry$centroid, 2))
group_geometry_bounding
group_geometry
group_geometry_bounding = data.frame(cell_type=group_geometry$cell_type,
x=map_dbl(group_geometry$centroid, 1),
y=map_dbl(group_geometry$centroid, 2),
bbox=group_geometry$bbox)
group_geometry$bbox
group_geometry_bounding = data.frame(cell_type=group_geometry$cell_type,
x=map_dbl(group_geometry$centroid, 1),
y=map_dbl(group_geometry$centroid, 2),
bbox=list(group_geometry$bbox))
group_geometry_bounding = data_table(cell_type=group_geometry$cell_type,
x=map_dbl(group_geometry$centroid, 1),
y=map_dbl(group_geometry$centroid, 2),
bbox=list(group_geometry$bbox))
group_geometry_bounding = tibble(cell_type=group_geometry$cell_type,
x=map_dbl(group_geometry$centroid, 1),
y=map_dbl(group_geometry$centroid, 2),
bbox=list(group_geometry$bbox))
group_geometry_bounding
group_geometry_bounding$x[group_geometry_bounding$cell_type=="TF/CC"]
group_geometry_bounding$bbox[group_geometry_bounding$cell_type=="TF/CC"]
group_geometry_bounding[group_geometry_bounding$cell_type=="TF/CC",]
group_geometry
View(group_geometry)
map_dbl
group_geometry$bbox
group_geometry$centroid
group_geometry_bounding = tibble(cell_type=group_geometry$cell_type,
x=map_dbl(group_geometry$centroid, 1),
y=map_dbl(group_geometry$centroid, 2),
bbox=map_dbl(group_geometry$bbox, 1))
group_geometry_bounding
group_geometry$bbox
group_geometry_bounding = tibble(cell_type=group_geometry$cell_type,
x=map_dbl(group_geometry$centroid, 1),
y=map_dbl(group_geometry$centroid, 2),
bbox=group_geometry$bbox, 1)
group_geometry_bounding = tibble(cell_type=group_geometry$cell_type,
x=map_dbl(group_geometry$centroid, 1),
y=map_dbl(group_geometry$centroid, 2),
bbox=group_geometry$bbox)
group_geometry_bounding
group_geometry_bounding$bbox[group_geometry_bounding$cell_type=="TF/CC"]
group_geometry_bounding$bbox[group_geometry_bounding$cell_type=="TF/CC"][1]
group_geometry_bounding$bbox[group_geometry_bounding$cell_type=="TF/CC"][[1]]
group_geometry_bounding$bbox[group_geometry_bounding$cell_type=="TF/CC"][[1]][1]
runApp()
group_geometry
group_geometry_bounding
group_geometry_bounding$bbox
group_geometry_bounding = tibble(cell_type=group_geometry$cell_type,
x=map_dbl(group_geometry$centroid, 1),
y=map_dbl(group_geometry$centroid, 2),
bbox=group_geometry$bbox)
group_geometry_bounding
group_geometry_bounding$bbox
group_geometry$bbox
group_geometry = shape %>%
group_by(cell_type) %>%
summarise(geometry = st_union(geometry)) %>%
mutate(centroid = st_centroid(geometry)) %>%
mutate(bbox = list(st_bbox(geometry)))
group_geometry
group_geometry_bounding = tibble(cell_type=group_geometry$cell_type,
x=map_dbl(group_geometry$centroid, 1),
y=map_dbl(group_geometry$centroid, 2),
bbox=group_geometry$bbox)
group_geometry_bounding
group_geometry_bounding$bbox
group_geometry
bbox_wrap <- function(x) st_as_sfc(st_bbox(x))
box_sf = group_geometry %>%
group_by(cell_type) %>%
nest()
box_sf
box_sf = box_sf %>%
mutate(bbox = map(group_geometry, bbox_wrap))
box_sf
bbox_wrap
box_sf
box_sf$data
box_sf = box_sf %>%
mutate(bbox = map(data, bbox_wrap))
box_sf
box_sf$data[[1]]
box_sf$data[[2]]
bbox_wrap = function(x){
if(is.na(x)){
return(NA)
}else{
st_as_sfc(st_bbox(x))
}
}
box_sf = group_geometry %>%
group_by(cell_type) %>%
nest()
box_sf = box_sf %>%
mutate(bbox = map(data, bbox_wrap))
box_sf
group_geometry
group_geometry[1:2]
box_sf = group_geometry[1:2,] %>%
group_by(cell_type) %>%
nest()
box_sf
box_sf = box_sf %>%
mutate(bbox = map(data, bbox_wrap))
group_geometry_bounding = tibble(cell_type=group_geometry$cell_type,
x=map_dbl(group_geometry$centroid, 1),
y=map_dbl(group_geometry$centroid, 2),
bbox=group_geometry$bbox)
box_sf
box_sf[[1]]
box_sf$bbox[1]
st_bbox_by_feature(group_geometry)
st_bbox_by_feature = function(x) {
x = st_geometry(x)
f <- function(y) st_as_sfc(st_bbox(y))
do.call("c", lapply(x, f))
}
st_bbox_by_feature(group_geometry)
group_geometry
st_bbox_by_feature(group_geometry[1:2,])
group_geometry
setwd("E:/Documents/Developmental-Landscape")
library(sf)
library(tidyverse)
lines = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_lines_v3")
shape = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_poly_v3")
lines$cell_type = "line"
lines$region = "line"
lines$color = "line"
shape$color = "White"
line.plot = data.frame(lines) %>% select(-path)
shape.plot = data.frame(shape)
merge_plot = rbind(shape.plot, line.plot)
merge_plot$color = factor(merge_plot$color,
c("line", "None", "Very Low", "Low", "Med", "High", "Very High", "Black", "White"))
dev_order = c("GSC", "CB", "2CC", "4CC", "8CC",
"16CC_2A1", "16CC_2A2", "16CC_2AB", "16CC_2B", "16CC_3", "ST2",
"TF/CC", "EC_a", "EC_c", "EC_p", "FSC", "pre-stalk", "stalk", "polar", "background", "line")
shape = shape %>% arrange(match(cell_type, dev_order))
merge_plot =
merge_plot %>%
group_by(cell_type) %>%
mutate(region = factor(region, c("line", "germline", "soma", "background"))) %>%
ungroup() %>%
arrange(match(cell_type, dev_order)) %>%
mutate(cell_type = factor(cell_type, unique(cell_type)))
saveRDS(merge_plot, "ShinyExpresionMap/Preprocessed_data/preprocessed_sf.RDS", compress = TRUE)
saveRDS(shape, "ShinyExpresionMap/Preprocessed_data/preloaded_shape.RDS", compress = TRUE)
setwd("E:/Documents/Developmental-Landscape/ShinyExpresionMap")
runApp()
merge_plot = readRDS("Preprocessed_data/preprocessed_sf.RDS") #data to populate shape file for distPlot
shape = readRDS("Preprocessed_data/preloaded_shape.RDS") #shape file for distPlot
data.seq = readRDS("Preprocessed_data/preprocessed_RNA_seq_data.RDS")
#setting some variables for distPlot that must be declared outside of the server function
FBID = data.seq$FBGN
Symbol = data.seq$Symbol
pal <- c(
"Black" = "Black",
"Very High" = "#00ffff",
"High" = "#66ffff",
"Med" = "#99ffff",
"Low" = "#ccffff",
"Very Low" = "#d9ffff",
"None" = "#bdbdbd",
"White" = "White",
"line" = "Black")
group_geometry = shape %>%
group_by(cell_type) %>%
summarise(geometry = st_union(geometry)) %>%
mutate(centroid = st_centroid(geometry))
group_geometry
st_bbox_by_feature = function(x) {
x = st_geometry(x)
f <- function(y) st_as_sfc(st_bbox(y))
do.call("c", lapply(x, f))
}
st_bbox_by_feature(group_geometry)
group_geometry$bbox = st_bbox_by_feature(group_geometry)
group_geometry
group_geometry = shape %>%
group_by(cell_type) %>%
summarise(geometry = st_union(geometry)) %>%
mutate(centroid = st_centroid(geometry))
st_bbox_by_feature = function(x) {
x = st_geometry(x)
f <- function(y) st_as_sfc(st_bbox(y))
do.call("c", lapply(x, f))
}
group_geometry_bounding = tibble(cell_type=group_geometry$cell_type,
x=map_dbl(group_geometry$centroid, 1),
y=map_dbl(group_geometry$centroid, 2),
bbox=st_bbox_by_feature(group_geometry))
group_geometry_bounding
group_geometry_bounding$bbox[group_geometry_bounding$cell_type=="TF/CC"]
group_geometry_bounding$bbox[group_geometry_bounding$cell_type=="TF/CC"][[1]]
group_geometry_bounding$bbox[group_geometry_bounding$cell_type=="TF/CC"][[1]][3]
group_geometry
group_geometry_bounding
group_geometry
group_geometry_bounding = tibble(cell_type=group_geometry$cell_type,
x=map_dbl(group_geometry$centroid, 1),
y=map_dbl(group_geometry$centroid, 2),
bbox=st_bbox_by_feature(group_geometry$geometry))
group_geometry_bounding
group_geometry
st_geometry(group_geometry$geometry)
x= st_geometry(group_geometry$geometry)
f <- function(y) st_as_sfc(st_bbox(y))
do.call("c", lapply(x, f))
group_geometry$geometry
group_geometry$geometry[[1]]
st_bbox(group_geometry$geometry[[1]])
x
lapply(x, f)
st_bbox_by_feature = function(x) {
x = st_geometry(x)
f <- function(y) (st_bbox(y))
do.call("c", lapply(x, f))
}
group_geometry_bounding = tibble(cell_type=group_geometry$cell_type,
x=map_dbl(group_geometry$centroid, 1),
y=map_dbl(group_geometry$centroid, 2),
bbox=st_bbox_by_feature(group_geometry$geometry))
st_bbox_by_feature(group_geometry$geometry)
st_bbox_by_feature = function(x) {
x = st_geometry(x)
f <- function(y) (st_bbox(y))
lapply(x, f)
}
st_bbox_by_feature(group_geometry$geometry)
group_geometry_bounding = tibble(cell_type=group_geometry$cell_type,
x=map_dbl(group_geometry$centroid, 1),
y=map_dbl(group_geometry$centroid, 2),
bbox=st_bbox_by_feature(group_geometry$geometry))
group_geometry_bounding
group_geometry_bounding$bbox
group_geometry_bounding$bbox[[1]]
group_geometry_bounding$bbox[[2]]
group_geometry_bounding$bbox[group_geometry_bounding$cell_type=="TF/CC"][[1]][3]
runApp()
runApp()
runApp()
runApp()
.5-.05
runApp()
group_geometry_bounding
data.seq
group_geometry_bounding
group_geometry_bounding
runApp()
group_geometry_bounding$bbox[group_geometry_bounding$cell_type=="EC_a"]
runApp()
runApp()
group_geometry_bounding$cell_type
runApp()
runApp()
runApp()
group_geometry_bounding$cell_type
runApp()
group_geometry_bounding$cell_type
group_geometry_bounding$x[group_geometry_bounding$cell_type=="pre-stalk"]
runApp()
runApp()
runApp()
runApp()
group_geometry_bounding$cell_type
runApp()
group_geometry_bounding$bbox[group_geometry_bounding$cell_type=="FSC"]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
merge_plot %>%
st_as_sf()
merge_plot %>%
st_as_sf() %>% filter(cell_type=="pre-stalk")
setwd("E:/Documents/Developmental-Landscape")
library(sf)
library(tidyverse)
lines = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_lines_v3")
shape = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_poly_v3")
lines$cell_type = "line"
lines$region = "line"
lines$color = "line"
shape$color = "White"
line.plot = data.frame(lines) %>% select(-path)
shape.plot = data.frame(shape)
merge_plot = rbind(shape.plot, line.plot)
merge_plot$color = factor(merge_plot$color,
c("line", "None", "Very Low", "Low", "Med", "High", "Very High", "Black", "White"))
dev_order = c("GSC", "CB", "2CC", "4CC", "8CC",
"16CC_2A1", "16CC_2A2", "16CC_2AB", "16CC_2B", "16CC_3", "ST2",
"TF/CC", "EC_a", "EC_c", "EC_p", "FSC", "pre-stalk", "stalk", "polar", "background", "line")
shape = shape %>% arrange(match(cell_type, dev_order))
merge_plot =
merge_plot %>%
group_by(cell_type) %>%
mutate(region = factor(region, c("line", "germline", "soma", "background"))) %>%
ungroup() %>%
arrange(match(cell_type, dev_order)) %>%
mutate(cell_type = factor(cell_type, unique(cell_type)))
saveRDS(merge_plot, "ShinyExpresionMap/Preprocessed_data/preprocessed_sf.RDS", compress = TRUE)
saveRDS(shape, "ShinyExpresionMap/Preprocessed_data/preloaded_shape.RDS", compress = TRUE)
runApp('ShinyExpresionMap')
merge_plot %>%
st_as_sf()
library(sf)
library(tidyverse)
lines = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_lines_v3")
shape = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_poly_v4")
lines$cell_type = "line"
lines$region = "line"
lines$color = "line"
shape$color = "White"
line.plot = data.frame(lines) %>% select(-path)
shape.plot = data.frame(shape)
merge_plot = rbind(shape.plot, line.plot)
merge_plot$color = factor(merge_plot$color,
c("line", "None", "Very Low", "Low", "Med", "High", "Very High", "Black", "White"))
dev_order = c("GSC", "CB", "2CC", "4CC", "8CC",
"16CC_2A1", "16CC_2A2", "16CC_2AB", "16CC_2B", "16CC_3", "ST2",
"TF/CC", "EC_a", "EC_c", "EC_p", "FSC", "pre-stalk", "stalk", "polar", "background", "line")
shape = shape %>% arrange(match(cell_type, dev_order))
merge_plot =
merge_plot %>%
group_by(cell_type) %>%
mutate(region = factor(region, c("line", "germline", "soma", "background"))) %>%
ungroup() %>%
arrange(match(cell_type, dev_order)) %>%
mutate(cell_type = factor(cell_type, unique(cell_type)))
saveRDS(merge_plot, "ShinyExpresionMap/Preprocessed_data/preprocessed_sf.RDS", compress = TRUE)
saveRDS(shape, "ShinyExpresionMap/Preprocessed_data/preloaded_shape.RDS", compress = TRUE)
runApp('ShinyExpresionMap')
runApp('ShinyExpresionMap')
runApp('ShinyExpresionMap')
library(sf)
library(tidyverse)
lines = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_lines_v5")
shape = read_sf(dsn = "germPoly", layer = "germ_soma_cartoon_poly_v5")
lines$cell_type = "line"
lines$region = "line"
lines$color = "line"
shape$color = "White"
line.plot = data.frame(lines) %>% select(-path)
shape.plot = data.frame(shape)
merge_plot = rbind(shape.plot, line.plot)
merge_plot$color = factor(merge_plot$color,
c("line", "None", "Very Low", "Low", "Med", "High", "Very High", "Black", "White"))
dev_order = c("GSC", "CB", "2CC", "4CC", "8CC",
"16CC_2A1", "16CC_2A2", "16CC_2AB", "16CC_2B", "16CC_3", "ST2",
"TF/CC", "EC_a", "EC_c", "EC_p", "FSC", "pre-stalk", "stalk", "polar", "background", "line")
shape = shape %>% arrange(match(cell_type, dev_order))
merge_plot =
merge_plot %>%
group_by(cell_type) %>%
mutate(region = factor(region, c("line", "germline", "soma", "background"))) %>%
ungroup() %>%
arrange(match(cell_type, dev_order)) %>%
mutate(cell_type = factor(cell_type, unique(cell_type)))
saveRDS(merge_plot, "ShinyExpresionMap/Preprocessed_data/preprocessed_sf.RDS", compress = TRUE)
saveRDS(shape, "ShinyExpresionMap/Preprocessed_data/preloaded_shape.RDS", compress = TRUE)
runApp('ShinyExpresionMap')
runApp('ShinyExpresionMap')
runApp('ShinyExpresionMap')
