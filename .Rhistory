text_scale = 12)+
expand_limits(y = c(-2, 10))+
ggtitle("Polysome-seq: Meiotic cell cycle")+
theme(aspect.ratio = 0.2,
plot.title = element_text(size = 12, margin = margin(0,0,4,0)),
plot.margin = margin(0,30,0,0))
FigureS3C = gene_violin(data_set_to_plot="Single_cell_seq_germline",
genes_by_GO="GO_term_selection",
GO_term = "meiotic cell cycle",
normalization="each_gene",
text_scale = 12)+
expand_limits(y = c(-2, 2))+
ggtitle("Meiotic cell cycle - scRNAseq")+
ylab("log normalized expression\nto GSC/CB/2CC")+
theme(aspect.ratio = 0.2,
plot.title = element_text(size = 12, margin = margin(0,0,4,0)),
plot.margin = margin(0,0,0,0))
FigureS3C_SC_seq_vals = read_csv("../Paper/Figures/Figure_4/Selected_gene_expression_from_Single_cell_seq_germline_of_GO_term_meiotic cell cycle.csv")
FigureS3C_SC_seq_vals %>%
group_by(FBGN) %>%
mutate(Norm_to_1 = Mean_expression/Mean_expression[Genotype=="GSC/CB/2CC"]) %>%
drop_na() %>%
filter_all(all_vars(!is.infinite(.))) %>%
group_by(Genotype) %>%
dplyr::summarise(Median = median(Norm_to_1))
FigureS3C_SC_seq_vals %>%
group_by(Genotype) %>%
dplyr::summarise(Median = median(Mean_expression))
FigureS3D = ovary_map(data_set_to_plot = "Single_cell_seq_germline",
gene_name_format = "Symbol",
displayTPM = TRUE,
display_stage_labels = TRUE,
display_title = TRUE,
gene_of_interest = "ord",
text_scale = 10/ggplot2::.pt,
map_line_width = 0.5,
graphic_to_generate = "map")+
theme(plot.margin = margin(0,0,0,0))
FigureS3 = multi_panel_figure(
width = c((8.5-4*(2.0694+0.025))/2, 0.0694, 2.025, rep(2.0694+0.025, 2), 2.025, 0.0694, (8.5-4*(2.0694+0.025))/2),
height = c(0.5, 1.1837, 1.1837, 0.2, 1.1837, 1.1837, 0.2, 1.1837, 1.1837, 1.1837, 1.1837, 0.5, (11-8*(1.1837+0.025))-0.2-0.2-0.5-0.3),
row_spacing = 0.025, column_spacing = 0, unit = "in",
panel_label_type = "none", figure_name = "Figure4")
FigureS3
FigureS3 = FigureS3 %>%
fill_panel(FigureS3A, label = "A", scaling = "fit", panel_clip = "on", row = 2:3, column = 3:6) %>%
fill_panel(FigureS3B, label = "B", scaling = "fit", panel_clip = "on", row = 5:6, column = 3:6) %>%
fill_panel(FigureS3C, label = "C", scaling = "fit", panel_clip = "on", row = 8:9, column = 3:6) %>%
fill_panel(FigureS3D, label = "D", scaling = "fit", panel_clip = "on", row = 10:12, column = 3:6)
FigureS3
ggsave(filename = "Supplemental_Figure3.pdf", plot = FigureS3, path = "../Paper/Figures/", width = 8.5, height = 11, device = cairo_pdf)
library(tidyverse)
library(heatmaply)
library(rgdal)
library(sf)
library(ggplot2)
library(plotly)
library(ggmap)
library(cowplot)
library(purrr)
library(tinytex)
library(quanteda)
library(ggpubr)
library(rstatix)
# library(Cairo)
library(rlang)
library(reticulate)
library(multipanelfigure)
library(latex2exp)
library(ggprism)
here::i_am("Paper/figure_wrapper.R")
library(here)
here()
# use_condaenv(here("renv/python/condaenvs/renv-python/"))
Sys.setenv(RETICULATE_PYTHON = here("renv/python/condaenvs/renv-python/"))
source(here("ShinyExpresionMap/server_modules/ggplotWhiteTheme.R"))
setwd(here())
source(here("Paper/Figures/Figure_1_assembly.R"))
source(here("Paper/Figures/Figure_2_assembly.R"))
source(here("Paper/Figures/Figure_3_assembly.R"))
source(here("Paper/Figures/Figure_4_assembly.R"))
source(here("Paper/Figures/Figure_5_assembly.R"))
source(here("Paper/Figures/Figure_1S_assembly.R"))
source(here("Paper/Figures/Figure_2S_assembly.R"))
source(here("Paper/Figures/Figure_3S_assembly.R"))
setwd(here())
rmarkdown::render(here("Paper/Figures/figure_wrapper.rmd"),
output_dir = here("Paper/Figures/Compiled_panels/"),
output_file = paste0("Developmental_Landscape_compiled_figures", '_', Sys.Date(), '.pdf'))
library(tidyverse)
library(heatmaply)
library(rgdal)
library(sf)
library(ggplot2)
library(plotly)
library(ggmap)
library(cowplot)
library(purrr)
library(tinytex)
library(quanteda)
library(ggpubr)
library(rstatix)
# library(Cairo)
library(rlang)
library(reticulate)
library(multipanelfigure)
library(latex2exp)
library(ggprism)
here::i_am("Paper/figure_wrapper.R")
library(here)
here()
# use_condaenv(here("renv/python/condaenvs/renv-python/"))
Sys.setenv(RETICULATE_PYTHON = here("renv/python/condaenvs/renv-python/"))
source(here("ShinyExpresionMap/server_modules/ggplotWhiteTheme.R"))
setwd(here())
source(here("Paper/Figures/Figure_1_assembly.R"))
source(here("Paper/Figures/Figure_2_assembly.R"))
source(here("Paper/Figures/Figure_3_assembly.R"))
source(here("Paper/Figures/Figure_4_assembly.R"))
source(here("Paper/Figures/Figure_5_assembly.R"))
source(here("Paper/Figures/Figure_1S_assembly.R"))
source(here("Paper/Figures/Figure_2S_assembly.R"))
source(here("Paper/Figures/Figure_3S_assembly.R"))
setwd(here())
rmarkdown::render(here("Paper/Figures/figure_wrapper.rmd"),
output_dir = here("Paper/Figures/Compiled_panels/"),
output_file = paste0("Developmental_Landscape_compiled_figures", '_', Sys.Date(), '.pdf'))
library(tidyverse)
library(heatmaply)
library(rgdal)
library(sf)
library(ggplot2)
library(plotly)
library(ggmap)
library(cowplot)
library(purrr)
library(tinytex)
library(quanteda)
library(ggpubr)
library(rstatix)
# library(Cairo)
library(rlang)
library(reticulate)
library(multipanelfigure)
library(latex2exp)
library(ggprism)
here::i_am("Paper/figure_wrapper.R")
library(here)
here()
# use_condaenv(here("renv/python/condaenvs/renv-python/"))
Sys.setenv(RETICULATE_PYTHON = here("renv/python/condaenvs/renv-python/"))
source(here("ShinyExpresionMap/server_modules/ggplotWhiteTheme.R"))
setwd(here())
source(here("Paper/Figures/Figure_1_assembly.R"))
source(here("Paper/Figures/Figure_2_assembly.R"))
source(here("Paper/Figures/Figure_3_assembly.R"))
source(here("Paper/Figures/Figure_4_assembly.R"))
source(here("Paper/Figures/Figure_5_assembly.R"))
source(here("Paper/Figures/Figure_1S_assembly.R"))
source(here("Paper/Figures/Figure_2S_assembly.R"))
source(here("Paper/Figures/Figure_3S_assembly.R"))
setwd(here())
rmarkdown::render(here("Paper/Figures/figure_wrapper.rmd"),
output_dir = here("Paper/Figures/Compiled_panels/"),
output_file = paste0("Developmental_Landscape_compiled_figures", '_', Sys.Date(), '.pdf'))
c(0.25, 0.25, 1.1837, 1.1837, 0.25, 1.1837, 1.1837, 0.25, 1.1837, 1.1837, 0.25, 1.1837, 1.1837, (11-8*(1.1837+0.025))-5*(0.25)-0.05)
sum(c(0.25, 0.25, 1.1837, 1.1837, 0.25, 1.1837, 1.1837, 0.25, 1.1837, 1.1837, 0.25, 1.1837, 1.1837, (11-8*(1.1837+0.025))-5*(0.25)-0.05))
sum(c(0.25, 0.25, 1.1837, 1.1837, 0.25, 1.1837, 1.1837, 0.25, 1.1837, 1.1837, 0.25, 1.1837, 1.1837, (11-8*(1.1837+0.025))-4*(0.25)-0.05))
if (is.na(strsplit(getwd(), "Developmental-Landscape")[[1]][2])) {
setwd("ShinyExpresionMap/")
}else if (!is.na(strsplit(getwd(), "Developmental-Landscape")[[1]][2])) {
}else{
errorCondition("WD is invalid")
}
source("server_modules/ggplotWhiteTheme.R")
source("../Paper/Helper_functions/image_panel.R")
source("../Paper/Helper_functions/png_as_gg.R")
source("server_modules/ovary_map.R")
source("../Paper/Helper_functions/in_situ_quant.r")
Figure2A = ovary_map(data_set_to_plot = "Input_seq",
gene_name_format = "Symbol",
displayTPM = TRUE,
display_stage_labels = TRUE,
display_title = TRUE,
gene_of_interest = "RpS19b",
text_scale = 10/ggplot2::.pt,
map_line_width = 0.5,
graphic_to_generate = "map")+
theme(plot.margin = margin(0,0,0,0))
Figure2B = ovary_map(data_set_to_plot = "Single_cell_seq_germline",
gene_name_format = "Symbol",
displayTPM = TRUE,
display_stage_labels = TRUE,
display_title = TRUE,
gene_of_interest = "RpS19b",
text_scale = 10/ggplot2::.pt,
map_line_width = 0.5,
graphic_to_generate = "map")+
theme(plot.margin = margin(0,0,0,0))
Figure2C = image_panel(path = "../Paper/Figures/Figure_2/RpS19b_in_situ_DAPI_Image7_s10.tif",
path_to_czi = "../Paper/Figures/Figure_2/RpS19b_in_situ_DAPI_Image7.czi",
colors_to_return = c("green", "blue"),
genotype_annotation = "Control",
green_annotation = "RpS19b mRNA",
blue_annotation = "DAPI",
label_letters = c("C", "C'", "C''"),
scale_bar_length = 20,
additional_annotation = TRUE,
geom = "segment", x = .1, xend=.22, y=.35, yend=.42, color="gold")
Figure2D = image_panel(path = "../Paper/Figures/Figure_2/RpS19b_GFP_1B1_GFP_Vas_Image 11_s4_6.tif",
path_to_czi = "../Paper/Figures/Figure_2/RpS19b_GFP_1B1_GFP_Vas_Image 11_s4_6 Image 11.czi",
colors_to_return = c("green", "blue"),
genotype_annotation = "RpS19b::GFP",
red_annotation = "1B1",
green_annotation = "GFP",
blue_annotation = "Vasa",
label_letters = c("D", "D'", "D''"),
scale_bar_length = 20,
additional_annotation = TRUE,
geom = "segment", x = .08, xend=.3, y=.32, yend=.28, color="gold")
Figure2E = plot_insitu_quant(staining_to_plot = "mRNA",
xlsx_file = "../Paper/Figures/Figure_2/RpS19b_in_situ_quant.xlsx",
gene_name = "RpS19b")+
expand_limits(x=c(0, 60))
Figure2 = multi_panel_figure(
width = c((8.5-4*(2.0694+0.025))/2, 0.0694, 2.025, rep(2.0694+0.025, 2), 2.025, 0.0694, (8.5-4*(2.0694+0.025))/2),
height = c(0.25, 0.25, 1.1837, 1.1837, 0.25, 1.1837, 1.1837, 0.25, 1.1837, 1.1837, 0.25, 1.1837, 1.1837, (11-8*(1.1837+0.025))-4*(0.25)-0.05),
row_spacing = 0.025, column_spacing = 0, unit = "in",
panel_label_type = "none", figure_name = "Figure2")
Figure2
Figure2 = Figure2 %>%
fill_panel(Figure2A, label = "A", scaling = "fit", panel_clip = "on", row = 2:4, column = 3:6) %>%
fill_panel(Figure2B, label = "B", scaling = "fit", panel_clip = "on", row = 6:8, column = 3:6) %>%
fill_panel(Figure2C, label = "", scaling = "none", panel_clip = "off", row = 9, column = 2:5) %>%
fill_panel(Figure2D, label = "", scaling = "none", panel_clip = "off", row = 10, column = 2:5) %>%
fill_panel(Figure2E, label = "E", scaling = "fit", panel_clip = "on", row = 12:13, column = 3:4)
Figure2
ggsave(filename = "Figure2.pdf", plot = Figure2, path = "../Paper/Figures/", width = 8.5, height = 11, device = cairo_pdf)
if (is.na(strsplit(getwd(), "Developmental-Landscape")[[1]][2])) {
setwd("ShinyExpresionMap/")
}else if (!is.na(strsplit(getwd(), "Developmental-Landscape")[[1]][2])) {
}else{
errorCondition("WD is invalid")
}
source("server_modules/ggplotWhiteTheme.R")
source("../Paper/Helper_functions/image_panel.R")
source("../Paper/Helper_functions/png_as_gg.R")
source("server_modules/ovary_map.R")
source("../Paper/Helper_functions/in_situ_quant.r")
Figure2A = ovary_map(data_set_to_plot = "Input_seq",
gene_name_format = "Symbol",
displayTPM = TRUE,
display_stage_labels = TRUE,
display_title = TRUE,
gene_of_interest = "RpS19b",
text_scale = 10/ggplot2::.pt,
map_line_width = 0.5,
graphic_to_generate = "map")+
theme(plot.margin = margin(0,0,0,0))
Figure2B = ovary_map(data_set_to_plot = "Single_cell_seq_germline",
gene_name_format = "Symbol",
displayTPM = TRUE,
display_stage_labels = TRUE,
display_title = TRUE,
gene_of_interest = "RpS19b",
text_scale = 10/ggplot2::.pt,
map_line_width = 0.5,
graphic_to_generate = "map")+
theme(plot.margin = margin(0,0,0,0))
Figure2C = image_panel(path = "../Paper/Figures/Figure_2/RpS19b_in_situ_DAPI_Image7_s10.tif",
path_to_czi = "../Paper/Figures/Figure_2/RpS19b_in_situ_DAPI_Image7.czi",
colors_to_return = c("green", "blue"),
genotype_annotation = "Control",
green_annotation = "RpS19b mRNA",
blue_annotation = "DAPI",
label_letters = c("C", "C'", "C''"),
scale_bar_length = 20,
additional_annotation = TRUE,
geom = "segment", x = .1, xend=.22, y=.35, yend=.42, color="gold")
Figure2D = image_panel(path = "../Paper/Figures/Figure_2/RpS19b_GFP_1B1_GFP_Vas_Image 11_s4_6.tif",
path_to_czi = "../Paper/Figures/Figure_2/RpS19b_GFP_1B1_GFP_Vas_Image 11_s4_6 Image 11.czi",
colors_to_return = c("green", "blue"),
genotype_annotation = "RpS19b::GFP",
red_annotation = "1B1",
green_annotation = "GFP",
blue_annotation = "Vasa",
label_letters = c("D", "D'", "D''"),
scale_bar_length = 20,
additional_annotation = TRUE,
geom = "segment", x = .08, xend=.3, y=.32, yend=.28, color="gold")
Figure2E = plot_insitu_quant(staining_to_plot = "mRNA",
xlsx_file = "../Paper/Figures/Figure_2/RpS19b_in_situ_quant.xlsx",
gene_name = "RpS19b")+
expand_limits(x=c(0, 60))
Figure2 = multi_panel_figure(
width = c((8.5-4*(2.0694+0.025))/2, 0.0694, 2.025, rep(2.0694+0.025, 2), 2.025, 0.0694, (8.5-4*(2.0694+0.025))/2),
height = c(0.25, 0.25, 1.1837, 1.1837, 0.25, 1.1837, 1.1837, 0.25, 1.1837, 1.1837, 0.25, 1.1837, 1.1837, (11-8*(1.1837+0.025))-4*(0.25)-0.05),
row_spacing = 0.025, column_spacing = 0, unit = "in",
panel_label_type = "none", figure_name = "Figure2")
Figure2
Figure2 = Figure2 %>%
fill_panel(Figure2A, label = "A", scaling = "fit", panel_clip = "on", row = 1:4, column = 3:6) %>%
fill_panel(Figure2B, label = "B", scaling = "fit", panel_clip = "on", row = 6:8, column = 3:6) %>%
fill_panel(Figure2C, label = "", scaling = "none", panel_clip = "off", row = 9, column = 2:5) %>%
fill_panel(Figure2D, label = "", scaling = "none", panel_clip = "off", row = 10, column = 2:5) %>%
fill_panel(Figure2E, label = "E", scaling = "fit", panel_clip = "on", row = 12:13, column = 3:4)
Figure2
ggsave(filename = "Figure2.pdf", plot = Figure2, path = "../Paper/Figures/", width = 8.5, height = 11, device = cairo_pdf)
c(0.25, 0.25, 1.1837, 1.1837, 0.25, 1.1837, 1.1837, 0.25, 1.1837, 1.1837, 0.25, 1.1837, 1.1837, (11-8*(1.1837+0.025))-4*(0.25)-0.05)
if (is.na(strsplit(getwd(), "Developmental-Landscape")[[1]][2])) {
setwd("ShinyExpresionMap/")
}else if (!is.na(strsplit(getwd(), "Developmental-Landscape")[[1]][2])) {
}else{
errorCondition("WD is invalid")
}
library(ggplot2)
library(multipanelfigure)
library(pdftools)
library(extrafont)
library(tidyverse)
library(gridExtra)
source("../Paper/Helper_functions/image_panel.R")
source("../Paper/Helper_functions/png_as_gg.R")
source("../Paper/Helper_functions/export_plotly2SVG.R")
# font_import(paths = c("C:/Users/Elliot/AppData/Local/Microsoft/Windows/Fonts/"), prompt = F)
source("server_modules/ovary_map_cartoon.R")
Figure1_A1 =  ovary_map_cartoon(text_scale = 12/ggplot2::.pt)+
theme(aspect.ratio = .28,
plot.margin = margin(0.0, 0.0, 0.1, 0.0, unit = "in"))
Figure1_A1
Genotypes = c(expression(paste(">UAS-", italic('tkv'))),
expression(paste(">", italic('bam'), " RNAi")),
expression(paste(">", italic('bam'), " RNAi; hs-", italic("bam"))),
"Young-WT")
Enriched_cell_type = c("GSCs", "CBs", "Cysts", "Germarium and early egg chambers")
# Define theme to parse plotmath expressions
tt = ttheme_default(core=list(fg_params=list(parse=TRUE)))
tg_geno = tableGrob(d = Genotypes, cols = "Genotype", theme=tt)
tg_ct = tableGrob(d = Enriched_cell_type, cols = "Enriched cell type", theme=tt)
table_grob = gtable_cbind(tg_geno, tg_ct)
Table_1B = qplot(1:10, 1:10, geom = "blank") +
theme_void() +
annotation_custom(
grob = table_grob,
xmin = 0, xmax = 10, ymin = 0, ymax = 10
)
Table_1B
Figure1_C1 = png_as_gg("../Paper/Figures/Figure_1/screenshot_1.png")
Figure1 = multi_panel_figure(
width = c((8.5-4*(2.0694+0.025))/2, 0.0694, 2.0, rep(2.0694, 2), 2.0, 0.0694, (8.5-4*(2.0694+0.025))/2),
height = c((11-8*(1.1837+0.025))/2-.2, 1.4837, 1.1837, 1.3837, .4837, rep(1.1837, 3), 1.1837, 0.8, (11-8*(1.1837+0.025))/2-.2),
row_spacing = 0.025, column_spacing = 0, unit = "in",
panel_label_type = "none", figure_name = "Figure1")
Figure1
Figure1 = Figure1 %>%
fill_panel(Figure1_A1, label = "A",
label_just = "bottom", scaling = "none", panel_clip = "off", row = 2:3, column = 2:7) %>%
fill_panel(Table_1B, label = "B",
label_just = "top", scaling = "none", panel_clip = "off", row = 4, column = 3:4) %>%
fill_panel(Figure1_C1, label = "C",
label_just = "bottom", scaling = "none", panel_clip = "off", row = 6:9, column = 3:5)
Figure1
ggsave(filename = "Figure1.pdf", plot = Figure1, path = "../Paper/Figures/", width = 8.5, height = 11, device = cairo_pdf)
if (is.na(strsplit(getwd(), "Developmental-Landscape")[[1]][2])) {
setwd("ShinyExpresionMap/")
}else if (!is.na(strsplit(getwd(), "Developmental-Landscape")[[1]][2])) {
}else{
errorCondition("WD is invalid")
}
library(ggplot2)
library(multipanelfigure)
library(pdftools)
library(extrafont)
library(tidyverse)
library(gridExtra)
source("../Paper/Helper_functions/image_panel.R")
source("../Paper/Helper_functions/png_as_gg.R")
source("../Paper/Helper_functions/export_plotly2SVG.R")
# font_import(paths = c("C:/Users/Elliot/AppData/Local/Microsoft/Windows/Fonts/"), prompt = F)
source("server_modules/ovary_map_cartoon.R")
Figure1_A1 =  ovary_map_cartoon(text_scale = 12/ggplot2::.pt)+
theme(aspect.ratio = .28,
plot.margin = margin(0.0, 0.0, 0.1, 0.0, unit = "in"))
Figure1_A1
Genotypes = c(expression(paste(">UAS-", italic('tkv'))),
expression(paste(">", italic('bam'), " RNAi")),
expression(paste(">", italic('bam'), " RNAi; hs-", italic("bam"))),
"Young-WT")
Enriched_cell_type = c("GSCs", "CBs", "Cysts", "Germarium and\nearly egg chambers")
# Define theme to parse plotmath expressions
tt = ttheme_default(core=list(fg_params=list(parse=TRUE)))
tg_geno = tableGrob(d = Genotypes, cols = "Genotype", theme=tt)
tg_ct = tableGrob(d = Enriched_cell_type, cols = "Enriched cell type", theme=tt)
table_grob = gtable_cbind(tg_geno, tg_ct)
Table_1B = qplot(1:10, 1:10, geom = "blank") +
theme_void() +
annotation_custom(
grob = table_grob,
xmin = 0, xmax = 10, ymin = 0, ymax = 10
)
Table_1B
Figure1_C1 = png_as_gg("../Paper/Figures/Figure_1/screenshot_1.png")
Figure1 = multi_panel_figure(
width = c((8.5-4*(2.0694+0.025))/2, 0.0694, 2.0, rep(2.0694, 2), 2.0, 0.0694, (8.5-4*(2.0694+0.025))/2),
height = c((11-8*(1.1837+0.025))/2-.2, 1.4837, 1.1837, 1.3837, .4837, rep(1.1837, 3), 1.1837, 0.8, (11-8*(1.1837+0.025))/2-.2),
row_spacing = 0.025, column_spacing = 0, unit = "in",
panel_label_type = "none", figure_name = "Figure1")
Figure1
Figure1 = Figure1 %>%
fill_panel(Figure1_A1, label = "A",
label_just = "bottom", scaling = "none", panel_clip = "off", row = 2:3, column = 2:7) %>%
fill_panel(Table_1B, label = "B",
label_just = "top", scaling = "none", panel_clip = "off", row = 4, column = 3:4) %>%
fill_panel(Figure1_C1, label = "C",
label_just = "bottom", scaling = "none", panel_clip = "off", row = 6:9, column = 3:5)
Figure1
ggsave(filename = "Figure1.pdf", plot = Figure1, path = "../Paper/Figures/", width = 8.5, height = 11, device = cairo_pdf)
if (is.na(strsplit(getwd(), "Developmental-Landscape")[[1]][2])) {
setwd("ShinyExpresionMap/")
}else if (!is.na(strsplit(getwd(), "Developmental-Landscape")[[1]][2])) {
}else{
errorCondition("WD is invalid")
}
# source("../Paper/Helper_functions/image_panel.R")
# source("../Paper/Helper_functions/png_as_gg.R")
source("server_modules/ggplotWhiteTheme.R")
source("server_modules/violin_genes.R")
# source("server_modules/ovary_map.R")
Figure5A = gene_violin(data_set_to_plot="Input_seq",
genes_by_GO="GO_term_selection",
GO_term = "double-strand break repair",
normalization="each_gene",
text_scale = 12)+
expand_limits(y = c(-5, 5))+
ggtitle("Bulk mRNAseq: Double-strand break repair")+
theme(aspect.ratio = 0.2,
plot.title = element_text(size = 12, margin = margin(0,0,4,0)),
plot.margin = margin(0,0,0,0))
Figure5B = gene_violin(data_set_to_plot="Single_cell_seq_germline",
genes_by_GO="GO_term_selection",
GO_term = "double-strand break repair",
normalization="each_gene",
text_scale = 12)+
expand_limits(y = c(-1, 1.2))+
ggtitle("scRNAseq: Double-strand break repair")+
ylab("log normalized expression\ntoGSC/CB/2CC")+
theme(aspect.ratio = 0.2,
plot.title = element_text(size = 12, margin = margin(0,0,4,0)),
plot.margin = margin(0,0,0,0))
Figure5C = gene_violin(data_set_to_plot="Polysome_seq",
genes_by_GO="GO_term_selection",
GO_term = "double-strand break repair",
normalization="each_gene",
text_scale = 12)+
expand_limits(y = c(-2, 4))+
ggtitle("Polysome-seq: Double-strand break repair")+
theme(aspect.ratio = 0.2,
plot.title = element_text(size = 12, margin = margin(0,0,4,0)),
plot.margin = margin(0,0,0,0))
Figure5 = multi_panel_figure(
width = c((8.5-4*(2.0694+0.025))/2, 0.0694, 2.025, rep(2.0694+0.025, 2), 2.025, 0.0694, (8.5-4*(2.0694+0.025))/2),
height = c(0.5, 1.1837, 1.1837, 0.25, 1.1837, 1.1837, 0.25, 1.1837, 1.1837, 1.1837, 1.1837, (11-8*(1.1837+0.025))-0.25-0.25),
row_spacing = 0.025, column_spacing = 0, unit = "in",
panel_label_type = "none", figure_name = "Figure5")
Figure5
Figure5 = Figure5 %>%
fill_panel(Figure5A, label = "A", scaling = "fit", panel_clip = "on", row = 2:3, column = 3:6) %>%
fill_panel(Figure5B, label = "B", scaling = "fit", panel_clip = "on", row = 5:6, column = 3:6) %>%
fill_panel(Figure5C, label = "C", scaling = "fit", panel_clip = "on", row = 8:10, column = 3:6)
Figure5
ggsave(filename = "Figure5.pdf", plot = Figure5, path = "../Paper/Figures/", width = 8.5, height = 11, device = cairo_pdf)
renv::activate()
if (is.na(strsplit(getwd(), "Developmental-Landscape")[[1]][2])) {
setwd("ShinyExpresionMap/")
}else if (!is.na(strsplit(getwd(), "Developmental-Landscape")[[1]][2])) {
}else{
errorCondition("WD is invalid")
}
source("server_modules/ggplotWhiteTheme.R")
source("../Paper/Helper_functions/image_panel.R")
source("../Paper/Helper_functions/png_as_gg.R")
source("server_modules/ovary_map.R")
source("../Paper/Helper_functions/in_situ_quant.r")
renv:activate()
renv::activate()
if (is.na(strsplit(getwd(), "Developmental-Landscape")[[1]][2])) {
setwd("ShinyExpresionMap/")
}else if (!is.na(strsplit(getwd(), "Developmental-Landscape")[[1]][2])) {
}else{
errorCondition("WD is invalid")
}
source("server_modules/ggplotWhiteTheme.R")
source("../Paper/Helper_functions/image_panel.R")
source("../Paper/Helper_functions/png_as_gg.R")
source("server_modules/ovary_map.R")
source("../Paper/Helper_functions/in_situ_quant.r")
renv::activate()
library(tidyverse)
library(heatmaply)
library(latex2exp)
setwd("E:/Documents/Developmental-Landscape")
renv::activate()
renv::activate("DevelomentLandscape.Rproj")
renv::activate()
renv::activate("/")
renv::activate("here")
library(latex2exp)
renv::deactivate()
here()
setwd("E:/Documents/Developmental-Landscape")
@^0.5
2^0.5
